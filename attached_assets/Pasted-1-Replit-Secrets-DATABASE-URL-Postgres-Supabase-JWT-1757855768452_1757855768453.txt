1) Настройка окружения / секреты (сделать в Replit Secrets)

DATABASE_URL (Postgres / Supabase)

JWT_SECRET

TELEGRAM_BOT_TOKEN

TELEGRAM_ADMIN_CHAT_IDS — CSV или JSON списка доверенных админ-чатов (например [-1001234, 123456789])

BYBIT_API_KEY, BYBIT_API_SECRET, BYBIT_RECV_WINDOW (если используете Bybit)

INFURA_KEY / ALCHEMY_KEY (опционально для on-chain)

STORAGE_* для KYC файлов (Supabase / S3)

REDIS_URL (для очередей/BullMQ)

✅ Проверить: секреты установлены в Replit и не закоммичены.

2) БД — добавления (Prisma/SQL) — минимально

Добавить таблицы:

model TelegramChat {
  id        Int    @id @default(autoincrement())
  chatId    String @unique
  role      String // 'admin' | 'operator'
  name      String?
  createdAt DateTime @default(now())
}

model BybitAccount {
  id        Int @id @default(autoincrement())
  name      String
  apiKey    String
  apiSecret String
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
}

model Notification {
  id        Int @id @default(autoincrement())
  orderId   String?
  type      String // 'order_created','deposit','order_status'
  payload   Json
  sent      Boolean @default(false)
  createdAt DateTime @default(now())
}


И обновить ExchangeOrder модель (если нет):

поля: publicId, depositAddress, txHash, requiredConfirmations, confirmedCount, telegramNotified:Boolean.

✅ Проверить: миграция выполнена, Prisma Studio показывает таблицы.

3) API / архитектура обязательных эндпоинтов

POST /api/exchange/create — создаёт заказ:

Валидация суммы + min/max + резерв.

Генерация publicId и depositAddress (в MVP — mock или ask wallet-service).

Сохраняет ExchangeOrder.status = 'waiting_for_deposit'.

Добавляет запись в очередь notifications для отправки в Telegram.

Возвращает { publicId, depositAddress, amountToSend, requiredConfirmations }.

GET /api/exchange/:publicId/status — открываемая пользователем страница статуса (показывать адрес, QR, confs).

POST /api/webhook/blockchain — приёма webhooks от ноды/провайдера (txHash, address, confirmations):

найти order по depositAddress или txHash,

обновить confirmedCount, txHash,

если confirmedCount >= requiredConfirmations → статус processing → enqueue payout task,

отправить нотификацию в Telegram (update).

POST /api/telegram/callback — обработка inline button callback (от Telegram): approve payout / mark paid / reject.

Проверять callback_query.from.id в TelegramChat таблице (role=admin).

Менять статус ExchangeOrder и логировать операцию.

GET /api/admin/orders — админ-панель (фильтры by status).

POST /api/bybit/poll (internal) — endpoint вызываемый worker'ом, либо реализовать worker напрямую.

✅ Проверить: каждый endpoint должен иметь тесты (unit+integration) и корректную авторизацию.

4) Telegram-интеграция (архитектура)

Push: сервер (через очередь) шлёт сообщения в Telegram при событиях:

order_created — полная карточка заказа + кнопки [Открыть] [ПОДТВЕРДИТЬ ВЫПЛАТУ] [ОТМЕНИТЬ]

deposit_detected — «Пополнение по адресу X: tx=... Количество: ... → связать с orderId?» (ссылка/кнопка)

order_paid / order_failed — уведомление пользователю и админам.

Callback buttons: кнопки присылают callback_query серверу (/api/telegram/callback). Ответ — изменить статус в БД, отправить confirmation reply в чат и обновить UI (editMessageText).

Admin mapping: TelegramChat таблица хранит доверенные chat_id и роль; при нажатии кнопки проверять роль.

Пример формата сообщения (HTML)
<b>Новая заявка</b>
ID: <code>WX-20250914-abc123</code>
От: BTC → USD
Сумма: 0.123 BTC
Адрес для пополнения: <code>1A2b3C...</code>
Пользователь: user@example.com
<a href="https://your-replit-url.repl.co/admin/orders/WX-20250914-abc123">Открыть в админке</a>


Кнопки: inline keyboard:

[
  [{ "text": "✅ Подтвердить выплату", "callback_data":"approve:WX-..."}],
  [{ "text": "❌ Отклонить", "callback_data":"reject:WX-..."}]
]

Пример отправки (Node.js, fetch)
const TELEGRAM = process.env.TELEGRAM_BOT_TOKEN;
async function sendTelegram(chatId, text, replyMarkup){
  await fetch(`https://api.telegram.org/bot${TELEGRAM}/sendMessage`, {
    method:'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({ chat_id: chatId, text, parse_mode:'HTML', reply_markup: replyMarkup })
  });
}


✅ Проверить: при создании заявки в БД появляется Notification и админ получает Telegram-сообщение с рабочими кнопками.

5) Bybit — как мониторить пополнения (рекомендация)

Bybit имеет API для запроса записей депозитов GET /v5/asset/deposit/query-record (получить deposit records). Отличный метод: periodic polling +/- WebSocket private channels (если доступно для депозитных событий). 
Bybit Exchange
+1

Реализуйте worker workers/bybit-monitor.js, который:

Хранит в БД lastCheckedAt / lastCursor.

Раз в 10–30 секунд (или в пределах rate limit) вызывает GET /v5/asset/deposit/query-record с временным окном.

Для новых записей проверяет txHash и amount, сопоставляет address/memo с заказами → если найдено — вызывает POST /api/webhook/blockchain локально (или напрямую обновляет DB) и добавляет уведомление в Telegram.

Аутентификация: Bybit требует HMAC-SHA256 подпись и точную синхронизацию timestamp (см. guide). Для этого используйте официальный SDK bybit-api (npm) или готовые примеры подписи. 
vezgo.com
+1

Почему polling? — потому что не всегда доступен webhook для депозитов у централизованных бирж; polling гарантирует, что вы получите запись даже если вебсокет/подписка падает.

✅ Проверить: симулировать появление записи в Bybit (или в тестовом аккаунте сделать депоз) → worker находит запись → order в БД обновлён → Telegram-уведомление пришло.

6) Worker / очередь (архитектура)

Использовать Redis + BullMQ:

notifications queue — отправка сообщений в Telegram (retry/backoff).

payouts queue — обработка выплат (автомат/ручная).

bybit-poll worker — опрашивает Bybit → помещает job в notifications/payouts.

Запуск: node workers/telegram-bridge.js и node workers/bybit-monitor.js (в Replit — background process).

✅ Проверить: jobs обрабатываются, падения логируются и ретраятся.

7) UI: что доработать (список конкретных задач)

Главный виджет: от-сумма / получение, селект валют, показ min/max, кнопка «Обменять». После нажатия — show modal с depositAddress и QR.

Страница /order/[publicId] — полный трекинг статусов, txHash, время, contact manager.

Мой кабинет: список заказов, фильтр, KYC upload (drag&drop + progress).

Админка: ручная смена статуса, просмотр KYC, кнопка «Создать/удалить Telegram-чат» (для привязки новых админов).

Логи webhooks: admin view для отладки (raw payloads).

(Это прямо копия UX из wx.money: виджет, страница статуса, KYC, админ.) 
WxMoney - Главная

8) Короткие код-сниппеты (копировать в проект)

Webhook handler (Express/Next API route):

app.post('/api/webhook/blockchain', async (req, res) => {
  const { txHash, address, confirmations, coin } = req.body;
  // 1) Найти заказ по depositAddress
  // 2) Сохранить/обновить txHash + confirmedCount
  // 3) Если confirmedCount >= requiredConfirmations -> set status = processing
  // 4) Enqueue notification
  res.status(200).send({ ok: true });
});


Bybit polling pseudo (axios):

// use official SDK or sign request: timestamp+apiKey+recv_window+queryString -> HMAC SHA256
const axios = require('axios');
// GET /v5/asset/deposit/query-record
const resp = await axios.get('https://api.bybit.com/v5/asset/deposit/query-record', { params: { startTime, endTime }, headers: { 'x-api-key': API_KEY, 'x-signature': SIGN }});


(подробности подписи — использовать Bybit SDK; см. docs). 
Bybit Exchange
+1

9) Безопасность (обязательные пункты)

Хранить ключи и токены только в Replit Secrets.

Подпись webhook (если провайдер поддерживает) — проверка HMAC.

Rate-limit на отправку в Telegram и на Bybit polling (не превышать rate limits).

Роли/разрешения: доступ к callback-api только для доверенных telegram chat ids и админов.

Не хранить приватные ключи hot wallet в коде; разделить hot/cold wallet (если у вас custody).

10) Acceptance criteria (чётко тестируемые)

Создать заявку (POST /api/exchange/create) → возвращён publicId + depositAddress.

На создание заявки приходит Telegram-уведомление в TELEGRAM_ADMIN_CHAT_IDS с рабочими inline-кнопками.

Симулировать on-chain tx (webhook) или появление deposit record у Bybit → order статус обновлён → Telegram-уведомление об обновлении.

Админ может нажать кнопку в Telegram → вызвать /api/telegram/callback → изменить статус заказа на paid → пользователь получает уведомление.

Worker Bybit находит депозиты (через API) и сопоставляет с orders.

Все секреты хранятся в environment; нет приватных ключей в репо.

11) Чек-лист для разработчика (не пропускать шаги)

 Все env-переменные в Replit Secrets.

 Prisma схема + миграции.

 POST /api/exchange/create работает и создаёт запись.

 Queue & workers (Telegram, Bybit) работают и логируют.

 Telegram bot шлёт сообщения и обрабатывает callback запросы.

 Bybit monitor (polling/WebSocket) находит deposit → обновляет DB.

 Юнит и интеграционные тесты для основных сценариев.

 Документация README с командой запуска worker’ов.