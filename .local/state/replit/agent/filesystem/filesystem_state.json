{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nCryptoFlow is a non-custodial cryptocurrency exchange platform that enables secure crypto-to-crypto and crypto-to-fiat exchanges. The platform supports fixed and floating exchange rates, manual operator-managed payouts, and optional KYC/AML compliance. It provides a React-based frontend widget for exchanges, real-time order tracking, and an admin panel for operators to manage transactions and compliance requirements.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built with **React** using modern development tools and libraries:\n\n- **Component Library**: ShadCN UI components with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with CSS variables for theming (dark/light mode support)\n- **State Management**: React Query for server state and React Context for theme management\n- **Routing**: Wouter for client-side routing\n- **Internationalization**: React i18next with support for English, Russian, and Romanian\n- **Form Handling**: React Hook Form with Zod validation\n- **Real-time Updates**: WebSocket connection for live exchange rates and order status updates\n\n## Backend Architecture\n\nThe backend follows a **Node.js/Express** architecture with TypeScript:\n\n- **API Framework**: Express.js with RESTful endpoints\n- **Database Layer**: Drizzle ORM for PostgreSQL database operations\n- **Real-time Communication**: WebSocket server for broadcasting rate updates and order status changes\n- **In-Memory Storage**: Temporary memory storage implementation with interface for easy database migration\n- **Validation**: Zod schemas shared between frontend and backend\n\n## Core Features Implementation\n\n### Exchange System\n- **Rate Types**: Fixed rate (locked for TTL) and floating rate (market-based) exchanges\n- **Order Flow**: Create order ‚Üí generate deposit address ‚Üí monitor deposits ‚Üí process payouts\n- **Currency Support**: Multiple cryptocurrencies with network selection (BTC, ETH, USDT-TRC20/ERC20, USDC)\n- **Fiat Payouts**: Card-based payouts with masked card storage (PCI-compliant approach)\n\n### Order Management\n- **Status Tracking**: Comprehensive order lifecycle from awaiting_deposit to completed\n- **Operator Interface**: Manual payout controls and KYC request capabilities\n- **Audit Trail**: Complete logging of operator actions and status changes\n\n### Security Features\n- **Input Validation**: Comprehensive validation on both client and server sides\n- **Rate Limiting**: Protection against abuse through request throttling\n- **Data Protection**: Sensitive card data is masked, not stored in full\n- **Session Management**: Secure session handling with proper authentication\n\n## Database Schema\n\nThe system uses PostgreSQL with the following main entities:\n\n- **Currencies**: Supported cryptocurrencies and fiat currencies with network specifications\n- **Exchange Rates**: Historical and current exchange rates between currency pairs\n- **Orders**: Complete order information including amounts, addresses, status, and metadata\n- **KYC Requests**: Compliance-related verification requests and documentation\n\n## External Dependencies\n\n- **Neon Database**: PostgreSQL database hosting via @neondatabase/serverless\n- **Drizzle ORM**: Database operations and migrations\n- **React Query**: Server state management and caching\n- **ShadCN UI**: Pre-built accessible UI components\n- **Radix UI**: Headless UI primitives for complex components\n- **WebSocket**: Real-time communication for rate updates\n- **Zod**: Runtime type validation and schema definitions\n- **React i18next**: Internationalization framework\n- **Tailwind CSS**: Utility-first CSS framework\n- **Vite**: Build tool and development server\n\nThe architecture is designed to be modular and scalable, with clear separation between the exchange widget, order management, and administrative functions. The system supports both automated and manual processing workflows, making it suitable for regulated cryptocurrency exchange operations.\n\n# Google OAuth Setup Instructions\n\n## ‚úÖ Current Status\n**EXCELLENT NEWS:** Google OAuth is already **FULLY IMPLEMENTED** in the codebase! The only missing piece is the environment variables.\n\n**What's already working:**\n- ‚úÖ Google OAuth Strategy configured in `server/oauthProviders.ts`\n- ‚úÖ Endpoints `/api/auth/google` and `/api/auth/google/callback` created\n- ‚úÖ CSRF protection enabled\n- ‚úÖ User session integration working\n- ‚úÖ Error handling implemented\n- ‚úÖ Integration with Express server complete\n\n**What needs to be added:** Only `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET` environment variables.\n\n## üîß Setup Instructions\n\n### Step 1: Get Google OAuth Credentials\n\n1. **Go to Google Cloud Console:**\n   - Visit: https://console.cloud.google.com/\n   - Create a new project or select existing one\n\n2. **Enable Google+ API:**\n   - Navigate to: APIs & Services ‚Üí Library\n   - Search for \"Google+ API\" and enable it\n\n3. **Configure OAuth Consent Screen:**\n   - Go to: APIs & Services ‚Üí OAuth consent screen\n   - Choose \"External\" user type\n   - Fill required fields:\n     - App name: \"CryptoFlow Exchange\"\n     - User support email: your email\n     - Developer contact information: your email\n\n4. **Create OAuth Client ID:**\n   - Go to: APIs & Services ‚Üí Credentials\n   - Click \"Create Credentials\" ‚Üí \"OAuth client ID\"\n   - Application type: \"Web application\"\n   - Name: \"CryptoFlow Exchange App\"\n   - Authorized JavaScript origins: `https://your-replit-domain.replit.dev`\n   - Authorized redirect URIs: `https://your-replit-domain.replit.dev/api/auth/google/callback`\n\n5. **Get your credentials:**\n   - Copy the \"Client ID\" \n   - Copy the \"Client Secret\"\n\n### Step 2: Add Credentials to Replit\n\n1. **Open Replit Secrets:**\n   - In your Replit project, click on \"Tools\" ‚Üí \"Secrets\"\n\n2. **Add Google OAuth credentials:**\n   ```\n   Key: GOOGLE_CLIENT_ID\n   Value: [Your Google Client ID from step 1]\n\n   Key: GOOGLE_CLIENT_SECRET  \n   Value: [Your Google Client Secret from step 1]\n   ```\n\n### Step 3: Restart Application\n\n1. **Restart the workflow:**\n   - The application will automatically restart\n   - Check logs for: \"‚úÖ Google OAuth configured successfully\"\n\n2. **Verify it's working:**\n   - Visit: `https://your-replit-domain.replit.dev/api/auth/providers`\n   - Should show: `{\"providers\":[\"replit\",\"google\"],\"configured\":1,...}`\n\n### Step 4: Test Google OAuth\n\n1. **Test the login flow:**\n   - Go to your application\n   - Click \"Sign in with Google\" button\n   - Should redirect to Google OAuth\n   - After authorization, should redirect back to your app\n\n## üîç Troubleshooting\n\n### Issue: \"Google OAuth not configured\" in logs\n**Solution:** Check that `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET` are properly set in Replit Secrets.\n\n### Issue: \"redirect_uri_mismatch\" error\n**Solution:** Ensure the redirect URI in Google Cloud Console exactly matches: `https://your-replit-domain.replit.dev/api/auth/google/callback`\n\n### Issue: \"csrf_failed\" error  \n**Solution:** This is normal CSRF protection. Ensure you're accessing `/api/auth/google` directly, not `/api/auth/google/callback`.\n\n## üìù Code Implementation Details\n\nThe Google OAuth implementation includes:\n\n**Security Features:**\n- CSRF state parameter protection\n- Secure session handling\n- Access token and refresh token management\n- User profile integration with existing user system\n\n**User Flow:**\n1. User clicks \"Sign in with Google\"\n2. Redirects to Google OAuth with CSRF state\n3. User authorizes application\n4. Google redirects to `/api/auth/google/callback`\n5. Backend validates CSRF state and processes tokens\n6. User session created with Replit Auth compatibility\n7. User redirected to application homepage\n\n**Database Integration:**\n- Automatically creates/updates user in database\n- Uses format: `google_{google_user_id}` for unique user identification\n- Stores profile information (name, email, profile image)","size_bytes":7965},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        slideUp: {\n          from: { \n            transform: \"translateY(20px)\", \n            opacity: \"0\" \n          },\n          to: { \n            transform: \"translateY(0)\", \n            opacity: \"1\" \n          },\n        },\n        pulse: {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-in-out\",\n        \"slide-up\": \"slideUp 0.3s ease-out\",\n        \"pulse-slow\": \"pulse 3s infinite\",\n      },\n      backgroundImage: {\n        \"gradient-primary\": \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\",\n        \"gradient-primary-dark\": \"linear-gradient(135deg, #1e3a8a 0%, #581c87 100%)\",\n      },\n      backdropBlur: {\n        xs: \"2px\",\n      },\n      spacing: {\n        18: \"4.5rem\",\n        88: \"22rem\",\n      },\n      zIndex: {\n        60: \"60\",\n        70: \"70\",\n        80: \"80\",\n        90: \"90\",\n        100: \"100\",\n      },\n      maxWidth: {\n        \"8xl\": \"88rem\",\n        \"9xl\": \"96rem\",\n      },\n      minHeight: {\n        \"screen-75\": \"75vh\",\n        \"screen-50\": \"50vh\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    function({ addUtilities }: { addUtilities: any }) {\n      const newUtilities = {\n        '.glassmorphism': {\n          background: 'rgba(255, 255, 255, 0.25)',\n          backdropFilter: 'blur(10px)',\n          WebkitBackdropFilter: 'blur(10px)',\n          border: '1px solid rgba(255, 255, 255, 0.18)',\n        },\n        '.dark .glassmorphism': {\n          background: 'rgba(15, 23, 42, 0.25)',\n          border: '1px solid rgba(255, 255, 255, 0.1)',\n        },\n        '.gradient-bg': {\n          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n        },\n        '.dark .gradient-bg': {\n          background: 'linear-gradient(135deg, #1e3a8a 0%, #581c87 100%)',\n        },\n      }\n      addUtilities(newUtilities)\n    }\n  ],\n} satisfies Config;\n","size_bytes":4720},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { authRouter } from './routes/auth';\nimport { adminRouter } from './routes/admin';\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { createOrderSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { security } from \"./middleware/security\";\nimport { setupAuth, isAuthenticated, requireAdmin } from \"./replitAuth\";\nimport { setupOAuthProviders } from \"./oauthProviders\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Setup Replit Auth\n  await setupAuth(app);\n  \n  // Setup OAuth providers (Google, GitHub)\n  const baseUrl = process.env.REPLIT_DOMAINS \n    ? `https://${process.env.REPLIT_DOMAINS.split(',')[0]}`\n    : 'http://localhost:5000';\n  setupOAuthProviders(app, baseUrl);\n  \n  // Apply security middleware\n  app.use(security.corsHeaders);\n  app.use('/api', security.rateLimiter);\n  app.use('/api', security.validateInput);\n  \n  // WebSocket server for real-time rate updates\n  const wss = new WebSocketServer({ \n    server: httpServer, \n    path: '/ws',\n    perMessageDeflate: false,\n    maxPayload: 1024 * 1024, // 1MB\n  });\n  \n  // Store connected clients with connection info\n  const clients = new Map<WebSocket, { id: string; connectedAt: Date }>();\n  \n  wss.on('connection', (ws, req) => {\n    const clientId = `client-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    clients.set(ws, { id: clientId, connectedAt: new Date() });\n    \n    console.log(`WebSocket client connected: ${clientId} (${clients.size} total)`);\n    \n    // Send initial rates with error handling\n    storage.getLatestRates()\n      .then(rates => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({\n            type: 'rates_update',\n            data: rates,\n            timestamp: new Date().toISOString()\n          }));\n        }\n      })\n      .catch(error => {\n        console.error('Error sending initial rates to client:', error);\n      });\n    \n    // Heartbeat ping every 30 seconds to keep connection alive\n    const heartbeatInterval = setInterval(() => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.ping();\n      }\n    }, 30000);\n    \n    ws.on('pong', () => {\n      // Client responded to ping - connection is alive\n    });\n    \n    ws.on('close', (code, reason) => {\n      clearInterval(heartbeatInterval);\n      const clientInfo = clients.get(ws);\n      clients.delete(ws);\n      console.log(`WebSocket client disconnected: ${clientInfo?.id || 'unknown'} (code: ${code}, reason: ${reason?.toString() || 'none'}) (${clients.size} remaining)`);\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket client error:', error);\n      clearInterval(heartbeatInterval);\n      const clientInfo = clients.get(ws);\n      clients.delete(ws);\n      if (clientInfo) {\n        console.log(`Removed error client: ${clientInfo.id}`);\n      }\n    });\n  });\n\n  // Broadcast rate updates to all connected clients with error handling\n  const broadcastRateUpdate = (rates: any[]) => {\n    if (clients.size === 0) return; // No clients to broadcast to\n    \n    const message = JSON.stringify({\n      type: 'rates_update',\n      data: rates,\n      timestamp: new Date().toISOString()\n    });\n    \n    const deadClients: WebSocket[] = [];\n    \n    clients.forEach((clientInfo, client) => {\n      try {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(message);\n        } else {\n          deadClients.push(client);\n        }\n      } catch (error) {\n        console.error(`Error sending message to client ${clientInfo.id}:`, error);\n        deadClients.push(client);\n      }\n    });\n    \n    // Clean up dead connections\n    deadClients.forEach(client => {\n      const clientInfo = clients.get(client);\n      clients.delete(client);\n      if (clientInfo) {\n        console.log(`Cleaned up dead client: ${clientInfo.id}`);\n      }\n    });\n  };\n\n  // Sync WebSocket broadcasts with storage update interval to avoid unnecessary overhead\n  // Broadcast cached rates to WebSocket clients every 15 minutes (matches storage interval)\n  setInterval(async () => {\n    if (clients.size === 0) {\n      console.log('Skipping WebSocket broadcast - no connected clients');\n      return;\n    }\n    \n    try {\n      const rates = await storage.getLatestRates(); // This uses cache, no API calls\n      broadcastRateUpdate(rates);\n      console.log(`Broadcasted rate updates to ${clients.size} WebSocket clients`);\n    } catch (error) {\n      console.error('Error broadcasting cached rates:', error);\n    }\n  }, 900000); // 15 minutes - sync with storage update interval for efficiency\n\n  // API Routes\n  \n  // Authentication routes\n  app.use('/api/auth', authRouter);\n  \n  // Admin routes\n  app.use('/api/admin', adminRouter);\n  \n  // Get supported currencies\n  app.get('/api/currencies', async (req, res) => {\n    try {\n      const currencies = await storage.getCurrencies();\n      res.json(currencies);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch currencies' });\n    }\n  });\n\n  // Get exchange rates (uses cache - no API calls)\n  app.get('/api/rates', async (req, res) => {\n    try {\n      const rates = await storage.getLatestRates(); // Returns cached rates\n      res.set('Cache-Control', 'public, max-age=300'); // Cache for 5 minutes\n      res.json(rates);\n    } catch (error) {\n      console.error('Error fetching rates:', error);\n      res.status(500).json({ error: 'Failed to fetch rates' });\n    }\n  });\n\n  // Get specific exchange rate (with currency validation)\n  app.get('/api/rates/:from/:to', async (req, res) => {\n    try {\n      const { from, to } = req.params;\n      \n      // Validate currencies exist and are active\n      const [fromCurrency, toCurrency] = await Promise.all([\n        storage.getCurrency(from),\n        storage.getCurrency(to)\n      ]);\n      \n      if (!fromCurrency || !fromCurrency.isActive) {\n        return res.status(400).json({ error: `Invalid or inactive currency: ${from}` });\n      }\n      \n      if (!toCurrency || !toCurrency.isActive) {\n        return res.status(400).json({ error: `Invalid or inactive currency: ${to}` });\n      }\n      \n      const rate = await storage.getExchangeRate(from, to);\n      \n      if (!rate) {\n        return res.status(404).json({ error: 'Exchange rate not found' });\n      }\n      \n      res.set('Cache-Control', 'public, max-age=300'); // Cache for 5 minutes\n      res.json(rate);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch exchange rate' });\n    }\n  });\n\n  // Create new order\n  app.post('/api/orders', security.orderCreationLimiter, async (req, res) => {\n    try {\n      const validatedData = createOrderSchema.parse(req.body);\n      const order = await storage.createOrder(validatedData);\n      \n      // Broadcast new order to WebSocket clients\n      const message = JSON.stringify({\n        type: 'new_order',\n        data: order\n      });\n      \n      clients.forEach((clientInfo, client) => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(message);\n        }\n      });\n      \n      res.json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error('Order validation error:', error.errors);\n        res.status(400).json({ error: 'Invalid request data', details: error.errors });\n      } else {\n        console.error('Order creation error:', error);\n        res.status(500).json({ error: 'Failed to create order' });\n      }\n    }\n  });\n\n  // Get order by ID\n  app.get('/api/orders/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const order = await storage.getOrder(id);\n      \n      if (!order) {\n        return res.status(404).json({ error: 'Order not found' });\n      }\n      \n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch order' });\n    }\n  });\n\n  // Update order status (admin endpoint)\n  app.patch('/api/orders/:id/status', isAuthenticated, requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, txHash, payoutTxHash } = req.body;\n      \n      const updates: any = {};\n      if (txHash) updates.txHash = txHash;\n      if (payoutTxHash) updates.payoutTxHash = payoutTxHash;\n      \n      const order = await storage.updateOrderStatus(id, status, updates);\n      \n      if (!order) {\n        return res.status(404).json({ error: 'Order not found' });\n      }\n      \n      // Broadcast order update\n      const message = JSON.stringify({\n        type: 'order_update',\n        data: order\n      });\n      \n      clients.forEach((clientInfo, client) => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(message);\n        }\n      });\n      \n      res.json(order);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update order' });\n    }\n  });\n\n  // Get user orders (authenticated user endpoint)\n  app.get('/api/orders/user', isAuthenticated, async (req, res) => {\n    try {\n      const user = (req as any).user;\n      if (!user?.id) {\n        return res.status(401).json({ error: 'User not authenticated' });\n      }\n      \n      const orders = await storage.getUserOrders(user.id);\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch user orders' });\n    }\n  });\n\n  // Get all orders (admin endpoint)\n  app.get('/api/admin/orders', isAuthenticated, requireAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getOrders();\n      res.json(orders);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch orders' });\n    }\n  });\n\n  // Create KYC request (with rate limiting and validation)\n  app.post('/api/kyc', security.kycRateLimiter, async (req, res) => {\n    try {\n      const { orderId, documentType } = req.body;\n      \n      // Validate the order exists\n      const order = await storage.getOrder(orderId);\n      if (!order) {\n        return res.status(404).json({ error: 'Order not found' });\n      }\n      \n      // Check if KYC request already exists\n      const existingKyc = await storage.getKycRequest(orderId);\n      if (existingKyc) {\n        return res.status(409).json({ error: 'KYC request already exists for this order' });\n      }\n      \n      const kycRequest = await storage.createKycRequest({\n        orderId,\n        status: 'pending',\n        documentType,\n        reason: null,\n        documentUrl: null\n      });\n      \n      res.json(kycRequest);\n    } catch (error) {\n      console.error('Error creating KYC request:', error);\n      res.status(500).json({ error: 'Failed to create KYC request' });\n    }\n  });\n\n  // Get KYC request by order ID\n  app.get('/api/kyc/:orderId', async (req, res) => {\n    try {\n      const { orderId } = req.params;\n      const kycRequest = await storage.getKycRequest(orderId);\n      \n      if (!kycRequest) {\n        return res.status(404).json({ error: 'KYC request not found' });\n      }\n      \n      res.json(kycRequest);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch KYC request' });\n    }\n  });\n\n  // Health check endpoint\n  app.get('/api/health', (req, res) => {\n    res.json({ \n      status: 'ok', \n      timestamp: new Date().toISOString(),\n      version: '1.0.0'\n    });\n  });\n\n  // Readiness check endpoint\n  app.get('/api/ready', async (req, res) => {\n    try {\n      // Check database connectivity\n      await storage.getCurrencies();\n      \n      res.json({ \n        status: 'ready', \n        timestamp: new Date().toISOString(),\n        services: {\n          database: 'connected',\n          storage: 'initialized'\n        }\n      });\n    } catch (error) {\n      console.error('Readiness check failed:', error);\n      res.status(503).json({ \n        status: 'not_ready', \n        timestamp: new Date().toISOString(),\n        error: 'Database connection failed'\n      });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":12068},"server/storage.ts":{"content":"import { type Currency, type ExchangeRate, type Order, type KycRequest, type User, type WalletSetting, type PlatformSetting, type EmailToken, type AdminLog, type TelegramConfig, type TelegramHistory, type ExchangeMethod, type InsertCurrency, type InsertExchangeRate, type InsertOrder, type InsertKycRequest, type InsertUser, type UpsertUser, type InsertWalletSetting, type InsertPlatformSetting, type InsertEmailToken, type InsertAdminLog, type InsertTelegramConfig, type InsertTelegramHistory, type InsertExchangeMethod, type CreateOrderRequest, type AdminCreateUserRequest, type AdminUpdateUserRequest, type CreateTelegramConfigRequest, type CreateExchangeMethodRequest, type AdminStats, type RevealTokenRequest, type TestConnectionRequest, type TelegramHistoryFilter, type ChatConfig, type NotificationSetting } from \"@shared/schema\";\nimport { currencies, exchangeRates, orders, kycRequests, users, walletSettings, platformSettings, emailTokens, adminLogs, telegramConfigs, telegramHistory, exchangeMethods } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { exchangeRateService } from \"./services/exchange-api\";\nimport { telegramService } from \"./services/telegram\";\nimport { encryptionService } from \"./services/encryption\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, like, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Currency operations\n  getCurrencies(): Promise<Currency[]>;\n  getCurrency(id: string): Promise<Currency | undefined>;\n  createCurrency(currency: InsertCurrency): Promise<Currency>;\n\n  // Exchange rate operations\n  getExchangeRate(fromCurrency: string, toCurrency: string): Promise<ExchangeRate | undefined>;\n  getLatestRates(): Promise<ExchangeRate[]>;\n  createExchangeRate(rate: InsertExchangeRate): Promise<ExchangeRate>;\n\n  // Order operations\n  createOrder(order: CreateOrderRequest): Promise<Order>;\n  getOrder(id: string): Promise<Order | undefined>;\n  updateOrderStatus(id: string, status: string, updates?: Partial<Order>): Promise<Order | undefined>;\n  getOrders(): Promise<Order[]>;\n  getUserOrders(userId: string): Promise<Order[]>;\n\n  // KYC operations\n  createKycRequest(request: InsertKycRequest): Promise<KycRequest>;\n  getKycRequest(orderId: string): Promise<KycRequest | undefined>;\n  updateKycRequest(id: string, updates: Partial<KycRequest>): Promise<KycRequest | undefined>;\n\n  // User operations\n  createUser(user: InsertUser): Promise<User>;\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  activateUser(userId: string): Promise<boolean>;\n  \n  // Email token operations\n  createEmailToken(token: InsertEmailToken): Promise<EmailToken>;\n  getEmailToken(token: string): Promise<EmailToken | undefined>;\n  deleteEmailToken(token: string): Promise<boolean>;\n  \n  // Wallet settings operations\n  getWalletSettings(): Promise<WalletSetting[]>;\n  getWalletSetting(currency: string): Promise<WalletSetting | undefined>;\n  createWalletSetting(wallet: InsertWalletSetting): Promise<WalletSetting>;\n  updateWalletSetting(id: string, updates: Partial<WalletSetting>): Promise<WalletSetting | undefined>;\n  \n  // Platform settings operations\n  getPlatformSettings(): Promise<PlatformSetting[]>;\n  getPlatformSetting(key: string): Promise<PlatformSetting | undefined>;\n  setPlatformSetting(setting: InsertPlatformSetting): Promise<PlatformSetting>;\n  \n  // Admin logs operations\n  createAdminLog(log: InsertAdminLog): Promise<AdminLog>;\n  getAdminLogs(page?: number, limit?: number, adminId?: string): Promise<{ logs: AdminLog[], total: number }>;\n  \n  // Telegram configs operations  \n  getTelegramConfigs(): Promise<TelegramConfig[]>;\n  getTelegramConfig(id: string): Promise<TelegramConfig | undefined>;\n  createTelegramConfig(config: CreateTelegramConfigRequest, adminId: string): Promise<TelegramConfig>;\n  updateTelegramConfig(id: string, updates: Partial<TelegramConfig>): Promise<TelegramConfig | undefined>;\n  deleteTelegramConfig(id: string): Promise<boolean>;\n  \n  // Secure telegram operations\n  revealTelegramToken(request: RevealTokenRequest, adminId: string): Promise<{ token: string; signingSecret: string; expiresIn: number }>;\n  testTelegramConnection(request: TestConnectionRequest): Promise<{ success: boolean; botInfo?: any; error?: string }>;\n  sendTelegramTest(configId: string, message: string): Promise<{ success: boolean; messageId?: string; error?: string }>;\n  getTelegramStatus(): Promise<{ configured: boolean; hasToken: boolean; hasChatId: boolean; hasSigningSecret: boolean; connectionTest?: any }>;\n  \n  // Telegram history operations\n  getTelegramHistory(filters: TelegramHistoryFilter): Promise<{ history: TelegramHistory[]; total: number }>;\n  createTelegramHistory(history: InsertTelegramHistory): Promise<TelegramHistory>;\n  updateTelegramTestStatus(configId: string, status: 'success' | 'failed' | 'pending', error?: string): Promise<void>;\n  \n  // Exchange methods operations\n  getExchangeMethods(): Promise<ExchangeMethod[]>;\n  getExchangeMethod(id: string): Promise<ExchangeMethod | undefined>;\n  createExchangeMethod(method: CreateExchangeMethodRequest, adminId: string): Promise<ExchangeMethod>;\n  updateExchangeMethod(id: string, updates: Partial<ExchangeMethod>): Promise<ExchangeMethod | undefined>;\n  deleteExchangeMethod(id: string): Promise<boolean>;\n  \n  // Enhanced user operations for admin\n  getAllUsers(page?: number, limit?: number, search?: string): Promise<{ users: User[], total: number }>;\n  adminCreateUser(user: AdminCreateUserRequest): Promise<User>;\n  adminUpdateUser(id: string, updates: AdminUpdateUserRequest): Promise<User | undefined>;\n  deactivateUser(id: string): Promise<boolean>;\n  \n  // Enhanced currency operations for admin\n  getAllCurrencies(): Promise<Currency[]>;\n  updateCurrency(id: string, updates: Partial<Currency>): Promise<Currency | undefined>;\n  deleteCurrency(id: string): Promise<boolean>;\n  \n  // Enhanced wallet operations for admin\n  deleteWalletSetting(id: string): Promise<boolean>;\n  \n  // Stats operations\n  getAdminStats(): Promise<AdminStats>;\n}\n\nexport class PostgreSQLStorage implements IStorage {\n  private rateCache: Map<string, { rate: ExchangeRate; timestamp: number }> = new Map();\n  private readonly CACHE_TTL = 15 * 60 * 1000; // 15 minutes cache\n  private readonly RATE_UPDATE_INTERVAL = 15 * 60 * 1000; // Update rates every 15 minutes\n  private isInitialized = false;\n  private isInitializing = false;\n  private initializationPromise: Promise<void> | null = null;\n\n  constructor() {\n    // Start background initialization - completely non-blocking\n    this.startBackgroundInitialization();\n    // Start rate update interval\n    setInterval(() => this.updateRatesInBackground(), this.RATE_UPDATE_INTERVAL);\n  }\n  \n  private startBackgroundInitialization() {\n    // Initialize in the background without blocking anything\n    setTimeout(() => {\n      this.initializeData().catch(error => {\n        console.error('Background initialization error:', error);\n        // Retry after 5 seconds if failed\n        setTimeout(() => this.startBackgroundInitialization(), 5000);\n      });\n    }, 100); // Small delay to let server start first\n  }\n\n  private async initializeData() {\n    if (this.isInitialized || this.isInitializing) return;\n    \n    this.isInitializing = true;\n    try {\n      // Quick count check instead of selecting all currencies\n      const currencyCount = await db.select({ count: currencies.id }).from(currencies).limit(1);\n      \n      if (currencyCount.length === 0) {\n        // Initialize supported currencies\n        const supportedCurrencies: InsertCurrency[] = [\n          {\n            id: 'btc',\n            name: 'Bitcoin',\n            symbol: 'BTC',\n            type: 'crypto',\n            network: 'BTC',\n            minAmount: '0.001',\n            maxAmount: '10',\n            isActive: true,\n            iconUrl: 'https://cryptoicons.org/api/icon/btc/200'\n          },\n          {\n            id: 'eth',\n            name: 'Ethereum',\n            symbol: 'ETH',\n            type: 'crypto',\n            network: 'ETH',\n            minAmount: '0.01',\n            maxAmount: '100',\n            isActive: true,\n            iconUrl: 'https://cryptoicons.org/api/icon/eth/200'\n          },\n          {\n            id: 'usdt-trc20',\n            name: 'Tether TRC20',\n            symbol: 'USDT',\n            type: 'crypto',\n            network: 'TRC20',\n            minAmount: '50',\n            maxAmount: '50000',\n            isActive: true,\n            iconUrl: 'https://cryptoicons.org/api/icon/usdt/200'\n          },\n          {\n            id: 'usdt-erc20',\n            name: 'Tether ERC20',\n            symbol: 'USDT',\n            type: 'crypto',\n            network: 'ERC20',\n            minAmount: '50',\n            maxAmount: '50000',\n            isActive: true,\n            iconUrl: 'https://cryptoicons.org/api/icon/usdt/200'\n          },\n          {\n            id: 'usdc',\n            name: 'USD Coin',\n            symbol: 'USDC',\n            type: 'crypto',\n            network: 'ERC20',\n            minAmount: '50',\n            maxAmount: '50000',\n            isActive: true,\n            iconUrl: 'https://cryptoicons.org/api/icon/usdc/200'\n          },\n          {\n            id: 'card-mdl',\n            name: 'Visa/MasterCard MDL',\n            symbol: 'MDL',\n            type: 'fiat',\n            network: null,\n            minAmount: '500',\n            maxAmount: '500000',\n            isActive: true,\n            iconUrl: null\n          },\n          {\n            id: 'card-usd',\n            name: 'Visa/MasterCard USD',\n            symbol: 'USD',\n            type: 'fiat',\n            network: null,\n            minAmount: '50',\n            maxAmount: '50000',\n            isActive: true,\n            iconUrl: null\n          },\n          {\n            id: 'card-eur',\n            name: 'Visa/MasterCard EUR',\n            symbol: 'EUR',\n            type: 'fiat',\n            network: null,\n            minAmount: '50',\n            maxAmount: '50000',\n            isActive: true,\n            iconUrl: null\n          }\n        ];\n\n        // Use transaction for bulk insert for better performance\n        await db.insert(currencies).values(supportedCurrencies).onConflictDoNothing();\n        console.log('Initialized currencies in database');\n      }\n      \n      // Initialize exchange rates if none exist (non-blocking)\n      this.initializeFallbackRates().catch(console.error);\n      \n      this.isInitialized = true;\n      console.log('‚úÖ Storage initialization completed successfully');\n    } catch (error) {\n      console.error('‚ùå Error initializing data:', error);\n    } finally {\n      this.isInitializing = false;\n    }\n  }\n\n  private async updateRatesInBackground() {\n    try {\n      console.log('Updating exchange rates...');\n      await this.refreshRatesFromAPI();\n    } catch (error) {\n      console.error('Error updating rates in background:', error);\n    }\n  }\n\n  private async refreshRatesFromAPI() {\n    try {\n      const realRates = await exchangeRateService.getAllRates();\n      \n      if (realRates && realRates.length > 0) {\n        // Validate currency pairs against active currencies\n        const activeCurrencies = await this.getCurrencies();\n        const activeCurrencyIds = new Set(activeCurrencies.map(c => c.id));\n        \n        const validRates = realRates.filter(rate => \n          activeCurrencyIds.has(rate.fromCurrency) && activeCurrencyIds.has(rate.toCurrency)\n        );\n        \n        for (const rate of validRates) {\n          const rateData: ExchangeRate = {\n            id: randomUUID(),\n            fromCurrency: rate.fromCurrency,\n            toCurrency: rate.toCurrency,\n            rate: rate.rate,\n            timestamp: new Date()\n          };\n          \n          // Update cache\n          this.rateCache.set(`${rate.fromCurrency}-${rate.toCurrency}`, {\n            rate: rateData,\n            timestamp: Date.now()\n          });\n          \n          // Update/insert in database\n          await db.insert(exchangeRates).values(rateData)\n            .onConflictDoNothing();\n        }\n      }\n    } catch (error) {\n      console.error('Error refreshing rates from API:', error);\n      // Ensure fallback rates exist\n      await this.initializeFallbackRates();\n    }\n  }\n\n  private async initializeFallbackRates() {\n    try {\n      // Quick count check for better performance\n      const rateCount = await db.select({ count: exchangeRates.id }).from(exchangeRates).limit(1);\n      \n      if (rateCount.length === 0) {\n        const fallbackRates = [\n          { from: 'btc', to: 'usdt-erc20', rate: '90000' },\n          { from: 'btc', to: 'usdt-trc20', rate: '90000' },\n          { from: 'btc', to: 'card-usd', rate: '90000' },\n          { from: 'eth', to: 'usdt-erc20', rate: '3200' },\n          { from: 'eth', to: 'usdt-trc20', rate: '3200' },\n          { from: 'eth', to: 'card-usd', rate: '3200' },\n          { from: 'usdt-erc20', to: 'btc', rate: '0.000011' },\n          { from: 'usdt-erc20', to: 'eth', rate: '0.0003125' },\n          { from: 'usdt-erc20', to: 'card-usd', rate: '1' },\n          { from: 'usdt-trc20', to: 'btc', rate: '0.000011' },\n          { from: 'usdt-trc20', to: 'eth', rate: '0.0003125' },\n          { from: 'usdt-trc20', to: 'card-usd', rate: '1' },\n          { from: 'usdt-trc20', to: 'card-mdl', rate: '18.5' },\n          { from: 'usdt-trc20', to: 'card-eur', rate: '0.92' },\n        ];\n        \n        const fallbackRateData: InsertExchangeRate[] = fallbackRates.map(rate => ({\n          id: randomUUID(),\n          fromCurrency: rate.from,\n          toCurrency: rate.to,\n          rate: rate.rate,\n          timestamp: new Date()\n        }));\n        \n        await db.insert(exchangeRates).values(fallbackRateData);\n        console.log('Initialized fallback exchange rates');\n      }\n    } catch (error) {\n      console.error('Error initializing fallback rates:', error);\n    }\n  }\n\n  // Currency operations\n  async getCurrencies(): Promise<Currency[]> {\n    return await db.select().from(currencies).where(eq(currencies.isActive, true));\n  }\n\n  async getCurrency(id: string): Promise<Currency | undefined> {\n    const result = await db.select().from(currencies).where(eq(currencies.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createCurrency(currency: InsertCurrency): Promise<Currency> {\n    const result = await db.insert(currencies).values(currency).returning();\n    return result[0];\n  }\n\n  // Exchange rate operations with caching\n  async getExchangeRate(fromCurrency: string, toCurrency: string): Promise<ExchangeRate | undefined> {\n    const cacheKey = `${fromCurrency}-${toCurrency}`;\n    const cached = this.rateCache.get(cacheKey);\n    \n    // Return cached rate if it's fresh\n    if (cached && (Date.now() - cached.timestamp) < this.CACHE_TTL) {\n      return cached.rate;\n    }\n    \n    // Get from database\n    const result = await db.select()\n      .from(exchangeRates)\n      .where(and(\n        eq(exchangeRates.fromCurrency, fromCurrency),\n        eq(exchangeRates.toCurrency, toCurrency)\n      ))\n      .orderBy(desc(exchangeRates.timestamp))\n      .limit(1);\n    \n    if (result[0]) {\n      // Update cache\n      this.rateCache.set(cacheKey, {\n        rate: result[0],\n        timestamp: Date.now()\n      });\n      return result[0];\n    }\n    \n    return undefined;\n  }\n\n  async getLatestRates(): Promise<ExchangeRate[]> {\n    // Return all cached rates if available\n    const cachedRates = Array.from(this.rateCache.values())\n      .filter(cached => (Date.now() - cached.timestamp) < this.CACHE_TTL)\n      .map(cached => cached.rate);\n    \n    if (cachedRates.length > 0) {\n      return cachedRates;\n    }\n    \n    // Otherwise get from database\n    const result = await db.select().from(exchangeRates).orderBy(desc(exchangeRates.timestamp));\n    \n    // Update cache\n    result.forEach(rate => {\n      this.rateCache.set(`${rate.fromCurrency}-${rate.toCurrency}`, {\n        rate,\n        timestamp: Date.now()\n      });\n    });\n    \n    return result;\n  }\n\n  async createExchangeRate(rate: InsertExchangeRate): Promise<ExchangeRate> {\n    const result = await db.insert(exchangeRates).values(rate).returning();\n    \n    // Update cache\n    this.rateCache.set(`${rate.fromCurrency}-${rate.toCurrency}`, {\n      rate: result[0],\n      timestamp: Date.now()\n    });\n    \n    return result[0];\n  }\n\n  // Order operations\n  async createOrder(orderRequest: CreateOrderRequest): Promise<Order> {\n    const orderId = 'CF-' + Math.random().toString(36).substr(2, 8).toUpperCase();\n    \n    // Calculate amounts and fees\n    const fromAmount = parseFloat(orderRequest.fromAmount);\n    const platformFee = fromAmount * 0.005; // 0.5% fee\n    const networkFee = orderRequest.fromCurrency.includes('usdt') ? 2 : 0.0001;\n    \n    // Get real-time exchange rate\n    let exchangeRate: number;\n    try {\n      exchangeRate = await exchangeRateService.getRate(orderRequest.fromCurrency, orderRequest.toCurrency);\n    } catch (error) {\n      console.error('Failed to get real-time rate, using cached/stored rate:', error);\n      const rate = await this.getExchangeRate(orderRequest.fromCurrency, orderRequest.toCurrency);\n      exchangeRate = rate ? parseFloat(rate.rate) : 1;\n    }\n    \n    const effectiveAmount = fromAmount - platformFee - networkFee;\n    const toAmount = effectiveAmount * exchangeRate;\n\n    // Generate deposit address (mock)\n    const depositAddress = this.generateDepositAddress(orderRequest.fromCurrency);\n\n    // Mask card number if provided\n    let cardDetails = null;\n    if (orderRequest.cardDetails) {\n      cardDetails = {\n        ...orderRequest.cardDetails,\n        number: this.maskCardNumber(orderRequest.cardDetails.number)\n      };\n    }\n\n    const newOrder: InsertOrder = {\n      id: orderId,\n      userId: orderRequest.userId || null,\n      fromCurrency: orderRequest.fromCurrency,\n      toCurrency: orderRequest.toCurrency,\n      fromAmount: fromAmount.toString(),\n      toAmount: toAmount.toString(),\n      exchangeRate: exchangeRate.toString(),\n      rateType: orderRequest.rateType,\n      status: 'awaiting_deposit',\n      depositAddress,\n      recipientAddress: orderRequest.recipientAddress || null,\n      cardDetails,\n      contactEmail: orderRequest.contactEmail || null,\n      platformFee: platformFee.toString(),\n      networkFee: networkFee.toString(),\n      rateLockExpiry: orderRequest.rateType === 'fixed' ? \n        new Date(Date.now() + 10 * 60 * 1000) : null, // 10 minutes lock\n      txHash: null,\n      payoutTxHash: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    const result = await db.insert(orders).values(newOrder).returning();\n    \n    // Send Telegram notification\n    try {\n      if (telegramService.isConfigured()) {\n        await telegramService.sendOrderNotification(result[0]);\n        console.log(`Telegram notification sent for order ${orderId}`);\n      } else {\n        console.log('Telegram not configured, skipping notification');\n      }\n    } catch (error) {\n      console.error('Failed to send Telegram notification:', error);\n    }\n    \n    return result[0];\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.id, id)).limit(1);\n    return result[0];\n  }\n\n  async updateOrderStatus(id: string, status: string, updates?: Partial<Order>): Promise<Order | undefined> {\n    const updateData: any = {\n      status,\n      updatedAt: new Date(),\n      ...updates\n    };\n\n    const result = await db.update(orders)\n      .set(updateData)\n      .where(eq(orders.id, id))\n      .returning();\n\n    return result[0];\n  }\n\n  async getOrders(): Promise<Order[]> {\n    return await db.select().from(orders).orderBy(desc(orders.createdAt));\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return await db.select().from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n  }\n\n  // KYC operations\n  async createKycRequest(request: InsertKycRequest): Promise<KycRequest> {\n    const result = await db.insert(kycRequests).values(request).returning();\n    return result[0];\n  }\n\n  async getKycRequest(orderId: string): Promise<KycRequest | undefined> {\n    const result = await db.select().from(kycRequests)\n      .where(eq(kycRequests.orderId, orderId))\n      .limit(1);\n    return result[0];\n  }\n\n  async updateKycRequest(id: string, updates: Partial<KycRequest>): Promise<KycRequest | undefined> {\n    const updateData = {\n      ...updates,\n      updatedAt: new Date()\n    };\n\n    const result = await db.update(kycRequests)\n      .set(updateData)\n      .where(eq(kycRequests.id, id))\n      .returning();\n\n    return result[0];\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    if (!userData.id) {\n      throw new Error('User ID is required for upsert operation');\n    }\n\n    const existing = await this.getUser(userData.id);\n    \n    if (existing) {\n      // Update existing user\n      const updateData = {\n        email: userData.email ?? existing.email,\n        firstName: userData.firstName ?? existing.firstName,\n        lastName: userData.lastName ?? existing.lastName,\n        profileImageUrl: userData.profileImageUrl ?? existing.profileImageUrl,\n        updatedAt: new Date(),\n      };\n      \n      const result = await db.update(users)\n        .set(updateData)\n        .where(eq(users.id, userData.id))\n        .returning();\n      \n      return result[0];\n    } else {\n      // Create new user\n      const newUser = {\n        id: userData.id,\n        email: userData.email ?? null,\n        firstName: userData.firstName ?? null,\n        lastName: userData.lastName ?? null,\n        profileImageUrl: userData.profileImageUrl ?? null,\n        role: 'user',\n        isActive: true,\n      };\n      \n      const result = await db.insert(users).values(newUser).returning();\n      return result[0];\n    }\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const updateData = {\n      ...updates,\n      updatedAt: new Date()\n    };\n\n    const result = await db.update(users)\n      .set(updateData)\n      .where(eq(users.id, id))\n      .returning();\n\n    return result[0];\n  }\n\n  async activateUser(userId: string): Promise<boolean> {\n    try {\n      const result = await db.update(users)\n        .set({ isActive: true, updatedAt: new Date() })\n        .where(eq(users.id, userId))\n        .returning();\n\n      return result.length > 0;\n    } catch (error) {\n      console.error('Error activating user:', error);\n      return false;\n    }\n  }\n\n  // Email token operations\n  async createEmailToken(token: InsertEmailToken): Promise<EmailToken> {\n    const result = await db.insert(emailTokens).values(token).returning();\n    return result[0];\n  }\n\n  async getEmailToken(token: string): Promise<EmailToken | undefined> {\n    const result = await db.select().from(emailTokens)\n      .where(eq(emailTokens.token, token))\n      .limit(1);\n    return result[0];\n  }\n\n  async deleteEmailToken(token: string): Promise<boolean> {\n    try {\n      const result = await db.delete(emailTokens)\n        .where(eq(emailTokens.token, token))\n        .returning();\n\n      return result.length > 0;\n    } catch (error) {\n      console.error('Error deleting email token:', error);\n      return false;\n    }\n  }\n\n  // Wallet settings operations\n  async getWalletSettings(): Promise<WalletSetting[]> {\n    return await db.select().from(walletSettings);\n  }\n\n  async getWalletSetting(currency: string): Promise<WalletSetting | undefined> {\n    const result = await db.select().from(walletSettings)\n      .where(eq(walletSettings.currency, currency))\n      .limit(1);\n    return result[0];\n  }\n\n  async createWalletSetting(wallet: InsertWalletSetting): Promise<WalletSetting> {\n    const result = await db.insert(walletSettings).values(wallet).returning();\n    return result[0];\n  }\n\n  async updateWalletSetting(id: string, updates: Partial<WalletSetting>): Promise<WalletSetting | undefined> {\n    const result = await db.update(walletSettings)\n      .set(updates)\n      .where(eq(walletSettings.id, id))\n      .returning();\n\n    return result[0];\n  }\n\n  // Platform settings operations\n  async getPlatformSettings(): Promise<PlatformSetting[]> {\n    return await db.select().from(platformSettings);\n  }\n\n  async getPlatformSetting(key: string): Promise<PlatformSetting | undefined> {\n    const result = await db.select().from(platformSettings)\n      .where(eq(platformSettings.key, key))\n      .limit(1);\n    return result[0];\n  }\n\n  async setPlatformSetting(setting: InsertPlatformSetting): Promise<PlatformSetting> {\n    const result = await db.insert(platformSettings)\n      .values(setting)\n      .onConflictDoUpdate({\n        target: platformSettings.key,\n        set: {\n          value: setting.value,\n          description: setting.description,\n          isEncrypted: setting.isEncrypted,\n          updatedAt: new Date(),\n          updatedBy: setting.updatedBy\n        }\n      })\n      .returning();\n\n    return result[0];\n  }\n\n  // Admin logs operations\n  async createAdminLog(log: InsertAdminLog): Promise<AdminLog> {\n    const result = await db.insert(adminLogs).values(log).returning();\n    return result[0];\n  }\n\n  async getAdminLogs(page = 1, limit = 50, adminId?: string): Promise<{ logs: AdminLog[], total: number }> {\n    const offset = (page - 1) * limit;\n    \n    const whereClause = adminId ? eq(adminLogs.adminId, adminId) : undefined;\n    \n    const [logs, totalResult] = await Promise.all([\n      db.select()\n        .from(adminLogs)\n        .where(whereClause)\n        .orderBy(desc(adminLogs.createdAt))\n        .offset(offset)\n        .limit(limit),\n      db.select({ count: count() })\n        .from(adminLogs)\n        .where(whereClause)\n    ]);\n    \n    return {\n      logs,\n      total: totalResult[0].count\n    };\n  }\n\n  // Telegram configs operations\n  async getTelegramConfigs(): Promise<TelegramConfig[]> {\n    const configs = await db.select().from(telegramConfigs).orderBy(desc(telegramConfigs.createdAt));\n    \n    // Decrypt bot tokens for API responses\n    return configs.map(config => ({\n      ...config,\n      botToken: encryptionService.decrypt(config.botToken)\n    }));\n  }\n\n  async getTelegramConfig(id: string): Promise<TelegramConfig | undefined> {\n    const result = await db.select().from(telegramConfigs)\n      .where(eq(telegramConfigs.id, id))\n      .limit(1);\n    \n    if (result[0]) {\n      return {\n        ...result[0],\n        botToken: encryptionService.decrypt(result[0].botToken) // Decrypt for API response\n      };\n    }\n    return result[0];\n  }\n\n  async createTelegramConfig(config: CreateTelegramConfigRequest, adminId: string): Promise<TelegramConfig> {\n    const configData: InsertTelegramConfig = {\n      ...config,\n      botToken: encryptionService.encrypt(config.botToken), // Encrypt the bot token\n      createdBy: adminId\n    };\n    \n    const result = await db.insert(telegramConfigs).values(configData).returning();\n    const decryptedResult = {\n      ...result[0],\n      botToken: encryptionService.decrypt(result[0].botToken) // Return decrypted for API response\n    };\n    return decryptedResult;\n  }\n\n  async updateTelegramConfig(id: string, updates: Partial<TelegramConfig>): Promise<TelegramConfig | undefined> {\n    // Encrypt bot token if it's being updated\n    if (updates.botToken) {\n      updates.botToken = encryptionService.encrypt(updates.botToken);\n    }\n    const result = await db.update(telegramConfigs)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(telegramConfigs.id, id))\n      .returning();\n    \n    if (result[0]) {\n      return {\n        ...result[0],\n        botToken: encryptionService.decrypt(result[0].botToken) // Return decrypted\n      };\n    }\n    return result[0];\n  }\n\n  async deleteTelegramConfig(id: string): Promise<boolean> {\n    const result = await db.delete(telegramConfigs)\n      .where(eq(telegramConfigs.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Exchange methods operations\n  async getExchangeMethods(): Promise<ExchangeMethod[]> {\n    return await db.select().from(exchangeMethods).orderBy(desc(exchangeMethods.createdAt));\n  }\n\n  async getExchangeMethod(id: string): Promise<ExchangeMethod | undefined> {\n    const result = await db.select().from(exchangeMethods)\n      .where(eq(exchangeMethods.id, id))\n      .limit(1);\n    return result[0];\n  }\n\n  async createExchangeMethod(method: CreateExchangeMethodRequest, adminId: string): Promise<ExchangeMethod> {\n    const methodData: InsertExchangeMethod = {\n      ...method,\n      createdBy: adminId\n    };\n    \n    const result = await db.insert(exchangeMethods).values(methodData).returning();\n    return result[0];\n  }\n\n  async updateExchangeMethod(id: string, updates: Partial<ExchangeMethod>): Promise<ExchangeMethod | undefined> {\n    const result = await db.update(exchangeMethods)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(exchangeMethods.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteExchangeMethod(id: string): Promise<boolean> {\n    const result = await db.delete(exchangeMethods)\n      .where(eq(exchangeMethods.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Enhanced user operations for admin\n  async getAllUsers(page = 1, limit = 20, search?: string): Promise<{ users: User[], total: number }> {\n    const offset = (page - 1) * limit;\n    \n    const searchFilter = search ? or(\n      like(users.email, `%${search}%`),\n      like(users.firstName, `%${search}%`),\n      like(users.lastName, `%${search}%`)\n    ) : undefined;\n    \n    const [userList, totalResult] = await Promise.all([\n      db.select()\n        .from(users)\n        .where(searchFilter)\n        .orderBy(desc(users.createdAt))\n        .offset(offset)\n        .limit(limit),\n      db.select({ count: count() })\n        .from(users)\n        .where(searchFilter)\n    ]);\n    \n    return {\n      users: userList,\n      total: totalResult[0].count\n    };\n  }\n\n  async adminCreateUser(user: AdminCreateUserRequest): Promise<User> {\n    const userData: InsertUser = {\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n      isActive: user.isActive,\n      password: null // No password for admin-created users\n    };\n    \n    const result = await db.insert(users).values(userData).returning();\n    return result[0];\n  }\n\n  async adminUpdateUser(id: string, updates: AdminUpdateUserRequest): Promise<User | undefined> {\n    const result = await db.update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deactivateUser(id: string): Promise<boolean> {\n    const result = await db.update(users)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Enhanced currency operations for admin\n  async getAllCurrencies(): Promise<Currency[]> {\n    // Admin can see all currencies including inactive ones\n    return await db.select().from(currencies).orderBy(currencies.id);\n  }\n\n  async updateCurrency(id: string, updates: Partial<Currency>): Promise<Currency | undefined> {\n    const result = await db.update(currencies)\n      .set(updates)\n      .where(eq(currencies.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteCurrency(id: string): Promise<boolean> {\n    const result = await db.delete(currencies)\n      .where(eq(currencies.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Enhanced wallet operations for admin\n  async deleteWalletSetting(id: string): Promise<boolean> {\n    const result = await db.delete(walletSettings)\n      .where(eq(walletSettings.id, id))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Stats operations\n  async getAdminStats(): Promise<AdminStats> {\n    const [\n      allUsers,\n      allOrders,\n      allCurrencies,\n      allWallets\n    ] = await Promise.all([\n      db.select().from(users),\n      db.select().from(orders),\n      db.select().from(currencies),\n      db.select().from(walletSettings)\n    ]);\n\n    const activeUsers = allUsers.filter(user => user.isActive);\n    const completedOrders = allOrders.filter(order => order.status === 'completed');\n    const activeCurrencies = allCurrencies.filter(currency => currency.isActive);\n    const activeWallets = allWallets.filter(wallet => wallet.isActive);\n\n    return {\n      totalUsers: allUsers.length,\n      activeUsers: activeUsers.length,\n      totalOrders: allOrders.length,\n      completedOrders: completedOrders.length,\n      totalCurrencies: allCurrencies.length,\n      activeCurrencies: activeCurrencies.length,\n      totalWallets: allWallets.length,\n      activeWallets: activeWallets.length\n    };\n  }\n\n  // Helper methods\n  private generateDepositAddress(currency: string): string {\n    // Mock address generation based on currency type\n    if (currency === 'btc') {\n      return '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa';\n    } else if (currency === 'eth' || currency.includes('erc20')) {\n      return '0x742d35Cc6634C0532925a3b8D0c2AC4B5d4A2c37';\n    } else if (currency.includes('trc20')) {\n      return 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgj3xDT';\n    }\n    return 'mock-deposit-address';\n  }\n\n  private maskCardNumber(cardNumber: string): string {\n    if (cardNumber.length < 4) return cardNumber;\n    return '**** **** **** ' + cardNumber.slice(-4);\n  }\n\n  // –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Telegram\n  async updateTelegramTestStatus(configId: string, status: 'success' | 'failed' | 'pending', error?: string): Promise<void> {\n    await db.update(telegramConfigs)\n      .set({\n        lastTestAt: new Date(),\n        lastTestStatus: status,\n        lastTestError: error || null\n      })\n      .where(eq(telegramConfigs.id, configId));\n  }\n\n  async revealTelegramToken(request: any, adminId: string): Promise<{ token: string; signingSecret: string; expiresIn: number }> {\n    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Ä–æ—É—Ç–∞—Ö —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é\n    throw new Error('Use secure routes for token revealing');\n  }\n\n  async testTelegramConnection(request: any): Promise<{ success: boolean; botInfo?: any; error?: string }> {\n    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Ä–æ—É—Ç–∞—Ö —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é\n    throw new Error('Use secure routes for connection testing');\n  }\n\n  async sendTelegramTest(configId: string, message: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Ä–æ—É—Ç–∞—Ö\n    throw new Error('Use secure routes for sending test messages');\n  }\n\n  async getTelegramStatus(): Promise<{ configured: boolean; hasToken: boolean; hasChatId: boolean; hasSigningSecret: boolean; connectionTest?: any }> {\n    const configs = await this.getTelegramConfigs();\n    const activeConfig = configs.find(c => c.isActive);\n    \n    return {\n      configured: !!activeConfig,\n      hasToken: !!(activeConfig?.botToken),\n      hasChatId: !!(activeConfig?.chatConfigs && Array.isArray(activeConfig.chatConfigs) && (activeConfig.chatConfigs as any).length > 0),\n      hasSigningSecret: !!(activeConfig?.signingSecret),\n      connectionTest: activeConfig?.lastTestStatus ? {\n        success: activeConfig.lastTestStatus === 'success',\n        lastTest: activeConfig.lastTestAt\n      } : undefined\n    };\n  }\n\n  async getTelegramHistory(filters: any): Promise<{ history: TelegramHistory[]; total: number }> {\n    const history = await db.select().from(telegramHistory);\n    return { history, total: history.length };\n  }\n\n  async createTelegramHistory(history: InsertTelegramHistory): Promise<TelegramHistory> {\n    const [result] = await db.insert(telegramHistory).values(history).returning();\n    return result;\n  }\n}\n\n// Export the storage instance\nexport const storage = new PostgreSQLStorage();","size_bytes":36747},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, eq } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, boolean, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const currencies = pgTable(\"currencies\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  symbol: text(\"symbol\").notNull(),\n  type: text(\"type\").notNull(), // 'crypto' or 'fiat'\n  network: text(\"network\"), // e.g., 'TRC20', 'ERC20', 'BTC'\n  minAmount: decimal(\"min_amount\", { precision: 18, scale: 8 }).notNull(),\n  maxAmount: decimal(\"max_amount\", { precision: 18, scale: 8 }).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  iconUrl: text(\"icon_url\"),\n});\n\nexport const exchangeRates = pgTable(\"exchange_rates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromCurrency: text(\"from_currency\").notNull(),\n  toCurrency: text(\"to_currency\").notNull(),\n  rate: decimal(\"rate\", { precision: 18, scale: 8 }).notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\"),\n  fromCurrency: text(\"from_currency\").notNull(),\n  toCurrency: text(\"to_currency\").notNull(),\n  fromAmount: decimal(\"from_amount\", { precision: 18, scale: 8 }).notNull(),\n  toAmount: decimal(\"to_amount\", { precision: 18, scale: 8 }).notNull(),\n  exchangeRate: decimal(\"exchange_rate\", { precision: 18, scale: 8 }).notNull(),\n  rateType: text(\"rate_type\").notNull(), // 'fixed' or 'float'\n  status: text(\"status\").notNull(), // 'awaiting_deposit', 'confirmed', 'processing', 'completed', 'failed', 'refunded'\n  depositAddress: text(\"deposit_address\").notNull(),\n  recipientAddress: text(\"recipient_address\"),\n  cardDetails: jsonb(\"card_details\"), // For card payouts: { number: masked, bankName, holderName }\n  contactEmail: text(\"contact_email\"),\n  platformFee: decimal(\"platform_fee\", { precision: 18, scale: 8 }).notNull(),\n  networkFee: decimal(\"network_fee\", { precision: 18, scale: 8 }),\n  rateLockExpiry: timestamp(\"rate_lock_expiry\"),\n  txHash: text(\"tx_hash\"),\n  payoutTxHash: text(\"payout_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const kycRequests = pgTable(\"kyc_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: text(\"order_id\").notNull(),\n  status: text(\"status\").notNull(), // 'pending', 'approved', 'rejected'\n  documentType: text(\"document_type\"),\n  documentUrl: text(\"document_url\"),\n  reason: text(\"reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Session storage table - mandatory for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - updated for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  password: varchar(\"password\"), // For local auth\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: text(\"role\").notNull().default('user'), // 'admin', 'user'\n  isActive: boolean(\"is_active\").default(false).notNull(), // Default to false for email confirmation\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Email confirmation tokens\nexport const emailTokens = pgTable(\"email_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  token: varchar(\"token\", { length: 255 }).unique().notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const walletSettings = pgTable(\"wallet_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  currency: text(\"currency\").notNull(), // e.g. 'btc', 'eth', 'usdt-trc20'\n  address: text(\"address\").notNull(),\n  network: text(\"network\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  createdBy: text(\"created_by\").notNull(), // admin user id\n});\n\nexport const platformSettings = pgTable(\"platform_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  description: text(\"description\"),\n  isEncrypted: boolean(\"is_encrypted\").default(false).notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  updatedBy: text(\"updated_by\").notNull(), // admin user id\n});\n\n// Admin logs table - for logging all admin actions\nexport const adminLogs = pgTable(\"admin_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminId: varchar(\"admin_id\").notNull().references(() => users.id, { onDelete: \"restrict\" }),\n  action: text(\"action\").notNull(), // 'create', 'update', 'delete', 'activate', 'deactivate'\n  target: text(\"target\").notNull(), // 'user', 'wallet', 'currency', 'method', 'telegram'\n  targetId: text(\"target_id\"), // ID of the target object\n  description: text(\"description\").notNull(),\n  metadata: jsonb(\"metadata\"), // Additional data about the action\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Telegram configurations table\nexport const telegramConfigs = pgTable(\"telegram_configs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // Friendly name for the config\n  botToken: text(\"bot_token\").notNull(), // Encrypted token stored here\n  signingSecret: text(\"signing_secret\").notNull(), // Encrypted webhook signing secret\n  chatConfigs: jsonb(\"chat_configs\").notNull(), // Array of chat configurations with types\n  notificationSettings: jsonb(\"notification_settings\").notNull().default('[{\"type\":\"newOrders\",\"enabled\":true},{\"type\":\"orderStatus\",\"enabled\":true},{\"type\":\"payments\",\"enabled\":true},{\"type\":\"systemAlerts\",\"enabled\":true}]'), // Per-notification routing\n  isDefault: boolean(\"is_default\").default(false).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  description: text(\"description\"),\n  lastTestAt: timestamp(\"last_test_at\"),\n  lastTestStatus: text(\"last_test_status\"), // 'success', 'failed', 'pending'\n  lastTestError: text(\"last_test_error\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id, { onDelete: \"restrict\" }),\n});\n\n// Telegram notification history table\nexport const telegramHistory = pgTable(\"telegram_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  configId: varchar(\"config_id\").notNull().references(() => telegramConfigs.id, { onDelete: \"cascade\" }),\n  type: text(\"type\").notNull(), // 'newOrders', 'orderStatus', 'payments', 'systemAlerts', 'adminActions'\n  chatId: text(\"chat_id\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull(), // 'sent', 'failed', 'pending'\n  messageId: text(\"message_id\"), // Telegram message ID if sent successfully\n  errorMessage: text(\"error_message\"),\n  retryCount: text(\"retry_count\").default('0').notNull(),\n  sentAt: timestamp(\"sent_at\").defaultNow().notNull(),\n  relatedOrderId: text(\"related_order_id\"), // Optional link to order\n  metadata: jsonb(\"metadata\"), // Additional context data\n});\n\n// Exchange methods table\nexport const exchangeMethods = pgTable(\"exchange_methods\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // Method name (e.g., \"Bank Transfer\", \"Card Payment\")\n  code: text(\"code\").notNull().unique(), // Unique code (e.g., \"bank_transfer\", \"card_payment\")\n  type: text(\"type\").notNull(), // 'fiat_in', 'fiat_out', 'crypto_in', 'crypto_out'\n  supportedCurrencies: jsonb(\"supported_currencies\").notNull(), // Array of currency IDs\n  parameters: jsonb(\"parameters\"), // Method-specific parameters (fees, limits, etc.)\n  isEnabled: boolean(\"is_enabled\").default(true).notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id, { onDelete: \"restrict\" }),\n});\n\nexport const insertCurrencySchema = createInsertSchema(currencies);\nexport const insertExchangeRateSchema = createInsertSchema(exchangeRates);\nexport const insertOrderSchema = createInsertSchema(orders);\nexport const insertKycRequestSchema = createInsertSchema(kycRequests);\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true });\nexport const upsertUserSchema = createInsertSchema(users).pick({ id: true, email: true, firstName: true, lastName: true, profileImageUrl: true });\nexport const insertWalletSettingSchema = createInsertSchema(walletSettings).omit({ id: true, createdAt: true });\nexport const insertPlatformSettingSchema = createInsertSchema(platformSettings).omit({ id: true, updatedAt: true });\nexport const insertEmailTokenSchema = createInsertSchema(emailTokens).omit({ id: true, createdAt: true });\nexport const insertAdminLogSchema = createInsertSchema(adminLogs).omit({ id: true, createdAt: true });\nexport const insertTelegramConfigSchema = createInsertSchema(telegramConfigs).omit({ id: true, createdAt: true, updatedAt: true, lastTestAt: true, lastTestStatus: true, lastTestError: true });\nexport const insertTelegramHistorySchema = createInsertSchema(telegramHistory).omit({ id: true, sentAt: true });\nexport const insertExchangeMethodSchema = createInsertSchema(exchangeMethods).omit({ id: true, createdAt: true, updatedAt: true });\n\nexport type Currency = typeof currencies.$inferSelect;\nexport type ExchangeRate = typeof exchangeRates.$inferSelect;\nexport type Order = typeof orders.$inferSelect;\nexport type KycRequest = typeof kycRequests.$inferSelect;\nexport type User = typeof users.$inferSelect;\nexport type WalletSetting = typeof walletSettings.$inferSelect;\nexport type PlatformSetting = typeof platformSettings.$inferSelect;\nexport type EmailToken = typeof emailTokens.$inferSelect;\nexport type AdminLog = typeof adminLogs.$inferSelect;\nexport type TelegramConfig = typeof telegramConfigs.$inferSelect;\nexport type TelegramHistory = typeof telegramHistory.$inferSelect;\nexport type ExchangeMethod = typeof exchangeMethods.$inferSelect;\n\nexport type InsertCurrency = z.infer<typeof insertCurrencySchema>;\nexport type InsertExchangeRate = z.infer<typeof insertExchangeRateSchema>;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type InsertKycRequest = z.infer<typeof insertKycRequestSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type InsertWalletSetting = z.infer<typeof insertWalletSettingSchema>;\nexport type InsertPlatformSetting = z.infer<typeof insertPlatformSettingSchema>;\nexport type InsertEmailToken = z.infer<typeof insertEmailTokenSchema>;\nexport type InsertAdminLog = z.infer<typeof insertAdminLogSchema>;\nexport type InsertTelegramConfig = z.infer<typeof insertTelegramConfigSchema>;\nexport type InsertTelegramHistory = z.infer<typeof insertTelegramHistorySchema>;\nexport type InsertExchangeMethod = z.infer<typeof insertExchangeMethodSchema>;\n\n// Additional validation schemas for API\nexport const createOrderSchema = z.object({\n  fromCurrency: z.string().min(1),\n  toCurrency: z.string().min(1),\n  fromAmount: z.string().min(1),\n  rateType: z.enum(['fixed', 'float']),\n  recipientAddress: z.string().optional(),\n  cardDetails: z.object({\n    number: z.string().min(16),\n    bankName: z.string().min(1),\n    holderName: z.string().min(1),\n  }).optional(),\n  contactEmail: z.string().email().optional().or(z.literal(\"\")),\n  userId: z.string().optional(),\n});\n\nexport type CreateOrderRequest = z.infer<typeof createOrderSchema>;\n\n// Auth schemas\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n});\n\nexport const createUserSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  role: z.enum(['admin', 'user']).default('user'),\n});\n\nexport const registerSchema = z.object({\n  login: z.string().min(1, \"Login is required\"),\n  email: z.string().email(\"Invalid email format\"),\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, \"Password must contain at least one uppercase letter, one lowercase letter, and one number\"),\n  passwordConfirm: z.string(),\n}).refine((data) => data.password === data.passwordConfirm, {\n  message: \"Passwords don't match\",\n  path: [\"passwordConfirm\"],\n});\n\nexport const updateWalletSchema = z.object({\n  currency: z.string(),\n  address: z.string().min(1),\n  network: z.string(),\n  isActive: z.boolean().default(true),\n});\n\nexport const updateSettingSchema = z.object({\n  key: z.string(),\n  value: z.string(),\n  description: z.string().optional(),\n  isEncrypted: z.boolean().default(false),\n});\n\nexport type LoginRequest = z.infer<typeof loginSchema>;\nexport type CreateUserRequest = z.infer<typeof createUserSchema>;\nexport type RegisterRequest = z.infer<typeof registerSchema>;\nexport type UpdateWalletRequest = z.infer<typeof updateWalletSchema>;\nexport type UpdateSettingRequest = z.infer<typeof updateSettingSchema>;\n\n// Admin panel validation schemas\nexport const adminCreateUserSchema = z.object({\n  email: z.string().email(),\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  role: z.enum(['admin', 'user']),\n  isActive: z.boolean().default(true),\n});\n\nexport const adminUpdateUserSchema = z.object({\n  firstName: z.string().min(1).optional(),\n  lastName: z.string().min(1).optional(),\n  role: z.enum(['admin', 'user']).optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Chat configuration schema\nexport const chatConfigSchema = z.object({\n  id: z.string().min(1), // Chat ID or @username\n  type: z.enum(['private', 'group', 'supergroup', 'channel']),\n  name: z.string().optional(), // Display name for UI\n  enabled: z.boolean().default(true),\n});\n\n// Notification settings schema\nexport const notificationSettingSchema = z.object({\n  type: z.enum(['newOrders', 'orderStatus', 'payments', 'systemAlerts', 'adminActions']),\n  enabled: z.boolean(),\n  chatId: z.string().optional(), // Specific chat for this notification type\n});\n\nexport const createTelegramConfigSchema = z.object({\n  name: z.string().min(1),\n  botToken: z.string().min(1),\n  signingSecret: z.string().min(1),\n  chatConfigs: z.array(chatConfigSchema).min(1),\n  notificationSettings: z.array(notificationSettingSchema).default([\n    { type: 'newOrders', enabled: true },\n    { type: 'orderStatus', enabled: true },\n    { type: 'payments', enabled: true },\n    { type: 'systemAlerts', enabled: true },\n    { type: 'adminActions', enabled: false }\n  ]),\n  isDefault: z.boolean().default(false),\n  description: z.string().optional(),\n});\n\n// Secure token reveal schema\nexport const revealTokenSchema = z.object({\n  configId: z.string().min(1),\n  adminPassword: z.string().min(1),\n});\n\n// Test connection schema\nexport const testConnectionSchema = z.object({\n  configId: z.string().min(1),\n  testMessage: z.string().optional(),\n});\n\n// Telegram history filter schema\nexport const telegramHistoryFilterSchema = z.object({\n  search: z.string().optional(),\n  type: z.enum(['all', 'newOrders', 'orderStatus', 'payments', 'systemAlerts', 'adminActions']).default('all'),\n  status: z.enum(['all', 'sent', 'failed', 'pending']).default('all'),\n  dateFrom: z.string().optional(),\n  dateTo: z.string().optional(),\n  page: z.number().min(1).default(1),\n  limit: z.number().min(1).max(100).default(20),\n});\n\nexport const createExchangeMethodSchema = z.object({\n  name: z.string().min(1),\n  code: z.string().min(1),\n  type: z.enum(['fiat_in', 'fiat_out', 'crypto_in', 'crypto_out']),\n  supportedCurrencies: z.array(z.string()),\n  parameters: z.record(z.any()).optional(),\n  description: z.string().optional(),\n});\n\nexport const adminStatsSchema = z.object({\n  totalUsers: z.number(),\n  activeUsers: z.number(),\n  totalOrders: z.number(),\n  completedOrders: z.number(),\n  totalCurrencies: z.number(),\n  activeCurrencies: z.number(),\n  totalWallets: z.number(),\n  activeWallets: z.number(),\n});\n\nexport type AdminCreateUserRequest = z.infer<typeof adminCreateUserSchema>;\nexport type AdminUpdateUserRequest = z.infer<typeof adminUpdateUserSchema>;\nexport type CreateTelegramConfigRequest = z.infer<typeof createTelegramConfigSchema>;\nexport type ChatConfig = z.infer<typeof chatConfigSchema>;\nexport type NotificationSetting = z.infer<typeof notificationSettingSchema>;\nexport type RevealTokenRequest = z.infer<typeof revealTokenSchema>;\nexport type TestConnectionRequest = z.infer<typeof testConnectionSchema>;\nexport type TelegramHistoryFilter = z.infer<typeof telegramHistoryFilterSchema>;\nexport type CreateExchangeMethodRequest = z.infer<typeof createExchangeMethodSchema>;\nexport type AdminStats = z.infer<typeof adminStatsSchema>;\n","size_bytes":17640},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { Suspense, lazy } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { ThemeProvider } from \"./contexts/theme-context\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport i18n from \"./lib/i18n\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ProtectedRoute } from \"@/components/protected-route\";\nimport ExchangeOnly from \"@/pages/exchange-only\"; // Main exchange page - clean widget only\n\n// Lazy load non-critical pages for better performance\nconst Home = lazy(() => import(\"@/pages/home\"));\nconst OrderStatus = lazy(() => import(\"@/pages/order-status\"));\nconst OrderConfirmation = lazy(() => import(\"@/pages/order-confirmation\"));\nconst Rates = lazy(() => import(\"@/pages/rates\"));\nconst Support = lazy(() => import(\"@/pages/support\"));\nconst About = lazy(() => import(\"@/pages/about\"));\nconst NotFound = lazy(() => import(\"@/pages/not-found\"));\nconst AdminLoginPage = lazy(() => import(\"@/pages/admin-login\").then(module => ({ default: module.AdminLoginPage })));\nconst AdminDashboardPage = lazy(() => import(\"@/pages/admin-dashboard\").then(module => ({ default: module.AdminDashboardPage })));\nconst AdminUsersPage = lazy(() => import(\"@/pages/admin-users\").then(module => ({ default: module.AdminUsersPage })));\nconst AdminTelegramPage = lazy(() => import(\"@/pages/admin-telegram\").then(module => ({ default: module.AdminTelegramPage })));\nconst AdminCurrenciesPage = lazy(() => import(\"@/pages/admin-currencies\").then(module => ({ default: module.AdminCurrenciesPage })));\nconst AdminExchangeMethodsPage = lazy(() => import(\"@/pages/admin-exchange-methods\").then(module => ({ default: module.AdminExchangeMethodsPage })));\nconst Landing = lazy(() => import(\"@/pages/landing\"));\nconst UserDashboard = lazy(() => import(\"@/pages/user-dashboard\"));\nconst RegisterPage = lazy(() => import(\"@/pages/register\"));\nconst ActivatePage = lazy(() => import(\"@/pages/activate\"));\n\n// High-performance loading component with skeleton\nfunction LoadingFallback() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 flex items-center justify-center\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white/60\"></div>\n        <div className=\"text-white/80 text-sm font-medium\">Loading...</div>\n      </div>\n    </div>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated, isAdmin } = useAuth();\n\n  return (\n    <Suspense fallback={<LoadingFallback />}>\n      <Switch>\n        {/* Main exchange page - clean widget only (eager loaded) */}\n        <Route path=\"/\" component={ExchangeOnly} />\n        <Route path=\"/exchange\" component={ExchangeOnly} />\n        \n        {/* Full landing page with features (lazy loaded) */}\n        <Route path=\"/home\" component={Home} />\n        <Route path=\"/landing\" component={Landing} />\n        \n        {/* Public pages - accessible by everyone (lazy loaded) */}\n        <Route path=\"/order-confirmation\" component={OrderConfirmation} />\n        <Route path=\"/order-status\" component={OrderStatus} />\n        <Route path=\"/rates\" component={Rates} />\n        <Route path=\"/support\" component={Support} />\n        <Route path=\"/about\" component={About} />\n        \n        {/* Auth pages - accessible by everyone */}\n        <Route path=\"/register\" component={RegisterPage} />\n        <Route path=\"/activate\" component={ActivatePage} />\n        \n        {/* User dashboard - only for authenticated users */}\n        <Route path=\"/dashboard\">\n          <ProtectedRoute requiredRole=\"user\">\n            <UserDashboard />\n          </ProtectedRoute>\n        </Route>\n        \n        {/* Admin login page - accessible by everyone */}\n        <Route path=\"/admin/login\" component={AdminLoginPage} />\n        \n        {/* Admin users page - only for admin users */}\n        <Route path=\"/admin/users\">\n          <ProtectedRoute requiredRole=\"admin\">\n            <AdminUsersPage />\n          </ProtectedRoute>\n        </Route>\n        \n        {/* Admin telegram page - only for admin users */}\n        <Route path=\"/admin/telegram\">\n          <ProtectedRoute requiredRole=\"admin\">\n            <AdminTelegramPage />\n          </ProtectedRoute>\n        </Route>\n        \n        {/* Admin currencies page - only for admin users */}\n        <Route path=\"/admin/currencies\">\n          <ProtectedRoute requiredRole=\"admin\">\n            <AdminCurrenciesPage />\n          </ProtectedRoute>\n        </Route>\n        \n        {/* Admin exchange methods page - only for admin users */}\n        <Route path=\"/admin/exchanges\">\n          <ProtectedRoute requiredRole=\"admin\">\n            <AdminExchangeMethodsPage />\n          </ProtectedRoute>\n        </Route>\n        \n        {/* Admin dashboard - only for admin users */}\n        <Route path=\"/admin\">\n          <ProtectedRoute requiredRole=\"admin\">\n            <AdminDashboardPage />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route component={NotFound} />\n      </Switch>\n    </Suspense>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <I18nextProvider i18n={i18n}>\n        <ThemeProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </ThemeProvider>\n      </I18nextProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5616},"client/src/index.css":{"content":"/* Font import removed - now loaded in HTML for better performance */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Mobile-optimized typography and spacing utilities */\n@layer utilities {\n  /* Touch-friendly minimum sizes */\n  .min-touch-target {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  /* Optimized text sizes for mobile readability */\n  .text-mobile-xs { font-size: 0.875rem; line-height: 1.25rem; }\n  .text-mobile-sm { font-size: 1rem; line-height: 1.5rem; }\n  .text-mobile-base { font-size: 1.125rem; line-height: 1.75rem; }\n  .text-mobile-lg { font-size: 1.25rem; line-height: 1.75rem; }\n  \n  /* Mobile-first spacing utilities */\n  .mobile-spacing-tight { @apply space-y-2 sm:space-y-3; }\n  .mobile-spacing-normal { @apply space-y-3 sm:space-y-4; }\n  .mobile-spacing-loose { @apply space-y-4 sm:space-y-6; }\n  \n  /* Container utilities for mobile */\n  .mobile-container { @apply px-4 sm:px-6 lg:px-8; }\n  .mobile-section { @apply py-6 sm:py-8 lg:py-12; }\n  \n  /* Responsive grid utilities */\n  .mobile-grid-1-2 { @apply grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4; }\n  .mobile-grid-1-3 { @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4; }\n}\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(210, 40%, 96%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: Georgia, \"Times New Roman\", serif;\n  --font-mono: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --chart-1: hsl(217.2, 91.2%, 59.8%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217.2, 91.2%, 59.8%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(224.3, 76.3%, 94.1%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00), 0px 1px 2px -1px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00), 0px 1px 2px -1px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00), 0px 2px 4px -1px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00), 0px 4px 6px -1px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00), 0px 8px 10px -1px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Simple, clean animations */\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n/* Simple utility classes */\n.animate-fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n\n/* Simple button effects */\n.btn-modern {\n  transition: all 0.2s ease;\n}\n\n.btn-modern:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Simple card effects */\n.card-modern {\n  transition: all 0.2s ease;\n}\n\n.card-modern:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* Simple glass effect */\n.glassmorphism {\n  background: rgba(255, 255, 255, 0.9);\n  backdrop-filter: blur(8px);\n  -webkit-backdrop-filter: blur(8px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.dark .glassmorphism {\n  background: rgba(15, 23, 42, 0.9);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Enhanced Gradient backgrounds with purple-blue theme */\n.gradient-bg {\n  background: linear-gradient(135deg, #4F46E5 0%, #7C3AED 50%, #EC4899 100%);\n  position: relative;\n  min-height: 100vh;\n}\n\n.gradient-bg::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: radial-gradient(circle at top right, rgba(168, 85, 247, 0.3), transparent 50%),\n              radial-gradient(circle at bottom left, rgba(59, 130, 246, 0.3), transparent 50%);\n  pointer-events: none;\n  z-index: 0;\n}\n\n.dark .gradient-bg {\n  background: linear-gradient(135deg, #1e1b4b 0%, #581c87 50%, #be185d 100%);\n}\n\n/* Secondary gradient for cards and containers */\n.gradient-card {\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.25) 0%, rgba(255, 255, 255, 0.1) 100%);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n}\n\n.dark .gradient-card {\n  background: linear-gradient(135deg, rgba(15, 23, 42, 0.4) 0%, rgba(30, 41, 59, 0.3) 100%);\n  border: 1px solid rgba(255, 255, 255, 0.15);\n}\n\n/* Clean enhanced glass effect */\n.glassmorphism-enhanced {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(8px);\n  -webkit-backdrop-filter: blur(8px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n  border-radius: 12px;\n}\n\n.dark .glassmorphism-enhanced {\n  background: rgba(15, 23, 42, 0.95);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Scrollbar styling */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground));\n}\n\n/* Focus styles */\n.focus-visible {\n  @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background;\n}\n\n/* Form input enhancements */\ninput[type=\"number\"]::-webkit-outer-spin-button,\ninput[type=\"number\"]::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\ninput[type=\"number\"] {\n  -moz-appearance: textfield;\n}\n\n/* Card hover effects */\n.card-hover {\n  @apply transition-all duration-200 hover:shadow-lg hover:scale-[1.02];\n}\n\n/* Button variations */\n.button-gradient {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary) / 0.8) 100%);\n  @apply text-primary-foreground hover:opacity-90 transition-opacity;\n}\n\n/* Status indicators */\n.status-indicator {\n  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n}\n\n.status-pending {\n  @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200;\n}\n\n.status-processing {\n  @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200;\n}\n\n.status-completed {\n  @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;\n}\n\n.status-failed {\n  @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200;\n}\n\n/* Loading animations */\n.loading-spinner {\n  @apply animate-spin rounded-full border-2 border-primary border-t-transparent;\n}\n\n/* Responsive utilities */\n@media (max-width: 768px) {\n  .glassmorphism {\n    backdrop-filter: blur(8px);\n    -webkit-backdrop-filter: blur(8px);\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .glassmorphism {\n    background: hsl(var(--card));\n    border: 2px solid hsl(var(--border));\n    backdrop-filter: none;\n    -webkit-backdrop-filter: none;\n  }\n}\n\n/* Falling Stars Effect */\n@keyframes fallingStar {\n  0% {\n    transform: translate3d(0, -100vh, 0) rotate(0deg);\n    opacity: 0;\n  }\n  10% {\n    opacity: 1;\n  }\n  90% {\n    opacity: 1;\n  }\n  100% {\n    transform: translate3d(0, 100vh, 0) rotate(360deg);\n    opacity: 0;\n  }\n}\n\n@keyframes twinkle {\n  0%, 100% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.8;\n  }\n}\n\n.falling-stars-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 1;\n  overflow: hidden;\n}\n\n.falling-star {\n  position: absolute;\n  width: 2px;\n  height: 2px;\n  background: radial-gradient(circle, rgba(255, 255, 255, 0.8) 0%, rgba(255, 255, 255, 0.4) 50%, transparent 100%);\n  border-radius: 50%;\n  animation: fallingStar linear infinite;\n  opacity: 0;\n  will-change: transform, opacity;\n}\n\n.falling-star::before {\n  content: '';\n  position: absolute;\n  top: -1px;\n  left: -1px;\n  width: 4px;\n  height: 4px;\n  background: radial-gradient(circle, rgba(138, 43, 226, 0.3) 0%, rgba(75, 0, 130, 0.2) 50%, transparent 100%);\n  border-radius: 50%;\n  animation: twinkle 2s ease-in-out infinite;\n}\n\n.dark .falling-star {\n  background: radial-gradient(circle, rgba(255, 255, 255, 0.6) 0%, rgba(255, 255, 255, 0.3) 50%, transparent 100%);\n}\n\n.dark .falling-star::before {\n  background: radial-gradient(circle, rgba(147, 51, 234, 0.4) 0%, rgba(168, 85, 247, 0.3) 50%, transparent 100%);\n}\n\n/* Individual star variations for natural movement */\n.falling-star:nth-child(1) {\n  left: 10%;\n  animation-duration: 8s;\n  animation-delay: -2s;\n}\n\n.falling-star:nth-child(2) {\n  left: 20%;\n  animation-duration: 12s;\n  animation-delay: -5s;\n}\n\n.falling-star:nth-child(3) {\n  left: 35%;\n  animation-duration: 10s;\n  animation-delay: -1s;\n}\n\n.falling-star:nth-child(4) {\n  left: 50%;\n  animation-duration: 15s;\n  animation-delay: -8s;\n}\n\n.falling-star:nth-child(5) {\n  left: 70%;\n  animation-duration: 9s;\n  animation-delay: -3s;\n}\n\n.falling-star:nth-child(6) {\n  left: 80%;\n  animation-duration: 13s;\n  animation-delay: -6s;\n}\n\n.falling-star:nth-child(7) {\n  left: 90%;\n  animation-duration: 11s;\n  animation-delay: -4s;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .falling-star {\n    width: 1.5px;\n    height: 1.5px;\n  }\n  \n  .falling-star::before {\n    width: 3px;\n    height: 3px;\n  }\n  \n  /* Reduce number of stars on mobile */\n  .falling-star:nth-child(n+5) {\n    display: none;\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  .animate-fade-in,\n  .animate-slide-up,\n  .animate-pulse-slow,\n  .falling-star {\n    animation: none;\n  }\n  \n  .falling-stars-container {\n    display: none;\n  }\n  \n  * {\n    transition-duration: 0.01ms !important;\n    animation-duration: 0.01ms !important;\n  }\n}\n","size_bytes":13224},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/exchange-api.ts":{"content":"interface ExchangeRateResponse {\n  [key: string]: number;\n}\n\ninterface CoinGeckoResponse {\n  [coinId: string]: {\n    [currency: string]: number;\n  };\n}\n\ninterface BinanceTickerResponse {\n  symbol: string;\n  price: string;\n}\n\ninterface BybitTickerResponse {\n  retCode: number;\n  result: {\n    list: Array<{\n      symbol: string;\n      lastPrice: string;\n    }>;\n  };\n}\n\nexport class ExchangeRateService {\n  private static instance: ExchangeRateService;\n  private cache: Map<string, { rate: number; timestamp: number }> = new Map();\n  private failureCache: Map<string, { timestamp: number; attempts: number }> = new Map();\n  private readonly CACHE_DURATION = 900000; // 15 minutes\n  private readonly FAILURE_BACKOFF_BASE = 60000; // 1 minute base backoff\n  private readonly MAX_FAILURE_ATTEMPTS = 3;\n\n  static getInstance(): ExchangeRateService {\n    if (!ExchangeRateService.instance) {\n      ExchangeRateService.instance = new ExchangeRateService();\n    }\n    return ExchangeRateService.instance;\n  }\n\n  async getRate(fromCurrency: string, toCurrency: string): Promise<number> {\n    const cacheKey = `${fromCurrency}-${toCurrency}`;\n    const cached = this.cache.get(cacheKey);\n    \n    // Return cached rate if available and fresh\n    if (cached && Date.now() - cached.timestamp < this.CACHE_DURATION) {\n      return cached.rate;\n    }\n\n    // Check if we should skip API calls due to recent failures\n    if (this.shouldSkipAPICall(cacheKey)) {\n      console.log(`Skipping API call for ${cacheKey} due to recent failures, using fallback`);\n      const fallbackRate = this.getFallbackRate(fromCurrency, toCurrency);\n      this.cache.set(cacheKey, { rate: fallbackRate, timestamp: Date.now() });\n      return fallbackRate;\n    }\n\n    try {\n      let rate: number;\n      \n      if (toCurrency.startsWith('card-')) {\n        // Check for direct fiat pair fallback first\n        const directFallback = this.getFallbackRate(fromCurrency, toCurrency);\n        if (directFallback !== 1) {\n          console.log(`Using direct fiat fallback for ${fromCurrency} to ${toCurrency}: ${directFallback}`);\n          rate = directFallback;\n        } else {\n          // For fiat conversions, get USD rate first then convert\n          const fiatCurrency = toCurrency.replace('card-', '').toLowerCase();\n          const usdRate = await this.getCryptoToUSDRate(fromCurrency);\n          rate = fiatCurrency === 'usd' ? usdRate : await this.convertUSDToFiat(usdRate, fiatCurrency);\n        }\n      } else {\n        // Crypto to crypto\n        rate = await this.getCryptoCryptoRate(fromCurrency, toCurrency);\n      }\n\n      // Cache the result\n      this.cache.set(cacheKey, { rate, timestamp: Date.now() });\n      return rate;\n    } catch (error) {\n      // Track API failures for exponential backoff\n      this.trackAPIFailure(cacheKey);\n      \n      console.log(`All APIs failed for ${fromCurrency} to ${toCurrency}, using fallback:`, error instanceof Error ? error.message : String(error));\n      const fallbackRate = this.getFallbackRate(fromCurrency, toCurrency);\n      this.cache.set(cacheKey, { rate: fallbackRate, timestamp: Date.now() });\n      return fallbackRate;\n    }\n  }\n\n  private async getCryptoToUSDRate(currency: string): Promise<number> {\n    const coinIds = {\n      'btc': 'bitcoin',\n      'eth': 'ethereum', \n      'usdt-trc20': 'tether',\n      'usdt-erc20': 'tether',\n      'usdc': 'usd-coin'\n    };\n\n    const coinId = coinIds[currency as keyof typeof coinIds];\n    if (!coinId) throw new Error(`Unsupported currency: ${currency}`);\n\n    // Try CoinGecko first\n    try {\n      const response = await fetch(\n        `https://api.coingecko.com/api/v3/simple/price?ids=${coinId}&vs_currencies=usd`,\n        {\n          headers: {\n            'Accept': 'application/json',\n          },\n          signal: AbortSignal.timeout(5000) // 5 second timeout\n        }\n      );\n\n      if (!response.ok) throw new Error(`CoinGecko API error: ${response.status}`);\n      \n      const data: CoinGeckoResponse = await response.json();\n      return data[coinId]?.usd || 0;\n    } catch (error) {\n      console.log('CoinGecko failed, trying Binance:', error instanceof Error ? error.message : String(error));\n      return this.getBinanceRate(currency);\n    }\n  }\n\n  private async getBinanceRate(currency: string): Promise<number> {\n    const symbolMap = {\n      'btc': 'BTCUSDT',\n      'eth': 'ETHUSDT',\n      'usdc': 'USDCUSDT'\n    };\n\n    // Handle stablecoins directly\n    if (currency.includes('usdt') || currency === 'usdc') {\n      return 1.0;\n    }\n\n    const symbol = symbolMap[currency as keyof typeof symbolMap];\n    if (!symbol) {\n      throw new Error(`No symbol mapping for ${currency}`);\n    }\n\n    try {\n      const response = await fetch(`https://api.binance.com/api/v3/ticker/price?symbol=${symbol}`, {\n        signal: AbortSignal.timeout(5000) // 5 second timeout\n      });\n      if (!response.ok) throw new Error(`Binance API error: ${response.status}`);\n      \n      const data: BinanceTickerResponse = await response.json();\n      return parseFloat(data.price);\n    } catch (error) {\n      console.log('Binance API failed, trying Bybit:', error instanceof Error ? error.message : String(error));\n      return this.getBybitRate(currency);\n    }\n  }\n\n  private async getBybitRate(currency: string): Promise<number> {\n    const symbolMap = {\n      'btc': 'BTCUSDT',\n      'eth': 'ETHUSDT',\n      'usdt-trc20': 'USDTUSDC', // USDT to USDC as proxy for USD\n      'usdt-erc20': 'USDTUSDC',\n      'usdc': 'USDCUSDT'\n    };\n\n    const symbol = symbolMap[currency as keyof typeof symbolMap];\n    if (!symbol) return 1; // Default for stablecoins\n\n    try {\n      const response = await fetch(\n        `https://api.bybit.com/v5/market/tickers?category=spot&symbol=${symbol}`,\n        {\n          headers: {\n            'Accept': 'application/json',\n          },\n          signal: AbortSignal.timeout(5000) // 5 second timeout\n        }\n      );\n      \n      if (!response.ok) throw new Error(`Bybit API error: ${response.status}`);\n      \n      const data: BybitTickerResponse = await response.json();\n      \n      if (data.retCode !== 0 || !data.result?.list?.[0]) {\n        throw new Error('Bybit API returned invalid data');\n      }\n      \n      const price = parseFloat(data.result.list[0].lastPrice);\n      \n      // For USDT pairs, return close to 1\n      if (currency.includes('usdt')) {\n        return 1.0;\n      }\n      \n      return price;\n    } catch (error) {\n      console.log('Bybit API failed, using fallback:', error instanceof Error ? error.message : String(error));\n      return this.getFallbackRate(currency, 'usd');\n    }\n  }\n\n  private async getCryptoCryptoRate(fromCurrency: string, toCurrency: string): Promise<number> {\n    try {\n      const fromUSD = await this.getCryptoToUSDRate(fromCurrency);\n      const toUSD = await this.getCryptoToUSDRate(toCurrency);\n      \n      // Check if we got valid rates (not fallback 1 or 0)\n      if (toUSD === 0 || fromUSD === 0 || (fromUSD === 1 && toUSD === 1)) {\n        throw new Error('Invalid USD rates received, using direct pair fallback');\n      }\n      \n      return fromUSD / toUSD;\n    } catch (error) {\n      console.log(`USD conversion failed for ${fromCurrency}-${toCurrency}, using direct fallback:`, error instanceof Error ? error.message : String(error));\n      return this.getFallbackRate(fromCurrency, toCurrency);\n    }\n  }\n\n  private async convertUSDToFiat(usdAmount: number, fiatCurrency: string): Promise<number> {\n    // For simplicity, using hardcoded rates. In production, use forex API\n    const fiatRates = {\n      'mdl': 18.0,  // USD to MDL\n      'eur': 0.85,  // USD to EUR\n      'usd': 1.0    // USD to USD\n    };\n\n    const rate = fiatRates[fiatCurrency as keyof typeof fiatRates] || 1;\n    return usdAmount * rate;\n  }\n\n  private shouldSkipAPICall(cacheKey: string): boolean {\n    const failure = this.failureCache.get(cacheKey);\n    if (!failure) return false;\n    \n    // Calculate exponential backoff time\n    const backoffTime = this.FAILURE_BACKOFF_BASE * Math.pow(2, failure.attempts - 1);\n    const timeSinceFailure = Date.now() - failure.timestamp;\n    \n    // Skip API call if we're still in backoff period and haven't hit max attempts\n    return timeSinceFailure < backoffTime && failure.attempts < this.MAX_FAILURE_ATTEMPTS;\n  }\n\n  private trackAPIFailure(cacheKey: string): void {\n    const existing = this.failureCache.get(cacheKey);\n    if (existing) {\n      existing.attempts += 1;\n      existing.timestamp = Date.now();\n    } else {\n      this.failureCache.set(cacheKey, { timestamp: Date.now(), attempts: 1 });\n    }\n    \n    // Clean up old failure records after 1 hour\n    const oneHourAgo = Date.now() - 3600000;\n    for (const [key, value] of Array.from(this.failureCache.entries())) {\n      if (value.timestamp < oneHourAgo) {\n        this.failureCache.delete(key);\n      }\n    }\n  }\n\n  private getFallbackRate(fromCurrency: string, toCurrency: string): number {\n    // Comprehensive fallback rates with current market values\n    const fallbackRates: { [key: string]: number } = {\n      // Crypto to fiat - CURRENT MARKET RATES (September 2025)\n      'usdt-trc20-card-mdl': 18.0,    // 1 USDT = 18 MDL\n      'usdt-erc20-card-mdl': 18.0,    // 1 USDT = 18 MDL\n      'usdt-trc20-card-usd': 1.0,     // 1 USDT = 1 USD\n      'usdt-erc20-card-usd': 1.0,     // 1 USDT = 1 USD\n      'usdt-trc20-card-eur': 0.92,    // 1 USDT = 0.92 EUR\n      'usdt-erc20-card-eur': 0.92,    // 1 USDT = 0.92 EUR\n      'usdc-card-usd': 1.0,           // 1 USDC = 1 USD\n      'usdc-card-eur': 0.92,          // 1 USDC = 0.92 EUR\n      'usdc-card-mdl': 18.0,          // 1 USDC = 18 MDL\n      'btc-card-usd': 95000,          // 1 BTC = 95,000 USD\n      'btc-card-eur': 87400,          // 1 BTC = 87,400 EUR\n      'btc-card-mdl': 1710000,        // 1 BTC = 1,710,000 MDL\n      'eth-card-usd': 3800,           // 1 ETH = 3,800 USD\n      'eth-card-eur': 3496,           // 1 ETH = 3,496 EUR\n      'eth-card-mdl': 68400,          // 1 ETH = 68,400 MDL\n      // Crypto to USD (for conversions)\n      'btc-usd': 95000,\n      'eth-usd': 3800,\n      'usdt-trc20-usd': 1.0,\n      'usdt-erc20-usd': 1.0,\n      'usdc-usd': 1.0,\n      // Crypto to crypto\n      'btc-usdt-trc20': 95000,\n      'btc-usdt-erc20': 95000,\n      'btc-usdc': 95000,\n      'eth-usdt-trc20': 3800,\n      'eth-usdt-erc20': 3800,\n      'eth-usdc': 3800,\n      'usdt-trc20-usdt-erc20': 1.0,\n      'usdt-erc20-usdt-trc20': 1.0,\n      'usdt-trc20-usdc': 1.0,\n      'usdt-erc20-usdc': 1.0,\n      // Reverse pairs\n      'usdt-trc20-btc': 0.0000105,\n      'usdt-erc20-btc': 0.0000105,\n      'usdc-btc': 0.0000105,\n      'usdt-trc20-eth': 0.000263,\n      'usdt-erc20-eth': 0.000263,\n      'usdc-eth': 0.000263,\n    };\n\n    const key = `${fromCurrency}-${toCurrency}`;\n    const rate = fallbackRates[key];\n    \n    if (rate) {\n      return rate;\n    }\n    \n    // For debugging - only log missing pairs that we expect to exist\n    if (toCurrency.startsWith('card-') || fromCurrency === 'btc' || fromCurrency === 'eth') {\n      console.warn(`No fallback rate for ${key}, using 1`);\n    }\n    return 1;\n  }\n\n  async getAllRates(): Promise<Array<{ fromCurrency: string; toCurrency: string; rate: string }>> {\n    console.log('getAllRates: Prioritizing cached and fallback rates over API calls...');\n    const pairs = [\n      // Stablecoins to fiat\n      { from: 'usdt-trc20', to: 'card-mdl' },\n      { from: 'usdt-erc20', to: 'card-mdl' },\n      { from: 'usdt-trc20', to: 'card-usd' },\n      { from: 'usdt-erc20', to: 'card-usd' },\n      { from: 'usdt-trc20', to: 'card-eur' },\n      { from: 'usdt-erc20', to: 'card-eur' },\n      { from: 'usdc', to: 'card-usd' },\n      { from: 'usdc', to: 'card-eur' },\n      // Major crypto to fiat\n      { from: 'btc', to: 'card-mdl' },\n      { from: 'btc', to: 'card-usd' },\n      { from: 'btc', to: 'card-eur' },\n      { from: 'eth', to: 'card-mdl' },\n      { from: 'eth', to: 'card-usd' },\n      { from: 'eth', to: 'card-eur' },\n      // Crypto to crypto\n      { from: 'btc', to: 'usdt-trc20' },\n      { from: 'btc', to: 'usdt-erc20' },\n      { from: 'btc', to: 'usdc' },\n      { from: 'eth', to: 'usdt-trc20' },\n      { from: 'eth', to: 'usdt-erc20' },\n      { from: 'eth', to: 'usdc' },\n    ];\n\n    // Process pairs with delays to avoid rate limits\n    const rates = [];\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i];\n      try {\n        const rate = await this.getRate(pair.from, pair.to);\n        rates.push({\n          fromCurrency: pair.from,\n          toCurrency: pair.to,\n          rate: rate.toFixed(8)\n        });\n        \n        // Add small delay between pairs to avoid hammering APIs\n        if (i < pairs.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      } catch (error) {\n        console.error(`Failed to get rate for ${pair.from}-${pair.to}:`, error);\n        // Use fallback rate instead of failing entire operation\n        const fallbackRate = this.getFallbackRate(pair.from, pair.to);\n        rates.push({\n          fromCurrency: pair.from,\n          toCurrency: pair.to,\n          rate: fallbackRate.toFixed(8)\n        });\n      }\n    }\n\n    return rates;\n  }\n}\n\nexport const exchangeRateService = ExchangeRateService.getInstance();","size_bytes":13298},"server/services/telegram.ts":{"content":"import type { Order } from \"@shared/schema\";\nimport { CryptoService } from './crypto';\n\ninterface TelegramMessage {\n  chat_id: string;\n  text: string;\n  parse_mode?: 'Markdown' | 'HTML';\n  reply_markup?: {\n    inline_keyboard: Array<Array<{\n      text: string;\n      callback_data?: string;\n      url?: string;\n    }>>;\n  };\n}\n\nexport class TelegramService {\n  private botToken: string;\n  private chatId: string;\n  private signingSecret: string;\n  private configured: boolean;\n  private rateLimiter: Map<string, number> = new Map();\n  private readonly RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute\n  private readonly MAX_REQUESTS_PER_MINUTE = 30;\n\n  constructor() {\n    this.botToken = process.env.TELEGRAM_BOT_TOKEN || '';\n    this.chatId = process.env.TELEGRAM_CHAT_ID || '';\n    this.signingSecret = process.env.TELEGRAM_SIGNING_SECRET || '';\n    this.configured = !!(this.botToken && this.chatId && this.signingSecret);\n    \n    // Validate token format\n    if (this.botToken && !this.isValidBotToken(this.botToken)) {\n      console.error('Invalid Telegram bot token format');\n      this.configured = false;\n    }\n    \n    // Validate chat ID format\n    if (this.chatId && !this.isValidChatId(this.chatId)) {\n      console.error('Invalid Telegram chat ID format');\n      this.configured = false;\n    }\n    \n    // Validate signing secret\n    if (!this.signingSecret) {\n      console.error('TELEGRAM_SIGNING_SECRET is required for security');\n      this.configured = false;\n    }\n  }\n\n  private isValidBotToken(token: string): boolean {\n    // Telegram bot token format: {bot_id}:{bot_secret}\n    const tokenRegex = /^\\d+:[A-Za-z0-9_-]{35}$/;\n    return tokenRegex.test(token);\n  }\n\n  private isValidChatId(chatId: string): boolean {\n    // Chat ID can be a number (user/group ID) or @channel_name\n    return /^-?\\d+$/.test(chatId) || /^@[a-zA-Z0-9_]+$/.test(chatId);\n  }\n\n  private checkRateLimit(identifier: string = 'default'): boolean {\n    const now = Date.now();\n    const windowStart = now - this.RATE_LIMIT_WINDOW;\n    \n    // Clean old entries\n    for (const [key, timestamp] of Array.from(this.rateLimiter.entries())) {\n      if (timestamp < windowStart) {\n        this.rateLimiter.delete(key);\n      }\n    }\n    \n    // Count requests in current window\n    const recentRequests = Array.from(this.rateLimiter.values())\n      .filter(timestamp => timestamp >= windowStart).length;\n    \n    if (recentRequests >= this.MAX_REQUESTS_PER_MINUTE) {\n      return false;\n    }\n    \n    this.rateLimiter.set(`${identifier}_${now}`, now);\n    return true;\n  }\n\n  private async sendRequest(method: string, data: any): Promise<any> {\n    if (!this.configured) {\n      console.warn('Telegram service not properly configured');\n      return null;\n    }\n\n    if (!this.checkRateLimit(method)) {\n      console.warn('Telegram rate limit exceeded');\n      return null;\n    }\n\n    try {\n      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/${method}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Telegram API error: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`Telegram ${method} failed:`, error);\n      return null;\n    }\n  }\n\n  async sendMessage(text: string, chatId?: string): Promise<boolean> {\n    const message: TelegramMessage = {\n      chat_id: chatId || this.chatId,\n      text,\n      parse_mode: 'HTML'\n    };\n\n    const result = await this.sendRequest('sendMessage', message);\n    return result?.ok === true;\n  }\n\n  async sendOrderNotification(order: Order): Promise<boolean> {\n    const message = this.formatOrderMessage(order);\n    const inlineKeyboard = this.createOrderKeyboard(order);\n\n    const telegramMessage: TelegramMessage = {\n      chat_id: this.chatId,\n      text: message,\n      parse_mode: 'HTML',\n      reply_markup: {\n        inline_keyboard: inlineKeyboard\n      }\n    };\n\n    const result = await this.sendRequest('sendMessage', telegramMessage);\n    return result?.ok === true;\n  }\n\n  private formatOrderMessage(order: Order): string {\n    const fromSymbol = order.fromCurrency.toUpperCase().replace('-', ' ');\n    const toSymbol = order.toCurrency.replace('card-', '').toUpperCase();\n    const verifyCode = CryptoService.generateVerificationCode(6);\n    \n    let payoutDetails = '';\n    if (order.cardDetails) {\n      const cardData = order.cardDetails as any;\n      payoutDetails = `\n<b>üí≥ –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:</b>\n‚Ä¢ –ù–æ–º–µ—Ä: <code>${cardData.number}</code>\n‚Ä¢ –ë–∞–Ω–∫: ${cardData.bankName}\n‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü: ${cardData.holderName}`;\n    } else if (order.recipientAddress) {\n      payoutDetails = `\n<b>üí∞ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</b>\n<code>${order.recipientAddress}</code>`;\n    }\n\n    const contactInfo = order.contactEmail ? `\n<b>üìß –ö–æ–Ω—Ç–∞–∫—Ç:</b> ${order.contactEmail}` : '';\n\n    const lockInfo = order.rateType === 'fixed' && order.rateLockExpiry \n      ? `\\n<b>‚è∞ –ö—É—Ä—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ:</b> ${new Date(order.rateLockExpiry).toLocaleString('ru-RU')}`\n      : '';\n\n    return `üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${order.id}</b>\n\n<b>üìä –î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞:</b>\n‚Ä¢ –û—Ç–¥–∞–µ—Ç: <b>${order.fromAmount} ${fromSymbol}</b>\n‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç: <b>${order.toAmount} ${toSymbol}</b>\n‚Ä¢ –ö—É—Ä—Å: <b>1 ${fromSymbol} = ${order.exchangeRate} ${toSymbol}</b>\n‚Ä¢ –¢–∏–ø –∫—É—Ä—Å–∞: <b>${order.rateType === 'fixed' ? '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' : '–ü–ª–∞–≤–∞—é—â–∏–π'}</b>${lockInfo}\n\n<b>üí∞ –ö–æ–º–∏—Å—Å–∏–∏:</b>\n‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${order.platformFee} ${fromSymbol}\n‚Ä¢ –°–µ—Ç—å: ${order.networkFee || '0'} ${fromSymbol}\n\n<b>üìç –ê–¥—Ä–µ—Å –¥–µ–ø–æ–∑–∏—Ç–∞:</b>\n<code>${order.depositAddress}</code>\n${payoutDetails}${contactInfo}\n\n<b>üìÖ –°–æ–∑–¥–∞–Ω:</b> ${new Date(order.createdAt).toLocaleString('ru-RU')}\n<b>üîÑ –°—Ç–∞—Ç—É—Å:</b> ${this.getStatusEmoji(order.status)} ${this.getStatusText(order.status)}\n\n<b>üîí –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b> <code>${verifyCode}</code>`;\n  }\n\n  private createOrderKeyboard(order: Order): Array<Array<{ text: string; callback_data?: string; url?: string }>> {\n    const baseUrl = process.env.FRONTEND_URL || 'http://localhost:5000';\n    const verifyCode = CryptoService.generateVerificationCode(6);\n    \n    return [\n      [\n        { text: 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞', url: `${baseUrl}/order-status?id=${order.id}` },\n        { text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å', callback_data: this.signCallbackData(`copy_address_${order.id}`) }\n      ],\n      [\n        { text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º', callback_data: this.signCallbackData(`mark_paid_${order.id}`) },\n        { text: 'üîç –ó–∞–ø—Ä–æ—Å–∏—Ç—å KYC', callback_data: this.signCallbackData(`request_kyc_${order.id}`) }\n      ],\n      [\n        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: this.signCallbackData(`cancel_order_${order.id}`) }\n      ]\n    ];\n  }\n\n  private getStatusEmoji(status: string): string {\n    const emojis: { [key: string]: string } = {\n      'awaiting_deposit': '‚è≥',\n      'confirmed': '‚úÖ',\n      'processing': 'üîÑ',\n      'completed': '‚úÖ',\n      'failed': '‚ùå',\n      'refunded': '‚Ü©Ô∏è'\n    };\n    return emojis[status] || '‚ùì';\n  }\n\n  private getStatusText(status: string): string {\n    const texts: { [key: string]: string } = {\n      'awaiting_deposit': '–û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞',\n      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',\n      'processing': '–û–±—Ä–∞–±–æ—Ç–∫–∞',\n      'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',\n      'failed': '–ù–µ—É–¥–∞—á–Ω–æ',\n      'refunded': '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤'\n    };\n    return texts[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';\n  }\n\n  async sendDepositConfirmation(order: Order, txHash: string): Promise<boolean> {\n    const message = `üî• <b>–î–ï–ü–û–ó–ò–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù</b>\n\n<b>–ó–∞–∫–∞–∑:</b> #${order.id}\n<b>–°—É–º–º–∞:</b> ${order.fromAmount} ${order.fromCurrency.toUpperCase()}\n<b>Transaction Hash:</b>\n<code>${txHash}</code>\n\n<b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç—ã\n<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç:</b> ${order.toAmount} ${order.toCurrency.replace('card-', '').toUpperCase()}`;\n\n    return await this.sendMessage(message);\n  }\n\n  async sendPayoutComplete(order: Order, payoutTxHash: string): Promise<boolean> {\n    const message = `‚úÖ <b>–í–´–ü–õ–ê–¢–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n<b>–ó–∞–∫–∞–∑:</b> #${order.id}\n<b>–í—ã–ø–ª–∞—á–µ–Ω–æ:</b> ${order.toAmount} ${order.toCurrency.replace('card-', '').toUpperCase()}\n<b>Payout Hash:</b>\n<code>${payoutTxHash}</code>\n\n<b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ`;\n\n    return await this.sendMessage(message);\n  }\n\n  isConfigured(): boolean {\n    return this.configured;\n  }\n\n  // Security method to get sanitized configuration status\n  getConfigStatus(): { configured: boolean; hasToken: boolean; hasChatId: boolean; hasSigningSecret: boolean } {\n    return {\n      configured: this.configured,\n      hasToken: !!this.botToken,\n      hasChatId: !!this.chatId,\n      hasSigningSecret: !!this.signingSecret\n    };\n  }\n\n  // Sign callback data for security\n  private signCallbackData(data: string): string {\n    const timestamp = Date.now().toString();\n    const payload = `${data}:${timestamp}`;\n    const signature = CryptoService.generateHMAC(payload, this.signingSecret);\n    return `${payload}:${signature.substring(0, 8)}`; // Short signature for Telegram limits\n  }\n\n  // Verify callback data signature\n  verifyCallbackData(callbackData: string): { valid: boolean; data?: string } {\n    try {\n      const parts = callbackData.split(':');\n      if (parts.length !== 3) return { valid: false };\n      \n      const [data, timestamp, shortSignature] = parts;\n      const payload = `${data}:${timestamp}`;\n      const expectedSignature = CryptoService.generateHMAC(payload, this.signingSecret);\n      \n      // Check if signature matches (first 8 characters)\n      if (expectedSignature.substring(0, 8) !== shortSignature) {\n        return { valid: false };\n      }\n      \n      // Check if timestamp is not too old (1 hour)\n      const age = Date.now() - parseInt(timestamp);\n      if (age > 60 * 60 * 1000) {\n        return { valid: false };\n      }\n      \n      return { valid: true, data };\n    } catch {\n      return { valid: false };\n    }\n  }\n\n  // Send deposit monitoring alert\n  async sendDepositAlert(currency: string, amount: string, txId: string, orderId?: string): Promise<boolean> {\n    const orderInfo = orderId ? `\\n<b>–°–≤—è–∑–∞–Ω —Å –∑–∞–∫–∞–∑–æ–º:</b> #${orderId}` : '';\n    \n    const message = `üü¢ <b>–î–ï–ü–û–ó–ò–¢ –û–ë–ù–ê–†–£–ñ–ï–ù</b>\n\n<b>–ú–æ–Ω–µ—Ç–∞:</b> ${currency.toUpperCase()}\n<b>–°—É–º–º–∞:</b> ${amount}\n<b>TX ID:</b> <code>${txId}</code>${orderInfo}\n\n<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}`;\n    \n    return await this.sendMessage(message);\n  }\n}\n\nexport const telegramService = new TelegramService();","size_bytes":11008},"client/src/components/currency-grid.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { Currency } from \"@shared/schema\";\n\nconst currencyImages = {\n  'btc': 'https://images.unsplash.com/photo-1518546305927-5a555bb7020d?ixlib=rb-4.0.3&w=100&h=100&fit=crop&crop=center',\n  'eth': 'https://images.unsplash.com/photo-1639762681485-074b7f938ba0?ixlib=rb-4.0.3&w=100&h=100&fit=crop&crop=center',\n  'usdt-trc20': 'https://images.unsplash.com/photo-1621761191319-c6fb62004040?ixlib=rb-4.0.3&w=100&h=100&fit=crop&crop=center',\n  'usdt-erc20': 'https://images.unsplash.com/photo-1621761191319-c6fb62004040?ixlib=rb-4.0.3&w=100&h=100&fit=crop&crop=center',\n  'usdc': 'https://images.unsplash.com/photo-1640340434855-6084b1f4901c?ixlib=rb-4.0.3&w=100&h=100&fit=crop&crop=center',\n  'card-mdl': 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&w=100&h=100&fit=crop&crop=center',\n  'card-usd': 'https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&w=100&h=100&fit=crop&crop=center',\n  'card-eur': 'https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&w=100&h=100&fit=crop&crop=center',\n};\n\nexport function CurrencyGrid() {\n  const { t } = useTranslation();\n  \n  const { data: currencies = [], isLoading } = useQuery<Currency[]>({\n    queryKey: ['/api/currencies'],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">{t('currencies.title')}</h2>\n            <p className=\"text-muted-foreground text-lg\">\n              {t('currencies.subtitle')}\n            </p>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Card key={i} className=\"p-6 animate-pulse\">\n                <CardContent className=\"text-center p-0\">\n                  <div className=\"w-12 h-12 bg-muted rounded-full mx-auto mb-3\"></div>\n                  <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-20 bg-muted/30\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">{t('currencies.title')}</h2>\n          <p className=\"text-muted-foreground text-lg\">\n            {t('currencies.subtitle')}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n          {currencies.map((currency) => (\n            <Card \n              key={currency.id} \n              className=\"hover:shadow-lg transition-all hover:scale-105 cursor-pointer\"\n              data-testid={`currency-card-${currency.id}`}\n            >\n              <CardContent className=\"p-6 text-center\">\n                <img \n                  src={currencyImages[currency.id as keyof typeof currencyImages] || 'https://images.unsplash.com/photo-1640340434855-6084b1f4901c?ixlib=rb-4.0.3&w=100&h=100&fit=crop&crop=center'}\n                  alt={currency.name}\n                  className=\"w-12 h-12 mx-auto mb-3 rounded-full object-cover\"\n                  data-testid={`currency-image-${currency.id}`}\n                />\n                <h3 className=\"font-semibold text-sm\" data-testid={`currency-name-${currency.id}`}>\n                  {currency.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground\" data-testid={`currency-symbol-${currency.id}`}>\n                  {currency.symbol}\n                </p>\n                {currency.network && (\n                  <p className=\"text-xs text-muted-foreground\" data-testid={`currency-network-${currency.id}`}>\n                    {currency.network}\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4244},"client/src/components/exchange-widget.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ArrowUpDown, RefreshCw } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePerformanceTracking } from \"@/lib/performance\";\nimport type { Currency, ExchangeRate } from \"@shared/schema\";\n\nconst exchangeFormSchema = z.object({\n  fromCurrency: z.string().min(1, \"Please select a currency to send\"),\n  toCurrency: z.string().min(1, \"Please select a currency to receive\"),\n  fromAmount: z.string().min(1, \"Please enter an amount\"),\n  rateType: z.enum([\"fixed\", \"float\"]),\n  recipientAddress: z.string().optional(),\n  cardNumber: z.string().optional(),\n  bankName: z.string().optional(),\n  holderName: z.string().optional(),\n  contactEmail: z.string().email(\"Please enter a valid email\").optional().or(z.literal(\"\")),\n  termsAccepted: z.boolean().refine((val) => val === true, {\n    message: \"You must accept the terms and conditions\",\n  }),\n}).superRefine((data, ctx) => {\n  // Validate crypto payout requirements\n  if (!data.toCurrency.startsWith(\"card-\")) {\n    if (!data.recipientAddress || data.recipientAddress.trim() === \"\") {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Wallet address is required for crypto payouts\",\n        path: [\"recipientAddress\"]\n      });\n    }\n  }\n  // Validate card payout requirements\n  if (data.toCurrency.startsWith(\"card-\")) {\n    if (!data.cardNumber || data.cardNumber.trim() === \"\") {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Card number is required for card payouts\",\n        path: [\"cardNumber\"]\n      });\n    }\n    if (!data.bankName || data.bankName.trim() === \"\") {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Bank name is required for card payouts\",\n        path: [\"bankName\"]\n      });\n    }\n    if (!data.holderName || data.holderName.trim() === \"\") {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: \"Card holder name is required for card payouts\",\n        path: [\"holderName\"]\n      });\n    }\n  }\n});\n\ntype ExchangeFormData = z.infer<typeof exchangeFormSchema>;\n\n// Skeleton loader for better perceived performance\nfunction ExchangeWidgetSkeleton() {\n  return (\n    <div className=\"max-w-2xl mx-auto glassmorphism rounded-2xl p-8 shadow-2xl animate-pulse\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div className=\"h-8 w-48 bg-white/20 rounded\"></div>\n        <div className=\"flex space-x-2\">\n          <div className=\"h-8 w-20 bg-white/20 rounded\"></div>\n          <div className=\"h-8 w-20 bg-white/20 rounded\"></div>\n        </div>\n      </div>\n      <div className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <div className=\"h-4 w-20 bg-white/20 rounded\"></div>\n          <div className=\"flex space-x-3\">\n            <div className=\"h-12 flex-1 bg-white/20 rounded\"></div>\n            <div className=\"h-12 w-32 bg-white/20 rounded\"></div>\n          </div>\n        </div>\n        <div className=\"space-y-2\">\n          <div className=\"h-4 w-24 bg-white/20 rounded\"></div>\n          <div className=\"flex space-x-3\">\n            <div className=\"h-12 flex-1 bg-white/20 rounded\"></div>\n            <div className=\"h-12 w-32 bg-white/20 rounded\"></div>\n          </div>\n        </div>\n        <div className=\"h-12 w-full bg-white/20 rounded\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport function ExchangeWidget() {\n  const { trackRender } = usePerformanceTracking('ExchangeWidget');\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [rateType, setRateType] = useState<\"fixed\" | \"float\">(\"fixed\");\n  \n  // Track render performance\n  useEffect(() => {\n    trackRender();\n  }, [trackRender]);\n  const [exchangeRate, setExchangeRate] = useState<number>(0);\n  const [receiveAmount, setReceiveAmount] = useState<string>(\"0\");\n  const [timeRemaining, setTimeRemaining] = useState<number>(600); // 10 minutes\n\n  // WebSocket for real-time rate updates\n  const { lastMessage } = useWebSocket(\"/ws\");\n\n  const form = useForm<ExchangeFormData>({\n    resolver: zodResolver(exchangeFormSchema),\n    defaultValues: {\n      fromCurrency: \"usdt-trc20\",\n      toCurrency: \"card-mdl\",\n      fromAmount: \"\",\n      rateType: \"fixed\",\n      recipientAddress: \"\",\n      cardNumber: \"\",\n      bankName: \"\",\n      holderName: \"\",\n      contactEmail: \"\",\n      termsAccepted: false,\n    },\n  });\n\n  const { data: currencies = [], isLoading: currenciesLoading } = useQuery<Currency[]>({\n    queryKey: ['/api/currencies'],\n    staleTime: 10 * 60 * 1000, // Consider data fresh for 10 minutes\n    gcTime: 30 * 60 * 1000, // Keep in cache for 30 minutes\n    refetchOnWindowFocus: false, // Don't refetch on window focus for better performance\n  });\n\n  const { data: rates = [], isLoading: ratesLoading } = useQuery<ExchangeRate[]>({\n    queryKey: ['/api/rates'],\n    staleTime: 15 * 60 * 1000, // Consider data fresh for 15 minutes (matches server cache)\n    gcTime: 30 * 60 * 1000, // Keep in cache for 30 minutes  \n    refetchOnWindowFocus: false, // Don't refetch on window focus for better performance\n    refetchInterval: 15 * 60 * 1000, // Auto-refetch every 15 minutes\n  });\n\n  // Store order data for confirmation page\n  // Note: createOrderMutation moved to order-confirmation page\n\n  // Update exchange rate when currencies change\n  useEffect(() => {\n    const fromCurrency = form.watch(\"fromCurrency\");\n    const toCurrency = form.watch(\"toCurrency\");\n    \n    if (fromCurrency && toCurrency) {\n      const rate = (rates as ExchangeRate[]).find((r: ExchangeRate) => r.fromCurrency === fromCurrency && r.toCurrency === toCurrency);\n      if (rate) {\n        setExchangeRate(parseFloat(rate.rate));\n      }\n    }\n  }, [form.watch(\"fromCurrency\"), form.watch(\"toCurrency\"), rates]);\n\n  // Calculate receive amount when from amount or rate changes\n  useEffect(() => {\n    const fromAmount = parseFloat(form.watch(\"fromAmount\") || \"0\");\n    if (fromAmount > 0 && exchangeRate > 0) {\n      const fee = fromAmount * 0.005; // 0.5% fee\n      const networkFee = form.watch(\"fromCurrency\").includes(\"usdt\") ? 2 : 0.0001;\n      const effectiveAmount = fromAmount - fee - networkFee;\n      const calculatedReceive = effectiveAmount * exchangeRate;\n      setReceiveAmount(calculatedReceive.toFixed(2));\n    } else {\n      setReceiveAmount(\"0\");\n    }\n  }, [form.watch(\"fromAmount\"), exchangeRate, form.watch(\"fromCurrency\")]);\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (lastMessage && lastMessage.type === 'rates_update') {\n      const updatedRates = lastMessage.data;\n      const fromCurrency = form.watch(\"fromCurrency\");\n      const toCurrency = form.watch(\"toCurrency\");\n      \n      const currentRate = updatedRates.find((r: ExchangeRate) => \n        r.fromCurrency === fromCurrency && r.toCurrency === toCurrency\n      );\n      \n      if (currentRate) {\n        setExchangeRate(parseFloat(currentRate.rate));\n      }\n    }\n  }, [lastMessage, form.watch(\"fromCurrency\"), form.watch(\"toCurrency\")]);\n\n  // Countdown timer for fixed rate\n  useEffect(() => {\n    if (rateType === \"fixed\") {\n      const timer = setInterval(() => {\n        setTimeRemaining((prev) => Math.max(0, prev - 1));\n      }, 1000);\n      \n      return () => clearInterval(timer);\n    }\n  }, [rateType]);\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const swapCurrencies = () => {\n    const fromCurrency = form.getValues(\"fromCurrency\");\n    const toCurrency = form.getValues(\"toCurrency\");\n    \n    form.setValue(\"fromCurrency\", toCurrency);\n    form.setValue(\"toCurrency\", fromCurrency);\n    form.setValue(\"fromAmount\", \"\");\n  };\n\n  const toCurrencyValue = form.watch(\"toCurrency\");\n  const isCardPayout = toCurrencyValue.startsWith(\"card-\");\n  const isCryptoPayout = !toCurrencyValue.startsWith(\"card-\") && (currencies as Currency[]).find((c: Currency) => c.id === toCurrencyValue)?.type === 'crypto';\n  const fromCurrency = (currencies as Currency[]).find((c: Currency) => c.id === form.watch(\"fromCurrency\"));\n  const toCurrency = (currencies as Currency[]).find((c: Currency) => c.id === toCurrencyValue);\n\n  const onSubmit = (data: ExchangeFormData) => {\n    // Helper function to mask card number for security\n    const maskCardNumber = (cardNumber: string) => {\n      if (cardNumber.length < 4) return '****';\n      return '****' + cardNumber.slice(-4);\n    };\n\n    // Store minimal data in sessionStorage for security - DO NOT store sensitive card details\n    const orderData = {\n      fromCurrency: data.fromCurrency,\n      toCurrency: data.toCurrency,\n      fromAmount: data.fromAmount,\n      rateType: data.rateType,\n      exchangeRate: exchangeRate, // Include real exchange rate\n      receiveAmount: receiveAmount, // Include calculated receive amount\n      recipientAddress: data.recipientAddress,\n      cardNumberMasked: data.cardNumber ? maskCardNumber(data.cardNumber) : undefined, // Only store masked version\n      contactEmail: data.contactEmail,\n      // Store encrypted/hashed sensitive data for server verification only\n      cardDataHash: data.cardNumber ? btoa(data.cardNumber + '|' + data.bankName + '|' + data.holderName) : undefined,\n    };\n    \n    // Store sensitive card data temporarily in a more secure way (will be cleared on page load)\n    if (data.cardNumber && data.bankName && data.holderName) {\n      // This will be used only for the API call and immediately cleared\n      sessionStorage.setItem('tempCardData', JSON.stringify({\n        cardNumber: data.cardNumber,\n        bankName: data.bankName,\n        holderName: data.holderName,\n      }));\n    }\n    \n    sessionStorage.setItem('orderConfirmationData', JSON.stringify(orderData));\n    \n    // Redirect to confirmation page\n    window.location.href = '/order-confirmation';\n  };\n\n  // Show skeleton while essential data is loading\n  if (currenciesLoading || ratesLoading) {\n    return <ExchangeWidgetSkeleton />;\n  }\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto bg-white dark:bg-slate-800 rounded-2xl shadow-lg border border-slate-200 dark:border-slate-700 p-6 sm:p-8\">\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 space-y-4 sm:space-y-0\">\n        <h2 className=\"text-xl sm:text-2xl font-bold text-slate-900 dark:text-white text-center sm:text-left\">{t('exchange.title')}</h2>\n        <div className=\"flex space-x-2 justify-center sm:justify-end\">\n          <Button\n            type=\"button\"\n            variant={rateType === \"fixed\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setRateType(\"fixed\")}\n            className=\"px-4 py-2 rounded-lg text-sm font-medium transition-all\"\n            data-testid=\"button-fixed-rate\"\n          >\n            {t('exchange.fixedRate')}\n          </Button>\n          <Button\n            type=\"button\"\n            variant={rateType === \"float\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setRateType(\"float\")}\n            className=\"px-4 py-2 rounded-lg text-sm font-medium transition-all\"\n            data-testid=\"button-float-rate\"\n          >\n            {t('exchange.floatRate')}\n          </Button>\n        </div>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 sm:space-y-6\">\n          {/* Send Currency */}\n          <div className=\"space-y-3\">\n            <FormLabel className=\"text-slate-700 dark:text-slate-300 text-sm font-medium\">\n              {t('exchange.youSend')}\n            </FormLabel>\n            <div className=\"flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3\">\n              <FormField\n                control={form.control}\n                name=\"fromAmount\"\n                render={({ field }) => (\n                  <FormItem className=\"flex-1\">\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0.00\"\n                        className=\"bg-slate-50 dark:bg-slate-700 border border-slate-200 dark:border-slate-600 rounded-lg text-slate-900 dark:text-white placeholder-slate-400 focus:ring-primary/30 h-12 sm:h-10 text-base sm:text-sm\"\n                        {...field}\n                        data-testid=\"input-from-amount\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"fromCurrency\"\n                render={({ field }) => (\n                  <FormItem className=\"sm:min-w-[140px]\">\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"w-full sm:min-w-[140px] bg-slate-50 dark:bg-slate-700 border border-slate-200 dark:border-slate-600 text-slate-900 dark:text-white h-12 sm:h-10\" data-testid=\"select-from-currency\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {(currencies as Currency[]).filter((c: Currency) => c.type === 'crypto').map((currency: Currency) => (\n                          <SelectItem key={currency.id} value={currency.id} data-testid={`option-from-${currency.id}`}>\n                            {currency.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            {fromCurrency && (\n              <div className=\"text-xs text-slate-500 dark:text-slate-400 px-1\">\n                {t('exchange.min')}: {fromCurrency.minAmount} {fromCurrency.symbol} ‚Ä¢ {t('exchange.max')}: {fromCurrency.maxAmount} {fromCurrency.symbol}\n              </div>\n            )}\n          </div>\n\n          {/* Swap Button */}\n          <div className=\"flex justify-center my-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={swapCurrencies}\n              className=\"p-3 rounded-full hover:bg-slate-50 dark:hover:bg-slate-700 transition-all min-h-[48px] min-w-[48px]\"\n              data-testid=\"button-swap-currencies\"\n            >\n              <ArrowUpDown className=\"w-5 h-5 text-slate-600 dark:text-slate-400\" />\n            </Button>\n          </div>\n\n          {/* Receive Currency */}\n          <div className=\"space-y-3\">\n            <FormLabel className=\"text-slate-700 dark:text-slate-300 text-sm font-medium\">\n              {t('exchange.youReceive')}\n            </FormLabel>\n            <div className=\"flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3\">\n              <div className=\"flex-1\">\n                <Input\n                  type=\"number\"\n                  placeholder=\"0.00\"\n                  value={receiveAmount}\n                  readOnly\n                  className=\"bg-slate-50 dark:bg-slate-700 border border-slate-200 dark:border-slate-600 rounded-lg text-slate-900 dark:text-white placeholder-slate-400 h-12 sm:h-10 text-base sm:text-sm\"\n                  data-testid=\"input-receive-amount\"\n                />\n              </div>\n              <FormField\n                control={form.control}\n                name=\"toCurrency\"\n                render={({ field }) => (\n                  <FormItem className=\"sm:min-w-[140px]\">\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"w-full sm:min-w-[140px] bg-slate-50 dark:bg-slate-700 border border-slate-200 dark:border-slate-600 text-slate-900 dark:text-white h-12 sm:h-10\" data-testid=\"select-to-currency\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {(currencies as Currency[]).map((currency: Currency) => (\n                          <SelectItem key={currency.id} value={currency.id} data-testid={`option-to-${currency.id}`}>\n                            {currency.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Exchange Rate Info */}\n          <div className=\"bg-slate-50 dark:bg-slate-700/50 rounded-lg p-4 space-y-3 border border-slate-200 dark:border-slate-600\">\n            <div className=\"flex flex-col sm:flex-row sm:justify-between space-y-1 sm:space-y-0\">\n              <span className=\"text-sm text-slate-600 dark:text-slate-400\">{t('exchange.exchangeRate')}:</span>\n              <span className=\"text-sm text-slate-900 dark:text-white font-medium\" data-testid=\"text-exchange-rate\">\n                1 {fromCurrency?.symbol} = {exchangeRate.toFixed(2)} {toCurrency?.symbol}\n              </span>\n            </div>\n            <div className=\"flex flex-col sm:flex-row sm:justify-between space-y-1 sm:space-y-0\">\n              <span className=\"text-sm text-slate-600 dark:text-slate-400\">{t('exchange.platformFee')}:</span>\n              <span className=\"text-sm text-slate-900 dark:text-white\">0.5%</span>\n            </div>\n            <div className=\"flex flex-col sm:flex-row sm:justify-between space-y-1 sm:space-y-0\">\n              <span className=\"text-sm text-slate-600 dark:text-slate-400\">{t('exchange.networkFee')}:</span>\n              <span className=\"text-sm text-slate-900 dark:text-white\">~{form.watch(\"fromCurrency\").includes(\"usdt\") ? \"2 USDT\" : \"0.0001 BTC\"}</span>\n            </div>\n            {rateType === \"fixed\" && (\n              <div className=\"flex flex-col sm:flex-row sm:justify-between space-y-1 sm:space-y-0\">\n                <span className=\"text-sm text-slate-600 dark:text-slate-400\">{t('exchange.rateLocked')}:</span>\n                <span className=\"text-sm text-slate-900 dark:text-white font-medium\" data-testid=\"text-rate-lock-time\">{formatTime(timeRemaining)}</span>\n              </div>\n            )}\n          </div>\n\n          {/* Card Details */}\n          {/* Crypto Payout - Wallet Address */}\n          {isCryptoPayout && (\n            <div className=\"space-y-4 bg-slate-50 dark:bg-slate-700/50 rounded-lg p-4 border border-slate-200 dark:border-slate-600\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full\" />\n                <h3 className=\"text-slate-900 dark:text-white font-medium text-sm sm:text-base\">{t('exchange.cryptoPayout')}</h3>\n              </div>\n              <FormField\n                control={form.control}\n                name=\"recipientAddress\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <Input\n                        placeholder={t('exchange.walletAddressPlaceholder')}\n                        className=\"bg-white dark:bg-slate-600 border border-slate-200 dark:border-slate-500 text-slate-900 dark:text-white placeholder-slate-400 h-12 sm:h-10 text-base sm:text-sm\"\n                        {...field}\n                        data-testid=\"input-wallet-address\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          )}\n          \n          {/* Card Payout - Card Details */}\n          {isCardPayout && (\n            <div className=\"space-y-4 bg-slate-50 dark:bg-slate-700/50 rounded-lg p-4 border border-slate-200 dark:border-slate-600\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <div className=\"w-2 h-2 bg-blue-400 rounded-full\" />\n                <h3 className=\"text-slate-900 dark:text-white font-medium text-sm sm:text-base\">{t('exchange.cardPayout')}</h3>\n              </div>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"cardNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <Input\n                          placeholder={t('exchange.cardNumber')}\n                          className=\"bg-white dark:bg-slate-600 border border-slate-200 dark:border-slate-500 text-slate-900 dark:text-white placeholder-slate-400 h-12 sm:h-10 text-base sm:text-sm\"\n                          {...field}\n                          data-testid=\"input-card-number\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"bankName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <Input\n                          placeholder={t('exchange.bankName')}\n                          className=\"bg-white dark:bg-slate-600 border border-slate-200 dark:border-slate-500 text-slate-900 dark:text-white placeholder-slate-400 h-12 sm:h-10 text-base sm:text-sm\"\n                          {...field}\n                          data-testid=\"input-bank-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"holderName\"\n                  render={({ field }) => (\n                    <FormItem className=\"sm:col-span-2\">\n                      <FormControl>\n                        <Input\n                          placeholder={t('exchange.holderName')}\n                          className=\"bg-white dark:bg-slate-600 border border-slate-200 dark:border-slate-500 text-slate-900 dark:text-white placeholder-slate-400 h-12 sm:h-10 text-base sm:text-sm\"\n                          {...field}\n                          data-testid=\"input-holder-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Contact Email */}\n          <FormField\n            control={form.control}\n            name=\"contactEmail\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <Input\n                    type=\"email\"\n                    placeholder={t('exchange.email')}\n                    className=\"bg-slate-50 dark:bg-slate-700 border border-slate-200 dark:border-slate-600 text-slate-900 dark:text-white placeholder-slate-400 h-12 sm:h-10 text-base sm:text-sm\"\n                    {...field}\n                    data-testid=\"input-email\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/* Terms */}\n          <FormField\n            control={form.control}\n            name=\"termsAccepted\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 p-1\">\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    className=\"mt-1 min-w-[20px] min-h-[20px]\"\n                    data-testid=\"checkbox-terms\"\n                  />\n                </FormControl>\n                <div className=\"space-y-1 leading-none\">\n                  <FormLabel className=\"text-sm sm:text-base text-white/80 leading-relaxed cursor-pointer\">\n                    {t('exchange.terms')}\n                  </FormLabel>\n                  <FormMessage />\n                </div>\n              </FormItem>\n            )}\n          />\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-gradient-to-r from-purple-600 via-blue-600 to-purple-600 text-white font-bold py-4 sm:py-4 rounded-lg btn-modern animate-glow hover:from-purple-700 hover:via-blue-700 hover:to-purple-700 transition-all transform hover:scale-[1.02] active:scale-[0.98] disabled:opacity-50 text-base sm:text-sm min-h-[48px] shadow-lg border border-white/20\"\n            disabled={false}\n            data-testid=\"button-create-order\"\n          >\n            {false ? (\n              <RefreshCw className=\"w-4 h-4 animate-spin mr-2\" />\n            ) : null}\n            {t('exchange.createOrder')}\n          </Button>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":25973},"client/src/components/features-section.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Shield, Zap, UserCheck, HeadphonesIcon } from \"lucide-react\";\n\nexport function FeaturesSection() {\n  const { t } = useTranslation();\n\n  const features = [\n    {\n      icon: Shield,\n      title: t('features.secure.title'),\n      description: t('features.secure.description'),\n    },\n    {\n      icon: Zap,\n      title: t('features.fast.title'),\n      description: t('features.fast.description'),\n    },\n    {\n      icon: UserCheck,\n      title: t('features.noRegistration.title'),\n      description: t('features.noRegistration.description'),\n    },\n    {\n      icon: HeadphonesIcon,\n      title: t('features.support.title'),\n      description: t('features.support.description'),\n    },\n  ];\n\n  return (\n    <section className=\"py-20 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">{t('features.title')}</h2>\n          <p className=\"text-muted-foreground text-lg max-w-2xl mx-auto\">\n            {t('features.subtitle')}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <div key={index} className=\"text-center space-y-4\" data-testid={`feature-${index}`}>\n                <div className=\"w-16 h-16 bg-primary/10 rounded-2xl flex items-center justify-center mx-auto\">\n                  <Icon className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\" data-testid={`feature-title-${index}`}>{feature.title}</h3>\n                <p className=\"text-muted-foreground\" data-testid={`feature-description-${index}`}>{feature.description}</p>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1943},"client/src/components/footer.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Link } from \"wouter\";\n\nexport function Footer() {\n  const { t } = useTranslation();\n\n  return (\n    <footer className=\"bg-muted/30 py-16\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"space-y-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-footer-home\">\n              <div className=\"h-8 w-8 rounded-lg bg-gradient-to-br from-primary to-purple-600 flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">CF</span>\n              </div>\n              <span className=\"text-xl font-bold\">{t('header.title')}</span>\n            </Link>\n            <p className=\"text-muted-foreground text-sm\" data-testid=\"text-footer-description\">\n              {t('footer.description')}\n            </p>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\">{t('footer.services')}</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-crypto-exchange\">\n                  {t('footer.links.cryptoExchange')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-card-payouts\">\n                  {t('footer.links.cardPayouts')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-fixed-rate\">\n                  {t('footer.links.fixedRate')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-float-rate\">\n                  {t('footer.links.floatRate')}\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\">{t('footer.support')}</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-help-center\">\n                  {t('footer.links.helpCenter')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-contact-us\">\n                  {t('footer.links.contactUs')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/order-status\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-track-order-footer\">\n                  {t('footer.links.trackOrder')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-api-docs\">\n                  {t('footer.links.apiDocs')}\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\">{t('footer.legal')}</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-terms\">\n                  {t('footer.links.terms')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-privacy\">\n                  {t('footer.links.privacy')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-aml\">\n                  {t('footer.links.aml')}\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-kyc\">\n                  {t('footer.links.kyc')}\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-copyright\">\n            {t('footer.copyright')}\n          </p>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-twitter\">\n              <span className=\"sr-only\">Twitter</span>\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/>\n              </svg>\n            </a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-telegram\">\n              <span className=\"sr-only\">Telegram</span>\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z\"/>\n              </svg>\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6379},"client/src/components/header.tsx":{"content":"import { Link } from \"wouter\";\nimport { useTranslation } from \"react-i18next\";\nimport { useState } from \"react\";\nimport { LanguageSelector } from \"./language-selector\";\nimport { ThemeToggle } from \"./theme-toggle\";\nimport { AuthProviders } from \"./auth-providers\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Sheet, SheetContent, SheetTrigger, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { User, LogIn, Settings, LogOut, Menu, X } from \"lucide-react\";\n\nexport function Header() {\n  const { t } = useTranslation();\n  const { user, isAuthenticated, isLoading, isAdmin } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-slate-200 dark:border-slate-700 bg-white/95 dark:bg-slate-900/95 backdrop-blur-sm\">\n      <div className=\"container mx-auto flex h-16 items-center justify-between px-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n            <div className=\"h-8 w-8 rounded-lg bg-gradient-to-br from-primary to-purple-600 flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">CF</span>\n            </div>\n            <span className=\"text-xl font-bold text-slate-900 dark:text-white\">\n              {t('header.title')}\n            </span>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex space-x-6\">\n            <Link href=\"/\" className=\"text-slate-900 dark:text-white hover:text-primary transition-colors font-medium\" data-testid=\"link-exchange\">\n              {t('header.nav.exchange')}\n            </Link>\n            <Link href=\"/rates\" className=\"text-slate-600 dark:text-slate-300 hover:text-primary transition-colors font-medium\" data-testid=\"link-rates\">\n              {t('header.nav.rates')}\n            </Link>\n            <Link href=\"/about\" className=\"text-slate-600 dark:text-slate-300 hover:text-primary transition-colors font-medium\" data-testid=\"link-about\">\n              {t('header.nav.about')}\n            </Link>\n            <Link href=\"/support\" className=\"text-slate-600 dark:text-slate-300 hover:text-primary transition-colors font-medium\" data-testid=\"link-support\">\n              {t('header.nav.support')}\n            </Link>\n          </nav>\n        </div>\n        \n        <div className=\"flex items-center space-x-2 md:space-x-4\">\n          {/* Mobile Menu Button */}\n          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n            <SheetTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"md:hidden p-2\"\n                data-testid=\"button-mobile-menu\"\n              >\n                <Menu className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Toggle Menu</span>\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\" className=\"w-[280px] sm:w-[350px]\">\n              <SheetHeader>\n                <SheetTitle className=\"text-left flex items-center space-x-2\">\n                  <div className=\"h-6 w-6 rounded-lg bg-gradient-to-br from-primary to-purple-600 flex items-center justify-center\">\n                    <span className=\"text-white font-bold text-xs\">CF</span>\n                  </div>\n                  <span className=\"text-lg font-bold text-slate-900 dark:text-white\">\n                    {t('header.title')}\n                  </span>\n                </SheetTitle>\n              </SheetHeader>\n              \n              {/* Mobile Navigation */}\n              <nav className=\"flex flex-col space-y-4 mt-8\">\n                <Link \n                  href=\"/\" \n                  className=\"text-foreground hover:text-primary transition-colors py-3 px-2 rounded-lg hover:bg-accent text-lg\"\n                  data-testid=\"mobile-link-exchange\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  {t('header.nav.exchange')}\n                </Link>\n                <Link \n                  href=\"/rates\" \n                  className=\"text-muted-foreground hover:text-primary transition-colors py-3 px-2 rounded-lg hover:bg-accent text-lg\"\n                  data-testid=\"mobile-link-rates\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  {t('header.nav.rates')}\n                </Link>\n                <Link \n                  href=\"/about\" \n                  className=\"text-muted-foreground hover:text-primary transition-colors py-3 px-2 rounded-lg hover:bg-accent text-lg\"\n                  data-testid=\"mobile-link-about\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  {t('header.nav.about')}\n                </Link>\n                <Link \n                  href=\"/support\" \n                  className=\"text-muted-foreground hover:text-primary transition-colors py-3 px-2 rounded-lg hover:bg-accent text-lg\"\n                  data-testid=\"mobile-link-support\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  {t('header.nav.support')}\n                </Link>\n                \n                {/* Mobile Actions */}\n                <div className=\"border-t pt-4 mt-6 space-y-4\">\n                  <Link href=\"/order-status\" data-testid=\"mobile-link-track-order\" onClick={() => setIsMobileMenuOpen(false)}>\n                    <Button variant=\"outline\" size=\"lg\" className=\"w-full text-base\">\n                      {t('header.trackOrder')}\n                    </Button>\n                  </Link>\n                  \n                  {/* Mobile Auth Section */}\n                  {isLoading ? (\n                    <div className=\"w-full h-12 rounded-lg bg-gray-200 animate-pulse\"></div>\n                  ) : isAuthenticated && user ? (\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-3 p-3 rounded-lg bg-accent\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarImage src={user.profileImageUrl || ''} alt={user.firstName || 'User'} />\n                          <AvatarFallback>\n                            <User className=\"h-5 w-5\" />\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-sm\">\n                            {user.firstName && user.lastName \n                              ? `${user.firstName} ${user.lastName}`\n                              : user.email || 'User'\n                            }\n                          </p>\n                          {user.email && (\n                            <p className=\"text-xs text-muted-foreground truncate\">\n                              {user.email}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <Link href=\"/dashboard\" onClick={() => setIsMobileMenuOpen(false)}>\n                        <Button variant=\"ghost\" size=\"lg\" className=\"w-full justify-start text-base\">\n                          <User className=\"mr-3 h-5 w-5\" />\n                          Dashboard\n                        </Button>\n                      </Link>\n                      \n                      {isAdmin() && (\n                        <Link href=\"/admin\" onClick={() => setIsMobileMenuOpen(false)}>\n                          <Button variant=\"ghost\" size=\"lg\" className=\"w-full justify-start text-base\">\n                            <Settings className=\"mr-3 h-5 w-5\" />\n                            Admin Panel\n                          </Button>\n                        </Link>\n                      )}\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"lg\"\n                        className=\"w-full justify-start text-base text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        onClick={() => {\n                          setIsMobileMenuOpen(false);\n                          window.location.href = '/api/logout';\n                        }}\n                        data-testid=\"mobile-button-logout\"\n                      >\n                        <LogOut className=\"mr-3 h-5 w-5\" />\n                        Logout\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      <AuthProviders \n                        buttonSize=\"lg\" \n                        layout=\"vertical\"\n                        title=\"Sign in to your account\"\n                        showTitle={false}\n                        showLocalAuth={true}\n                        className=\"w-full\"\n                        onSuccess={() => setIsMobileMenuOpen(false)}\n                      />\n                    </div>\n                  )}\n                  \n                  {/* Mobile Settings */}\n                  <div className=\"border-t pt-4 space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium\">Theme</span>\n                      <ThemeToggle />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium\">Language</span>\n                      <LanguageSelector />\n                    </div>\n                  </div>\n                </div>\n              </nav>\n            </SheetContent>\n          </Sheet>\n          \n          {/* Desktop Actions */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <LanguageSelector />\n            <ThemeToggle />\n            <Link href=\"/order-status\" data-testid=\"link-track-order\">\n              <Button variant=\"outline\" size=\"sm\">\n                {t('header.trackOrder')}\n              </Button>\n            </Link>\n            \n            {/* Desktop Authentication Section */}\n            {isLoading ? (\n              <div className=\"w-8 h-8 rounded-full bg-gray-200 animate-pulse\"></div>\n            ) : isAuthenticated && user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-user-menu\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user.profileImageUrl || ''} alt={user.firstName || 'User'} />\n                      <AvatarFallback>\n                        <User className=\"h-4 w-4\" />\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"font-medium text-sm\">\n                        {user.firstName && user.lastName \n                          ? `${user.firstName} ${user.lastName}`\n                          : user.email || 'User'\n                        }\n                      </p>\n                      {user.email && (\n                        <p className=\"w-[200px] truncate text-xs text-muted-foreground\">\n                          {user.email}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <Link href=\"/dashboard\">\n                    <DropdownMenuItem data-testid=\"link-dashboard\">\n                      <User className=\"mr-2 h-4 w-4\" />\n                      <span>Dashboard</span>\n                    </DropdownMenuItem>\n                  </Link>\n                  {isAdmin() && (\n                    <Link href=\"/admin\">\n                      <DropdownMenuItem data-testid=\"link-admin\">\n                        <Settings className=\"mr-2 h-4 w-4\" />\n                        <span>Admin Panel</span>\n                      </DropdownMenuItem>\n                    </Link>\n                  )}\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    onClick={() => window.location.href = '/api/logout'}\n                    data-testid=\"button-logout-header\"\n                  >\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Logout</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button \n                    size=\"sm\"\n                    data-testid=\"button-login-header\"\n                  >\n                    <LogIn className=\"w-4 h-4 mr-2\" />\n                    Sign In\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-80 p-4\" align=\"end\">\n                  <AuthProviders \n                    buttonSize=\"sm\" \n                    layout=\"vertical\"\n                    title=\"Choose your sign-in method\"\n                    showTitle={false}\n                    showLocalAuth={true}\n                  />\n                </PopoverContent>\n              </Popover>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":13985},"client/src/components/language-selector.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nconst languages = [\n  { code: 'en', name: 'English', flag: 'üá¨üáß' },\n  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },\n  { code: 'ro', name: 'Rom√¢nƒÉ', flag: 'üá≤üá©' },\n];\n\nexport function LanguageSelector() {\n  const { i18n } = useTranslation();\n\n  const handleLanguageChange = (langCode: string) => {\n    i18n.changeLanguage(langCode);\n    localStorage.setItem('language', langCode);\n  };\n\n  const currentLanguage = languages.find(lang => lang.code === i18n.language) || languages[0];\n\n  return (\n    <Select value={i18n.language} onValueChange={handleLanguageChange}>\n      <SelectTrigger className=\"w-32 bg-card border border-border text-sm\" data-testid=\"select-language\">\n        <SelectValue>\n          <span className=\"flex items-center space-x-2\">\n            <span>{currentLanguage.flag}</span>\n            <span>{currentLanguage.name}</span>\n          </span>\n        </SelectValue>\n      </SelectTrigger>\n      <SelectContent>\n        {languages.map((language) => (\n          <SelectItem key={language.code} value={language.code} data-testid={`option-language-${language.code}`}>\n            <span className=\"flex items-center space-x-2\">\n              <span>{language.flag}</span>\n              <span>{language.name}</span>\n            </span>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n","size_bytes":1507},"client/src/components/support-chat.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MessageCircle, X, Send } from \"lucide-react\";\n\ninterface Message {\n  id: string;\n  text: string;\n  sender: 'user' | 'support';\n  timestamp: Date;\n}\n\nexport function SupportChat() {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      text: t('chat.defaultMessage'),\n      sender: 'support',\n      timestamp: new Date(),\n    },\n  ]);\n\n  const sendMessage = () => {\n    if (!message.trim()) return;\n\n    const newMessage: Message = {\n      id: Date.now().toString(),\n      text: message,\n      sender: 'user',\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, newMessage]);\n    setMessage(\"\");\n\n    // Simulate support response\n    setTimeout(() => {\n      const supportResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        text: \"Thank you for your message. A support agent will respond shortly.\",\n        sender: 'support',\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, supportResponse]);\n    }, 1000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <Button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"bg-primary text-primary-foreground w-14 h-14 rounded-full shadow-lg hover:shadow-xl transition-all flex items-center justify-center\"\n        data-testid=\"button-chat-toggle\"\n      >\n        {isOpen ? <X className=\"w-6 h-6\" /> : <MessageCircle className=\"w-6 h-6\" />}\n      </Button>\n\n      {isOpen && (\n        <Card className=\"absolute bottom-16 right-0 w-80 shadow-2xl border\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg\">{t('chat.title')}</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">{t('chat.subtitle')}</p>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"h-64 overflow-y-auto p-4 space-y-3\" data-testid=\"chat-messages\">\n              {messages.map((msg) => (\n                <div\n                  key={msg.id}\n                  className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div\n                    className={`max-w-xs p-3 rounded-lg text-sm ${\n                      msg.sender === 'user'\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-muted text-muted-foreground'\n                    }`}\n                    data-testid={`chat-message-${msg.id}`}\n                  >\n                    {msg.sender === 'support' && (\n                      <div className=\"font-medium mb-1\">Support:</div>\n                    )}\n                    {msg.text}\n                  </div>\n                </div>\n              ))}\n            </div>\n            <div className=\"p-4 border-t\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder={t('chat.placeholder')}\n                  className=\"flex-1 text-sm\"\n                  data-testid=\"input-chat-message\"\n                />\n                <Button\n                  onClick={sendMessage}\n                  size=\"sm\"\n                  className=\"px-4 font-medium\"\n                  disabled={!message.trim()}\n                  data-testid=\"button-send-message\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":4114},"client/src/components/theme-toggle.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/hooks/use-theme\";\nimport { Sun, Moon } from \"lucide-react\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={toggleTheme}\n      className=\"p-2 rounded-md hover:bg-accent transition-colors\"\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'light' ? (\n        <Moon className=\"w-5 h-5\" />\n      ) : (\n        <Sun className=\"w-5 h-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":562},"client/src/contexts/theme-context.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n      document.documentElement.classList.toggle('dark', savedTheme === 'dark');\n    } else {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const initialTheme = prefersDark ? 'dark' : 'light';\n      setTheme(initialTheme);\n      document.documentElement.classList.toggle('dark', initialTheme === 'dark');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1437},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-theme.ts":{"content":"import { useTheme as useThemeContext } from '@/contexts/theme-context';\n\nexport const useTheme = () => {\n  return useThemeContext();\n};\n","size_bytes":136},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport function useWebSocket(url?: string) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 3; // Reduced from 5 to avoid excessive reconnection attempts\n  const reconnectDelay = 5000; // Increased from 3 seconds to 5 seconds\n  const isReconnecting = useRef(false);\n\n  const connect = useCallback(() => {\n    if (ws.current?.readyState === WebSocket.OPEN || isReconnecting.current) {\n      return; // Already connected or reconnection in progress\n    }\n    \n    isReconnecting.current = true;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = url || `${protocol}//${window.location.host}/ws`;\n\n    try {\n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        setIsConnected(true);\n        reconnectAttempts.current = 0;\n        isReconnecting.current = false;\n        console.log('WebSocket connected successfully');\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          setLastMessage(message);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.current.onclose = (event) => {\n        setIsConnected(false);\n        isReconnecting.current = false;\n        \n        // Only log and attempt reconnect if it wasn't a manual close\n        if (!event.wasClean && reconnectAttempts.current < maxReconnectAttempts) {\n          const backoffDelay = reconnectDelay * Math.pow(2, reconnectAttempts.current); // Exponential backoff\n          console.log(`WebSocket disconnected unexpectedly. Reconnecting in ${backoffDelay}ms... (attempt ${reconnectAttempts.current + 1}/${maxReconnectAttempts})`);\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, backoffDelay);\n        } else if (event.wasClean) {\n          console.log('WebSocket disconnected cleanly');\n        } else {\n          console.log('WebSocket max reconnection attempts reached - will not attempt further reconnections');\n        }\n      };\n\n      ws.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n        isReconnecting.current = false;\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket:', error);\n      setIsConnected(false);\n      isReconnecting.current = false;\n    }\n  }, [url]);\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (ws.current) {\n        ws.current.close(1000, 'Component unmounting');\n        ws.current = null;\n      }\n    };\n  }, [connect]);\n\n  const sendMessage = useCallback((message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected. Message not sent:', message);\n    }\n  }, []);\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage,\n  };\n}\n","size_bytes":3491},"client/src/lib/i18n.ts":{"content":"import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport enTranslations from '@/locales/en.json';\nimport ruTranslations from '@/locales/ru.json';\nimport roTranslations from '@/locales/ro.json';\n\nconst resources = {\n  en: { translation: enTranslations },\n  ru: { translation: ruTranslations },\n  ro: { translation: roTranslations },\n};\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources,\n    lng: 'en', // default language\n    fallbackLng: 'en',\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","size_bytes":559},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes - much better than Infinity for performance\n      gcTime: 10 * 60 * 1000, // 10 minutes cache time\n      retry: (failureCount, error: any) => {\n        // Don't retry on 4xx errors (client errors), but retry on network issues\n        if (error?.message?.includes('4')) return false;\n        return failureCount < 2; // Retry up to 2 times for network issues\n      },\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000), // Exponential backoff\n    },\n    mutations: {\n      retry: (failureCount, error: any) => {\n        // Don't retry mutations on client errors\n        if (error?.message?.includes('4')) return false;\n        return failureCount < 1; // Retry once for network issues\n      },\n    },\n  },\n});\n","size_bytes":2057},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"export interface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport class WebSocketClient {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private reconnectInterval: number = 5000;\n  private maxReconnectAttempts: number = 10;\n  private reconnectAttempts: number = 0;\n  private messageHandlers: Map<string, (data: any) => void> = new Map();\n  private connectionHandlers: ((connected: boolean) => void)[] = [];\n\n  constructor(url?: string) {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    this.url = url || `${protocol}//${window.location.host}/ws`;\n  }\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.ws = new WebSocket(this.url);\n\n        this.ws.onopen = () => {\n          console.log('WebSocket connected');\n          this.reconnectAttempts = 0;\n          this.notifyConnectionHandlers(true);\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const message: WebSocketMessage = JSON.parse(event.data);\n            const handler = this.messageHandlers.get(message.type);\n            if (handler) {\n              handler(message.data);\n            }\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n\n        this.ws.onclose = () => {\n          console.log('WebSocket disconnected');\n          this.notifyConnectionHandlers(false);\n          this.handleReconnect();\n        };\n\n        this.ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          reject(error);\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      \n      setTimeout(() => {\n        this.connect().catch(() => {\n          // Reconnection failed, will try again if under max attempts\n        });\n      }, this.reconnectInterval);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n\n  send(message: WebSocketMessage) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n\n  onMessage(type: string, handler: (data: any) => void) {\n    this.messageHandlers.set(type, handler);\n  }\n\n  onConnection(handler: (connected: boolean) => void) {\n    this.connectionHandlers.push(handler);\n  }\n\n  private notifyConnectionHandlers(connected: boolean) {\n    this.connectionHandlers.forEach(handler => handler(connected));\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.messageHandlers.clear();\n    this.connectionHandlers.length = 0;\n  }\n\n  get isConnected(): boolean {\n    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;\n  }\n}\n\n// Singleton instance for app-wide use\nlet wsClient: WebSocketClient | null = null;\n\nexport function getWebSocketClient(): WebSocketClient {\n  if (!wsClient) {\n    wsClient = new WebSocketClient();\n  }\n  return wsClient;\n}\n\nexport function initializeWebSocket(): Promise<void> {\n  const client = getWebSocketClient();\n  return client.connect();\n}\n","size_bytes":3382},"client/src/pages/home.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Header } from \"@/components/header\";\nimport { ExchangeWidget } from \"@/components/exchange-widget\";\nimport { FeaturesSection } from \"@/components/features-section\";\nimport { CurrencyGrid } from \"@/components/currency-grid\";\nimport { SupportChat } from \"@/components/support-chat\";\nimport { Footer } from \"@/components/footer\";\n\nexport default function Home() {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans antialiased transition-colors duration-300\">\n      <Header />\n      \n      {/* Hero Section */}\n      <main className=\"min-h-screen gradient-bg\">\n        <div className=\"container mx-auto px-4 py-12\">\n          {/* Hero Content */}\n          <div className=\"text-center mb-12 text-white\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6 animate-fade-in\" data-testid=\"text-hero-title\">\n              {t('hero.title')}\n            </h1>\n            <p className=\"text-xl md:text-2xl mb-8 text-white/80 animate-slide-up\" data-testid=\"text-hero-subtitle\">\n              {t('hero.subtitle')}\n            </p>\n            <div className=\"flex flex-wrap justify-center gap-6 text-sm\">\n              <div className=\"flex items-center space-x-2\" data-testid=\"feature-support\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span>{t('hero.features.support')}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\" data-testid=\"feature-no-registration\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span>{t('hero.features.noRegistration')}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\" data-testid=\"feature-best-rates\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span>{t('hero.features.bestRates')}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Exchange Widget */}\n          <div id=\"exchange\">\n            <ExchangeWidget />\n          </div>\n        </div>\n      </main>\n\n      {/* Features Section */}\n      <FeaturesSection />\n\n      {/* Supported Currencies */}\n      <CurrencyGrid />\n\n      {/* Support Chat */}\n      <SupportChat />\n\n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2423},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/order-status.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport { SupportChat } from \"@/components/support-chat\";\nimport { Copy, ExternalLink } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport type { Order } from \"@shared/schema\";\n\n// Type guard for card details\ninterface CardDetails {\n  number: string;\n  bankName: string;\n  holderName: string;\n}\n\nconst isCardDetails = (obj: unknown): obj is CardDetails => {\n  return typeof obj === 'object' && obj !== null && \n    'number' in obj && 'bankName' in obj && 'holderName' in obj;\n};\n\nconst statusColors = {\n  'awaiting_deposit': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n  'confirmed': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n  'processing': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n  'completed': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n  'failed': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',\n  'refunded': 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200',\n};\n\nconst getStepStatus = (currentStatus: string, stepIndex: number) => {\n  const statusOrder = ['awaiting_deposit', 'confirmed', 'processing', 'completed'];\n  const currentIndex = statusOrder.indexOf(currentStatus);\n  \n  if (stepIndex <= currentIndex) return 'completed';\n  if (stepIndex === currentIndex + 1) return 'current';\n  return 'pending';\n};\n\nexport default function OrderStatus() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [orderId, setOrderId] = useState(\"\");\n  const [searchedOrderId, setSearchedOrderId] = useState(\"\");\n\n  // WebSocket for real-time order updates\n  const { lastMessage } = useWebSocket(\"/ws\");\n\n  useEffect(() => {\n    // Get order ID from URL params\n    const urlParams = new URLSearchParams(window.location.search);\n    const orderIdFromUrl = urlParams.get('id');\n    if (orderIdFromUrl) {\n      setOrderId(orderIdFromUrl);\n      setSearchedOrderId(orderIdFromUrl);\n    }\n  }, []);\n\n  const { data: order, isLoading, error, refetch } = useQuery<Order>({\n    queryKey: ['/api/orders', searchedOrderId],\n    enabled: !!searchedOrderId,\n  });\n\n  // Handle WebSocket messages for order updates\n  useEffect(() => {\n    if (lastMessage && lastMessage.type === 'order_update' && lastMessage.data.id === searchedOrderId) {\n      refetch();\n    }\n  }, [lastMessage, searchedOrderId, refetch]);\n\n  const handleSearch = () => {\n    if (!orderId.trim()) {\n      toast({\n        title: \"Error\",\n        description: t('errors.invalidOrderId'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setSearchedOrderId(orderId);\n  };\n\n  const copyToClipboard = async (text: string, label: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: `${label} copied to clipboard`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const calculateTimeRemaining = () => {\n    if (!order?.rateLockExpiry) return null;\n    \n    const now = new Date();\n    const expiry = new Date(order.rateLockExpiry);\n    const diff = expiry.getTime() - now.getTime();\n    \n    if (diff <= 0) return \"Expired\";\n    \n    const minutes = Math.floor(diff / 60000);\n    const seconds = Math.floor((diff % 60000) / 1000);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Extract card details safely\n  const validCardDetails = order?.cardDetails && isCardDetails(order.cardDetails) ? order.cardDetails as CardDetails : null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-6 sm:py-12 max-w-4xl\">\n        <div className=\"text-center mb-8 sm:mb-12\">\n          <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold mb-4 sm:mb-6\" data-testid=\"text-page-title\">\n            {t('orderTracking.title')}\n          </h1>\n          <p className=\"text-muted-foreground text-base sm:text-lg\" data-testid=\"text-page-subtitle\">\n            {t('orderTracking.subtitle')}\n          </p>\n        </div>\n\n        {/* Order Lookup */}\n        <Card className=\"mb-6 sm:mb-8\">\n          <CardContent className=\"p-4 sm:p-6 md:p-8\">\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4\">\n              <Input\n                type=\"text\"\n                placeholder={t('orderTracking.enterOrderId')}\n                value={orderId}\n                onChange={(e) => setOrderId(e.target.value)}\n                className=\"flex-1 h-11 sm:h-10\"\n                data-testid=\"input-order-id\"\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n              />\n              <Button\n                onClick={handleSearch}\n                className=\"h-11 sm:h-10 sm:w-auto\"\n                disabled={isLoading}\n                data-testid=\"button-track-order\"\n              >\n                {t('orderTracking.trackOrder')}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Loading State */}\n        {isLoading && (\n          <Card>\n            <CardContent className=\"p-8\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n                <p>Loading order details...</p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Error State */}\n        {error && (\n          <Card>\n            <CardContent className=\"p-8\">\n              <div className=\"text-center text-red-600\" data-testid=\"text-order-error\">\n                <p>{t('errors.orderNotFound')}</p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Order Details */}\n        {order && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between mb-4\">\n                <CardTitle className=\"text-2xl\">\n                  {t('orderTracking.orderDetails')} #<span data-testid=\"text-order-id\">{order.id}</span>\n                </CardTitle>\n                <Badge \n                  className={statusColors[order.status as keyof typeof statusColors]}\n                  data-testid=\"badge-order-status\"\n                >\n                  {t(`orderTracking.status.${order.status}`)}\n                </Badge>\n              </div>\n              \n              {/* Progress Steps */}\n              <div className=\"mb-8\">\n                {/* Mobile: Vertical layout */}\n                <div className=\"block sm:hidden space-y-4\">\n                  {[\n                    { key: 'created', status: 'awaiting_deposit' },\n                    { key: 'awaitingPayment', status: 'confirmed' },\n                    { key: 'processing', status: 'processing' },\n                    { key: 'completed', status: 'completed' },\n                  ].map((step, index) => {\n                    const stepStatus = getStepStatus(order.status, index);\n                    return (\n                      <div key={step.key} className=\"flex items-center\">\n                        <div \n                          className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium ${\n                            stepStatus === 'completed' ? 'bg-primary text-white' :\n                            stepStatus === 'current' ? 'bg-primary text-white animate-pulse' :\n                            'bg-muted text-muted-foreground'\n                          }`}\n                          data-testid={`step-mobile-${index}`}\n                        >\n                          {index + 1}\n                        </div>\n                        <div className=\"ml-4\">\n                          <div className=\"text-sm font-medium\">\n                            {t(`orderTracking.steps.${step.key}`)}\n                          </div>\n                          <div className={`text-xs ${\n                            stepStatus === 'completed' ? 'text-green-600 dark:text-green-400' :\n                            stepStatus === 'current' ? 'text-primary' :\n                            'text-muted-foreground'\n                          }`}>\n                            {stepStatus === 'completed' ? '‚úì Complete' :\n                             stepStatus === 'current' ? 'In Progress' : 'Pending'}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                {/* Desktop: Horizontal layout */}\n                <div className=\"hidden sm:flex items-center justify-between overflow-x-auto\">\n                  {[\n                    { key: 'created', status: 'awaiting_deposit' },\n                    { key: 'awaitingPayment', status: 'confirmed' },\n                    { key: 'processing', status: 'processing' },\n                    { key: 'completed', status: 'completed' },\n                  ].map((step, index) => {\n                    const stepStatus = getStepStatus(order.status, index);\n                    return (\n                      <div key={step.key} className=\"flex items-center min-w-0\">\n                        <div className=\"flex items-center\">\n                          <div \n                            className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                              stepStatus === 'completed' ? 'bg-primary text-white' :\n                              stepStatus === 'current' ? 'bg-primary text-white animate-pulse' :\n                              'bg-muted text-muted-foreground'\n                            }`}\n                            data-testid={`step-${index}`}\n                          >\n                            {index + 1}\n                          </div>\n                          <span className=\"ml-2 text-sm whitespace-nowrap\">\n                            {t(`orderTracking.steps.${step.key}`)}\n                          </span>\n                        </div>\n                        {index < 3 && (\n                          <div className=\"flex-1 h-0.5 bg-border mx-4 min-w-8\"></div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardHeader>\n\n            <CardContent>\n              {/* Order Details Grid */}\n              <div className=\"grid lg:grid-cols-2 gap-6 sm:gap-8\">\n                <div className=\"space-y-4 sm:space-y-6\">\n                  <h3 className=\"text-base sm:text-lg font-semibold\">{t('orderTracking.exchangeDetails')}</h3>\n                  <div className=\"space-y-3 sm:space-y-4\">\n                    <div className=\"flex justify-between\" data-testid=\"row-send-amount\">\n                      <span className=\"text-muted-foreground\">{t('exchange.youSend')}:</span>\n                      <span className=\"font-medium\">{order.fromAmount} {order.fromCurrency.toUpperCase()}</span>\n                    </div>\n                    <div className=\"flex justify-between\" data-testid=\"row-receive-amount\">\n                      <span className=\"text-muted-foreground\">{t('exchange.youReceive')}:</span>\n                      <span className=\"font-medium\">{order.toAmount} {order.toCurrency.replace('card-', '').toUpperCase()}</span>\n                    </div>\n                    <div className=\"flex justify-between\" data-testid=\"row-exchange-rate\">\n                      <span className=\"text-muted-foreground\">{t('exchange.exchangeRate')}:</span>\n                      <span className=\"font-medium\">1 {order.fromCurrency.toUpperCase()} = {order.exchangeRate} {order.toCurrency.replace('card-', '').toUpperCase()}</span>\n                    </div>\n                    <div className=\"flex justify-between\" data-testid=\"row-platform-fee\">\n                      <span className=\"text-muted-foreground\">{t('exchange.platformFee')}:</span>\n                      <span className=\"font-medium\">{order.platformFee} {order.fromCurrency.toUpperCase()}</span>\n                    </div>\n                    {order.networkFee && (\n                      <div className=\"flex justify-between\" data-testid=\"row-network-fee\">\n                        <span className=\"text-muted-foreground\">{t('exchange.networkFee')}:</span>\n                        <span className=\"font-medium\">{order.networkFee} {order.fromCurrency.toUpperCase()}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4 sm:space-y-6\">\n                  <h3 className=\"text-base sm:text-lg font-semibold\">{t('orderTracking.paymentInfo')}</h3>\n                  <div className=\"space-y-4 sm:space-y-4\">\n                    <div>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-muted-foreground text-sm\">{t('orderTracking.depositAddress')}:</span>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(order.depositAddress, 'Deposit address')}\n                          className=\"h-9 w-9 p-0 sm:h-8 sm:w-8\"\n                          data-testid=\"button-copy-address\"\n                        >\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                      <div className=\"bg-muted/50 rounded-lg p-3 sm:p-4\">\n                        <code className=\"text-xs sm:text-sm font-mono break-all leading-relaxed\" data-testid=\"text-deposit-address\">\n                          {order.depositAddress}\n                        </code>\n                      </div>\n                    </div>\n                    \n                    {validCardDetails && (\n                      <div>\n                        <span className=\"text-muted-foreground text-sm\">{t('orderTracking.payoutDetails')}:</span>\n                        <div className=\"bg-muted/50 rounded-lg p-3 mt-1\">\n                          <span className=\"text-sm\" data-testid=\"text-payout-details\">\n                            Card: {validCardDetails.number} ({validCardDetails.bankName})\n                          </span>\n                        </div>\n                      </div>\n                    )}\n\n                    {order.rateLockExpiry && order.rateType === 'fixed' && (\n                      <div className=\"text-sm text-muted-foreground\" data-testid=\"text-time-remaining\">\n                        <strong>{t('orderTracking.timeRemaining')}:</strong> {calculateTimeRemaining()} (Fixed rate)\n                      </div>\n                    )}\n\n                    {order.txHash && (\n                      <div>\n                        <span className=\"text-muted-foreground text-sm\">Transaction Hash:</span>\n                        <div className=\"bg-muted/50 rounded-lg p-3 sm:p-4 mt-1\">\n                          <div className=\"flex items-start justify-between gap-2\">\n                            <code className=\"text-xs sm:text-sm font-mono break-all leading-relaxed flex-1\" data-testid=\"text-tx-hash\">\n                              {order.txHash}\n                            </code>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => copyToClipboard(order.txHash!, 'Transaction hash')}\n                              className=\"h-9 w-9 p-0 sm:h-8 sm:w-8 flex-shrink-0\"\n                              data-testid=\"button-copy-tx-hash\"\n                            >\n                              <ExternalLink className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 mt-8 pt-8 border-t border-border\">\n                <Button\n                  variant=\"secondary\"\n                  className=\"flex-1 h-11 sm:h-10\"\n                  onClick={() => copyToClipboard(order.depositAddress, 'Deposit address')}\n                  data-testid=\"button-copy-address-main\"\n                >\n                  <Copy className=\"w-4 h-4 mr-2\" />\n                  {t('orderTracking.copyAddress')}\n                </Button>\n                <Button\n                  className=\"flex-1 h-11 sm:h-10\"\n                  onClick={() => {\n                    // This would typically open a support chat or contact form\n                    toast({\n                      title: \"Support\",\n                      description: \"Use the chat widget below to contact support\",\n                    });\n                  }}\n                  data-testid=\"button-contact-support\"\n                >\n                  {t('orderTracking.contactSupport')}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n\n      <SupportChat />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17733},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/middleware/security.ts":{"content":"import { Request, Response, NextFunction } from 'express';\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n}\n\nclass SecurityMiddleware {\n  private rateLimitMap: Map<string, RateLimitEntry> = new Map();\n  private readonly WINDOW_SIZE = 60 * 1000; // 1 minute\n  private readonly MAX_REQUESTS = 60; // requests per window\n\n  private cleanupOldEntries() {\n    const now = Date.now();\n    for (const [key, entry] of Array.from(this.rateLimitMap.entries())) {\n      if (now > entry.resetTime) {\n        this.rateLimitMap.delete(key);\n      }\n    }\n  }\n\n  rateLimiter = (req: Request, res: Response, next: NextFunction) => {\n    this.cleanupOldEntries();\n    \n    const clientId = this.getClientId(req);\n    const now = Date.now();\n    const entry = this.rateLimitMap.get(clientId);\n\n    if (!entry || now > entry.resetTime) {\n      // Create new entry\n      this.rateLimitMap.set(clientId, {\n        count: 1,\n        resetTime: now + this.WINDOW_SIZE\n      });\n      next();\n      return;\n    }\n\n    if (entry.count >= this.MAX_REQUESTS) {\n      res.status(429).json({ \n        error: 'Too many requests',\n        retryAfter: Math.ceil((entry.resetTime - now) / 1000)\n      });\n      return;\n    }\n\n    entry.count++;\n    next();\n  };\n\n  private getClientId(req: Request): string {\n    // Use a combination of IP and User-Agent for identification\n    const forwarded = req.headers['x-forwarded-for'];\n    const ip = forwarded ? (forwarded as string).split(',')[0] : req.connection.remoteAddress;\n    const userAgent = req.headers['user-agent'] || '';\n    return `${ip}-${userAgent.substring(0, 50)}`;\n  }\n\n  validateInput = (req: Request, res: Response, next: NextFunction) => {\n    // Sanitize common XSS attempts\n    const sanitizeValue = (value: any): any => {\n      if (typeof value === 'string') {\n        // Remove potentially dangerous characters\n        return value.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n                   .replace(/javascript:/gi, '')\n                   .replace(/on\\w+\\s*=\\s*[\"\\'][^\"\\']*[\"\\']/gi, '');\n      }\n      if (typeof value === 'object' && value !== null) {\n        const sanitized: any = Array.isArray(value) ? [] : {};\n        for (const key in value) {\n          sanitized[key] = sanitizeValue(value[key]);\n        }\n        return sanitized;\n      }\n      return value;\n    };\n\n    if (req.body) {\n      req.body = sanitizeValue(req.body);\n    }\n    \n    if (req.query) {\n      req.query = sanitizeValue(req.query);\n    }\n\n    next();\n  };\n\n  corsHeaders = (req: Request, res: Response, next: NextFunction) => {\n    const origin = req.headers.origin;\n    const allowedOrigins = [\n      'http://localhost:5000',\n      'http://127.0.0.1:5000',\n      process.env.FRONTEND_URL,\n      // Production Replit domains\n      ...(process.env.REPLIT_DOMAINS ? process.env.REPLIT_DOMAINS.split(',').map(domain => `https://${domain}`) : [])\n    ].filter(Boolean);\n\n    if (allowedOrigins.includes(origin)) {\n      res.header('Access-Control-Allow-Origin', origin);\n    }\n\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    res.header('X-Content-Type-Options', 'nosniff');\n    res.header('X-Frame-Options', 'DENY');\n    res.header('X-XSS-Protection', '1; mode=block');\n    \n    if (req.method === 'OPTIONS') {\n      res.sendStatus(200);\n      return;\n    }\n    \n    next();\n  };\n\n  // Specific rate limiting for order creation (more restrictive)\n  orderCreationLimiter = (req: Request, res: Response, next: NextFunction) => {\n    const clientId = this.getClientId(req);\n    const now = Date.now();\n    const windowSize = 5 * 60 * 1000; // 5 minutes\n    const maxOrders = 3; // max 3 orders per 5 minutes\n    \n    const key = `order_${clientId}`;\n    const entry = this.rateLimitMap.get(key);\n\n    if (!entry || now > entry.resetTime) {\n      this.rateLimitMap.set(key, {\n        count: 1,\n        resetTime: now + windowSize\n      });\n      next();\n      return;\n    }\n\n    if (entry.count >= maxOrders) {\n      res.status(429).json({\n        error: 'Order creation rate limit exceeded. Please wait before creating another order.',\n        retryAfter: Math.ceil((entry.resetTime - now) / 1000)\n      });\n      return;\n    }\n\n    entry.count++;\n    next();\n  };\n\n  // Rate limiting for KYC requests (very restrictive)\n  kycRateLimiter = (req: Request, res: Response, next: NextFunction) => {\n    const clientId = this.getClientId(req);\n    const now = Date.now();\n    const windowSize = 15 * 60 * 1000; // 15 minutes\n    const maxRequests = 2; // max 2 KYC requests per 15 minutes\n    \n    const key = `kyc_${clientId}`;\n    const entry = this.rateLimitMap.get(key);\n\n    if (!entry || now > entry.resetTime) {\n      this.rateLimitMap.set(key, {\n        count: 1,\n        resetTime: now + windowSize\n      });\n      next();\n      return;\n    }\n\n    if (entry.count >= maxRequests) {\n      res.status(429).json({\n        error: 'KYC request rate limit exceeded. Please wait before submitting another request.',\n        retryAfter: Math.ceil((entry.resetTime - now) / 1000)\n      });\n      return;\n    }\n\n    entry.count++;\n    next();\n  };\n}\n\nexport const security = new SecurityMiddleware();","size_bytes":5269},"client/src/pages/about.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Shield, \n  Zap, \n  Globe, \n  Users, \n  Award,\n  Lock,\n  TrendingUp,\n  Clock,\n  CheckCircle\n} from \"lucide-react\";\n\nexport default function About() {\n  const { t } = useTranslation();\n\n  const features = [\n    {\n      icon: Shield,\n      title: t('about.features.security.title'),\n      description: t('about.features.security.desc'),\n      color: 'from-blue-500 to-cyan-500'\n    },\n    {\n      icon: Zap,\n      title: t('about.features.speed.title'), \n      description: t('about.features.speed.desc'),\n      color: 'from-yellow-500 to-orange-500'\n    },\n    {\n      icon: Globe,\n      title: t('about.features.global.title'),\n      description: t('about.features.global.desc'), \n      color: 'from-green-500 to-emerald-500'\n    },\n    {\n      icon: Users,\n      title: t('about.features.support.title'),\n      description: t('about.features.support.desc'),\n      color: 'from-purple-500 to-pink-500'\n    }\n  ];\n\n  const stats = [\n    {\n      number: '100K+',\n      label: t('about.stats.transactions'),\n      icon: TrendingUp\n    },\n    {\n      number: '50+',\n      label: t('about.stats.currencies'),\n      icon: Globe\n    },\n    {\n      number: '24/7',\n      label: t('about.stats.support'),\n      icon: Clock\n    },\n    {\n      number: '99.9%',\n      label: t('about.stats.uptime'),\n      icon: CheckCircle\n    }\n  ];\n\n  const advantages = [\n    {\n      title: t('about.advantages.noRegistration.title'),\n      description: t('about.advantages.noRegistration.desc')\n    },\n    {\n      title: t('about.advantages.bestRates.title'),\n      description: t('about.advantages.bestRates.desc')\n    },\n    {\n      title: t('about.advantages.fastTransactions.title'),\n      description: t('about.advantages.fastTransactions.desc')\n    },\n    {\n      title: t('about.advantages.security.title'),\n      description: t('about.advantages.security.desc')\n    },\n    {\n      title: t('about.advantages.support.title'),\n      description: t('about.advantages.support.desc')\n    },\n    {\n      title: t('about.advantages.transparency.title'),\n      description: t('about.advantages.transparency.desc')\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-1 container mx-auto px-4 py-8\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-12 sm:mb-16\">\n          <h1 className=\"text-3xl sm:text-4xl md:text-5xl font-bold mb-4 sm:mb-6 bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent px-2\">\n            {t('about.title')}\n          </h1>\n          <p className=\"text-base sm:text-lg md:text-xl text-muted-foreground max-w-4xl mx-auto leading-relaxed px-4\">\n            {t('about.subtitle')}\n          </p>\n        </div>\n\n        {/* Mission Statement */}\n        <div className=\"mb-12 sm:mb-16\">\n          <Card className=\"bg-gradient-to-br from-primary/5 to-purple-600/5 border-none\">\n            <CardContent className=\"p-4 sm:p-6 md:p-8 text-center\">\n              <h2 className=\"text-xl sm:text-2xl md:text-3xl font-bold mb-3 sm:mb-4\">{t('about.mission.title')}</h2>\n              <p className=\"text-sm sm:text-base md:text-lg text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n                {t('about.mission.description')}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 md:gap-6 mb-12 sm:mb-16\">\n          {stats.map((stat, index) => (\n            <Card key={index} className=\"text-center hover:shadow-lg transition-all duration-300\">\n              <CardContent className=\"p-3 sm:p-4 md:p-6\">\n                <div className=\"w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 bg-gradient-to-br from-primary to-purple-600 rounded-full flex items-center justify-center mx-auto mb-2 sm:mb-3\">\n                  <stat.icon className=\"w-4 h-4 sm:w-5 sm:h-5 md:w-6 md:h-6 text-white\" />\n                </div>\n                <div className=\"text-lg sm:text-xl md:text-2xl font-bold text-primary mb-1\">{stat.number}</div>\n                <div className=\"text-muted-foreground text-xs sm:text-sm\">{stat.label}</div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Features */}\n        <div className=\"mb-12 sm:mb-16\">\n          <h2 className=\"text-xl sm:text-2xl md:text-3xl font-bold text-center mb-8 sm:mb-12 px-4\">{t('about.featuresTitle')}</h2>\n          <div className=\"grid sm:grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 md:gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"hover:shadow-lg transition-all duration-300\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3 text-base sm:text-lg\">\n                    <div className={`w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-br ${feature.color} rounded-full flex items-center justify-center flex-shrink-0`}>\n                      <feature.icon className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n                    </div>\n                    <span className=\"text-left\">{feature.title}</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <p className=\"text-muted-foreground text-sm sm:text-base leading-relaxed\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Advantages */}\n        <div className=\"mb-12 sm:mb-16\">\n          <h2 className=\"text-xl sm:text-2xl md:text-3xl font-bold text-center mb-8 sm:mb-12 px-4\">{t('about.advantagesTitle')}</h2>\n          <div className=\"grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n            {advantages.map((advantage, index) => (\n              <Card key={index} className=\"hover:shadow-md transition-all duration-300\">\n                <CardContent className=\"p-4 sm:p-6\">\n                  <div className=\"flex items-start gap-3\">\n                    <CheckCircle className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-500 mt-0.5 flex-shrink-0\" />\n                    <div>\n                      <h3 className=\"font-semibold mb-2 text-sm sm:text-base\">{advantage.title}</h3>\n                      <p className=\"text-muted-foreground text-xs sm:text-sm leading-relaxed\">\n                        {advantage.description}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Security Section */}\n        <div className=\"mb-12 sm:mb-16\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20\">\n            <CardContent className=\"p-4 sm:p-6 md:p-8\">\n              <div className=\"flex flex-col sm:flex-row items-start sm:items-start gap-4 sm:gap-6\">\n                <div className=\"w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center flex-shrink-0 mx-auto sm:mx-0\">\n                  <Lock className=\"w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 text-white\" />\n                </div>\n                <div className=\"text-center sm:text-left\">\n                  <h3 className=\"text-lg sm:text-xl md:text-2xl font-bold mb-3 sm:mb-4 text-blue-800 dark:text-blue-200\">\n                    {t('about.security.title')}\n                  </h3>\n                  <div className=\"space-y-2 sm:space-y-3 text-blue-600 dark:text-blue-300 text-sm sm:text-base\">\n                    <p>{t('about.security.encryption')}</p>\n                    <p>{t('about.security.custody')}</p>\n                    <p>{t('about.security.compliance')}</p>\n                  </div>\n                  <div className=\"flex flex-wrap justify-center sm:justify-start gap-2 mt-4\">\n                    <Badge variant=\"outline\" className=\"bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 text-xs sm:text-sm\">\n                      SSL/TLS\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 text-xs sm:text-sm\">\n                      {t('about.security.nonCustodial')}\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 text-xs sm:text-sm\">\n                      {t('about.security.privacy')}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Contact CTA */}\n        <div className=\"text-center\">\n          <Card className=\"bg-gradient-to-r from-primary to-purple-600 text-white\">\n            <CardContent className=\"p-4 sm:p-6 md:p-8\">\n              <h2 className=\"text-lg sm:text-xl md:text-2xl font-bold mb-3 sm:mb-4\">{t('about.contact.title')}</h2>\n              <p className=\"mb-4 sm:mb-6 opacity-90 text-sm sm:text-base px-2\">{t('about.contact.description')}</p>\n              <div className=\"flex flex-col sm:flex-row flex-wrap justify-center gap-3 sm:gap-4\">\n                <Badge variant=\"outline\" className=\"bg-white/20 border-white/30 text-white text-xs sm:text-sm px-3 py-1.5\">\n                  support@cryptoflow.exchange\n                </Badge>\n                <Badge variant=\"outline\" className=\"bg-white/20 border-white/30 text-white text-xs sm:text-sm px-3 py-1.5\">\n                  @cryptoflow_support\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":10013},"client/src/pages/rates.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowRight, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useEffect, useState } from \"react\";\nimport type { ExchangeRate, Currency } from \"@shared/schema\";\n\nexport default function Rates() {\n  const { t } = useTranslation();\n  const [rates, setRates] = useState<ExchangeRate[]>([]);\n  \n  const { data: currencies = [] } = useQuery<Currency[]>({\n    queryKey: ['/api/currencies'],\n  });\n\n  const { data: initialRates = [] } = useQuery<ExchangeRate[]>({\n    queryKey: ['/api/rates'],\n  });\n\n  const { lastMessage } = useWebSocket(\"/ws\");\n\n  useEffect(() => {\n    if (initialRates.length > 0) {\n      setRates(initialRates);\n    }\n  }, [initialRates]);\n\n  useEffect(() => {\n    if (lastMessage && lastMessage.type === 'rates_update') {\n      setRates(lastMessage.data);\n    }\n  }, [lastMessage]);\n\n  const getCurrencyInfo = (currencyId: string) => {\n    return currencies.find(c => c.id === currencyId) || { symbol: currencyId.toUpperCase(), name: currencyId };\n  };\n\n  const formatRate = (rate: string) => {\n    const numRate = parseFloat(rate);\n    if (numRate >= 1) {\n      return numRate.toFixed(2);\n    } else if (numRate >= 0.01) {\n      return numRate.toFixed(4);\n    } else {\n      return numRate.toFixed(8);\n    }\n  };\n\n  const groupedRates = rates.reduce((acc, rate) => {\n    const from = rate.fromCurrency;\n    if (!acc[from]) {\n      acc[from] = [];\n    }\n    acc[from].push(rate);\n    return acc;\n  }, {} as Record<string, ExchangeRate[]>);\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-1 container mx-auto px-4 py-8\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n            {t('rates.title')}\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            {t('rates.subtitle')}\n          </p>\n        </div>\n\n        {/* Live Indicator */}\n        <div className=\"flex items-center justify-center mb-8\">\n          <Badge variant=\"outline\" className=\"bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2\" />\n            {t('rates.liveRates')}\n          </Badge>\n        </div>\n\n        {/* Rates Grid */}\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {Object.entries(groupedRates).map(([fromCurrency, currencyRates]) => {\n            const fromInfo = getCurrencyInfo(fromCurrency);\n            \n            return (\n              <Card key={fromCurrency} className=\"hover:shadow-lg transition-all duration-300\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-purple-600 rounded-full flex items-center justify-center text-white font-bold\">\n                      {fromInfo.symbol?.substring(0, 2)}\n                    </div>\n                    <div>\n                      <div className=\"font-semibold\">{fromInfo.symbol}</div>\n                      <div className=\"text-sm text-muted-foreground\">{fromInfo.name}</div>\n                    </div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {currencyRates.map((rate) => {\n                    const toInfo = getCurrencyInfo(rate.toCurrency);\n                    const isCard = rate.toCurrency.startsWith('card-');\n                    \n                    return (\n                      <div key={rate.id} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50 hover:bg-muted/70 transition-colors\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"w-6 h-6 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                            {isCard ? 'üí≥' : toInfo.symbol?.substring(0, 1)}\n                          </div>\n                          <div className=\"text-sm\">\n                            <div className=\"font-medium\">{toInfo.symbol}</div>\n                            {isCard && (\n                              <div className=\"text-xs text-blue-600\">{t('rates.cardPayout')}</div>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-semibold text-green-600\">\n                            {formatRate(rate.rate)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                            <TrendingUp className=\"w-3 h-3\" />\n                            Live\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Info Section */}\n        <div className=\"mt-12 bg-gradient-to-br from-primary/5 to-purple-600/5 rounded-xl p-8\">\n          <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n            <div>\n              <TrendingUp className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">{t('rates.realTime')}</h3>\n              <p className=\"text-muted-foreground\">{t('rates.realTimeDesc')}</p>\n            </div>\n            <div>\n              <ArrowRight className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">{t('rates.lowFees')}</h3>\n              <p className=\"text-muted-foreground\">{t('rates.lowFeesDesc')}</p>\n            </div>\n            <div>\n              <TrendingDown className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">{t('rates.bestRates')}</h3>\n              <p className=\"text-muted-foreground\">{t('rates.bestRatesDesc')}</p>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":6654},"client/src/pages/support.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  MessageCircle, \n  Mail, \n  Clock, \n  Shield, \n  HelpCircle,\n  AlertCircle,\n  CheckCircle,\n  Phone\n} from \"lucide-react\";\n\nexport default function Support() {\n  const { t } = useTranslation();\n\n  const faqs = [\n    {\n      question: t('support.faq.time.question'),\n      answer: t('support.faq.time.answer'),\n      category: 'timing'\n    },\n    {\n      question: t('support.faq.fees.question'), \n      answer: t('support.faq.fees.answer'),\n      category: 'fees'\n    },\n    {\n      question: t('support.faq.limits.question'),\n      answer: t('support.faq.limits.answer'),\n      category: 'limits'\n    },\n    {\n      question: t('support.faq.support.question'),\n      answer: t('support.faq.support.answer'),\n      category: 'support'\n    }\n  ];\n\n  const contactMethods = [\n    {\n      icon: MessageCircle,\n      title: t('support.contact.telegram.title'),\n      description: t('support.contact.telegram.desc'),\n      action: t('support.contact.telegram.action'),\n      available: true,\n      link: 'https://t.me/cryptoflow_support'\n    },\n    {\n      icon: Mail,\n      title: t('support.contact.email.title'), \n      description: t('support.contact.email.desc'),\n      action: 'support@cryptoflow.exchange',\n      available: true,\n      link: 'mailto:support@cryptoflow.exchange'\n    },\n    {\n      icon: MessageCircle,\n      title: t('support.contact.chat.title'),\n      description: t('support.contact.chat.desc'),\n      action: t('support.contact.chat.action'),\n      available: true\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-1 container mx-auto px-4 py-8\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n            {t('support.title')}\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            {t('support.subtitle')}\n          </p>\n        </div>\n\n        {/* Status Banner */}\n        <div className=\"mb-8\">\n          <Card className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border-green-200 dark:border-green-800\">\n            <CardContent className=\"flex items-center justify-between p-6\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"w-8 h-8 text-green-600\" />\n                <div>\n                  <h3 className=\"font-semibold text-green-800 dark:text-green-200\">\n                    {t('support.status.online')}\n                  </h3>\n                  <p className=\"text-green-600 dark:text-green-300\">\n                    {t('support.status.response')}\n                  </p>\n                </div>\n              </div>\n              <Badge variant=\"outline\" className=\"bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300\">\n                <Clock className=\"w-4 h-4 mr-1\" />\n                24/7\n              </Badge>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Contact Methods */}\n          <div className=\"lg:col-span-2\">\n            <h2 className=\"text-2xl font-bold mb-6\">{t('support.contactTitle')}</h2>\n            <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n              {contactMethods.map((method, index) => (\n                <Card key={index} className=\"hover:shadow-lg transition-all duration-300\">\n                  <CardHeader className=\"text-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-purple-600 rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <method.icon className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <CardTitle className=\"text-lg\">{method.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"text-center space-y-3\">\n                    <p className=\"text-muted-foreground text-sm\">{method.description}</p>\n                    {method.link ? (\n                      <Button asChild className=\"w-full\">\n                        <a href={method.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                          {method.action}\n                        </a>\n                      </Button>\n                    ) : (\n                      <Button className=\"w-full\">{method.action}</Button>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Contact Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Mail className=\"w-5 h-5\" />\n                  {t('support.form.title')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4 sm:space-y-6\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">{t('support.form.name')}</label>\n                    <Input \n                      placeholder={t('support.form.namePlaceholder')} \n                      className=\"h-12 sm:h-10 text-base sm:text-sm\"\n                      data-testid=\"input-support-name\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">{t('support.form.email')}</label>\n                    <Input \n                      type=\"email\" \n                      placeholder={t('support.form.emailPlaceholder')} \n                      className=\"h-12 sm:h-10 text-base sm:text-sm\"\n                      data-testid=\"input-support-email\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">{t('support.form.subject')}</label>\n                  <Input \n                    placeholder={t('support.form.subjectPlaceholder')} \n                    className=\"h-12 sm:h-10 text-base sm:text-sm\"\n                    data-testid=\"input-support-subject\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">{t('support.form.message')}</label>\n                  <Textarea \n                    placeholder={t('support.form.messagePlaceholder')} \n                    rows={5}\n                    className=\"min-h-[120px] text-base sm:text-sm\"\n                    data-testid=\"textarea-support-message\"\n                  />\n                </div>\n                <Button \n                  className=\"w-full bg-gradient-to-r from-primary to-purple-600 hover:from-primary/90 hover:to-purple-600/90 h-12 sm:h-10 text-base sm:text-sm\"\n                  data-testid=\"button-support-send\"\n                >\n                  {t('support.form.send')}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* FAQ Sidebar */}\n          <div>\n            <h2 className=\"text-2xl font-bold mb-6\">{t('support.faqTitle')}</h2>\n            <div className=\"space-y-4\">\n              {faqs.map((faq, index) => (\n                <Card key={index} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-base flex items-start gap-2\">\n                      <HelpCircle className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" />\n                      {faq.question}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <p className=\"text-muted-foreground text-sm leading-relaxed\">\n                      {faq.answer}\n                    </p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Security Notice */}\n            <Card className=\"mt-6 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start gap-3\">\n                  <Shield className=\"w-6 h-6 text-blue-600 mt-0.5\" />\n                  <div>\n                    <h3 className=\"font-semibold text-blue-800 dark:text-blue-200 mb-2\">\n                      {t('support.security.title')}\n                    </h3>\n                    <p className=\"text-blue-600 dark:text-blue-300 text-sm\">\n                      {t('support.security.desc')}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9262},"client/src/hooks/useAuth.ts":{"content":"// User authentication hook - blueprint:javascript_log_in_with_replit\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User | null>({\n    queryKey: [\"auth-user\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/auth/user\", {\n        credentials: \"include\",\n      });\n      \n      // Handle 401 (unauthorized) by returning null instead of throwing\n      if (res.status === 401) {\n        return null;\n      }\n      \n      // Handle 429 (rate limit) by throwing with specific error\n      if (res.status === 429) {\n        const errorData = await res.json();\n        throw new Error(`Rate limited: ${errorData.retryAfter}s`);\n      }\n      \n      if (!res.ok) {\n        const text = await res.text() || res.statusText;\n        throw new Error(`${res.status}: ${text}`);\n      }\n      \n      return await res.json();\n    },\n    retry: false, // No retries to prevent infinite requests\n    staleTime: 15 * 60 * 1000, // 15 minutes - significantly longer cache time\n    gcTime: 30 * 60 * 1000, // 30 minutes cache time\n    refetchOnWindowFocus: false, // Don't refetch when window gains focus\n    refetchOnMount: false, // Don't refetch on component mount\n    refetchInterval: false, // Disable automatic refetching\n    refetchOnReconnect: false, // Don't refetch when reconnecting\n    refetchIntervalInBackground: false, // Don't refetch in background\n    networkMode: \"online\",\n  });\n\n  // Role checking utility functions\n  const hasRole = (requiredRole: 'admin' | 'user'): boolean => {\n    if (!user || !user.role) return false;\n    \n    // Admin users have access to both admin and user roles\n    if (user.role === 'admin') return true;\n    \n    // User role only has access to user-level content\n    return user.role === requiredRole;\n  };\n\n  const isAdmin = (): boolean => {\n    return user?.role === 'admin';\n  };\n\n  const isUser = (): boolean => {\n    return user?.role === 'user';\n  };\n\n  const canAccess = (requiredRole?: 'admin' | 'user'): boolean => {\n    if (!requiredRole) return !!user; // Any authenticated user\n    return hasRole(requiredRole);\n  };\n\n  return {\n    user: user || null,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n    // Role checking functions\n    hasRole,\n    isAdmin,\n    isUser,\n    canAccess\n  };\n}","size_bytes":2382},"client/src/lib/authUtils.ts":{"content":"// Authentication utilities - blueprint:javascript_log_in_with_replit\nexport function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":185},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Shield, AlertCircle } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { loginSchema, type LoginRequest } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function AdminLoginPage() {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>(\"\");\n\n  const form = useForm<LoginRequest>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginRequest) => {\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        if (result.token) {\n          localStorage.setItem(\"auth_token\", result.token);\n          setLocation(\"/admin\");\n        }\n      } else {\n        throw new Error(\"Login failed\");\n      }\n    } catch (err: any) {\n      setError(err.message || \"Login failed\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        <div className=\"text-center\">\n          <Shield className=\"mx-auto h-12 w-12 text-purple-400\" />\n          <h2 className=\"mt-6 text-3xl font-bold text-white\">\n            –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-300\">\n            –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å CryptoFlow\n          </p>\n        </div>\n\n        <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</CardTitle>\n            <CardDescription className=\"text-gray-300\">\n              –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {error && (\n              <Alert variant=\"destructive\" className=\"mb-4\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"admin@example.com\"\n                          className=\"bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-purple-500 h-12 sm:h-10 text-base sm:text-sm\"\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">–ü–∞—Ä–æ–ª—å</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                          className=\"bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:border-purple-500 h-12 sm:h-10 text-base sm:text-sm\"\n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  disabled={isLoading}\n                  className=\"w-full bg-purple-600 hover:bg-purple-700 text-white h-12 sm:h-10 text-base sm:text-sm\"\n                  data-testid=\"button-login\"\n                >\n                  {isLoading ? \"–í—Ö–æ–¥...\" : \"–í–æ–π—Ç–∏\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center\">\n          <p className=\"text-xs text-gray-400\">\n            –ó–∞—â–∏—â–µ–Ω–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ 2025\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5448},"client/src/pages/admin-panel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Settings, \n  Wallet, \n  Key,\n  AlertCircle,\n  Save,\n  BarChart3,\n  DollarSign,\n  TrendingUp,\n  Activity\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AdminLayout } from \"@/components/admin-layout\";\n\ninterface AdminUser {\n  id: string;\n  email: string;\n  role: string;\n}\n\ninterface WalletSetting {\n  id: string;\n  currency: string;\n  address: string;\n  network: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface PlatformSetting {\n  id: string;\n  key: string;\n  value: string;\n  description: string | null;\n  isEncrypted: boolean;\n  updatedAt: string;\n}\n\nexport function AdminPanelPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [user, setUser] = useState<AdminUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [walletSettings, setWalletSettings] = useState<WalletSetting[]>([]);\n  const [platformSettings, setPlatformSettings] = useState<PlatformSetting[]>([]);\n\n  useEffect(() => {\n    checkAuth();\n    loadData();\n  }, []);\n\n  const checkAuth = async () => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      setLocation('/admin/login');\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/auth/verify', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        if (result.user.role !== 'admin') {\n          toast({\n            title: \"Access Denied\",\n            description: \"You don't have admin privileges\",\n            variant: \"destructive\",\n          });\n          setLocation('/');\n          return;\n        }\n        setUser(result.user);\n      } else {\n        localStorage.removeItem('auth_token');\n        setLocation('/admin/login');\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      localStorage.removeItem('auth_token');\n      setLocation('/admin/login');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadData = async () => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) return;\n\n    try {\n      // Load wallet settings\n      const walletResponse = await fetch('/api/admin/wallets', {\n        headers: { 'Authorization': `Bearer ${token}` },\n      });\n      if (walletResponse.ok) {\n        const wallets = await walletResponse.json();\n        setWalletSettings(wallets);\n      }\n\n      // Load platform settings\n      const settingsResponse = await fetch('/api/admin/settings', {\n        headers: { 'Authorization': `Bearer ${token}` },\n      });\n      if (settingsResponse.ok) {\n        const settings = await settingsResponse.json();\n        setPlatformSettings(settings);\n      }\n    } catch (error) {\n      console.error('Failed to load data:', error);\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('auth_token');\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out\",\n    });\n    setLocation('/admin/login');\n  };\n\n  const saveWalletSetting = async (currency: string, address: string, network: string) => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) return;\n\n    try {\n      const response = await fetch('/api/admin/wallets', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ currency, address, network, isActive: true }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Wallet Updated\",\n          description: `${currency.toUpperCase()} wallet address has been saved`,\n        });\n        loadData();\n      } else {\n        throw new Error('Failed to save wallet');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save wallet setting\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const savePlatformSetting = async (key: string, value: string, description?: string) => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) return;\n\n    try {\n      const response = await fetch('/api/admin/settings', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          key, \n          value, \n          description,\n          isEncrypted: key.includes('secret') || key.includes('key') || key.includes('token')\n        }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Setting Updated\",\n          description: `${key} has been saved`,\n        });\n        loadData();\n      } else {\n        throw new Error('Failed to save setting');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save platform setting\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-900\">\n        <div className=\"text-white\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <AdminLayout \n      title=\"Dashboard\" \n      currentSection=\"dashboard\"\n      breadcrumbs={[\n        { label: 'Admin', href: '/admin' },\n        { label: 'Dashboard' }\n      ]}\n    >\n      {/* Dashboard Overview */}\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Users</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">1,234</p>\n                </div>\n                <div className=\"h-12 w-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                  <Activity className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                </div>\n              </div>\n              <p className=\"text-xs text-green-600 dark:text-green-400 mt-2\">+12% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Volume</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">$2.1M</p>\n                </div>\n                <div className=\"h-12 w-12 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                </div>\n              </div>\n              <p className=\"text-xs text-green-600 dark:text-green-400 mt-2\">+8% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Exchanges</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">856</p>\n                </div>\n                <div className=\"h-12 w-12 bg-purple-100 dark:bg-purple-900/20 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n                </div>\n              </div>\n              <p className=\"text-xs text-green-600 dark:text-green-400 mt-2\">+23% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Wallets</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">5</p>\n                </div>\n                <div className=\"h-12 w-12 bg-orange-100 dark:bg-orange-900/20 rounded-lg flex items-center justify-center\">\n                  <Wallet className=\"h-6 w-6 text-orange-600 dark:text-orange-400\" />\n                </div>\n              </div>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">Configured wallets</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Wallet Settings */}\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-gray-900 dark:text-white\">\n                <Wallet className=\"h-5 w-5 mr-2\" />\n                Wallet Configuration\n              </CardTitle>\n              <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n                Configure wallet addresses for deposits\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Quick Wallet Forms */}\n              {['btc', 'eth', 'usdt-trc20'].slice(0, 3).map(currency => (\n                <div key={currency} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"h-8 w-8 bg-orange-100 dark:bg-orange-900/20 rounded-lg flex items-center justify-center\">\n                      <Wallet className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{currency.toUpperCase()}</p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {walletSettings.find(w => w.currency === currency)?.isActive ? 'Configured' : 'Not configured'}\n                      </p>\n                    </div>\n                  </div>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    data-testid={`button-configure-${currency}`}\n                  >\n                    Configure\n                  </Button>\n                </div>\n              ))}\n              <Button className=\"w-full\" data-testid=\"button-view-all-wallets\">\n                View All Wallets\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Platform Settings */}\n          <Card className=\"bg-white dark:bg-gray-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-gray-900 dark:text-white\">\n                <Settings className=\"h-5 w-5 mr-2\" />\n                Platform Settings\n              </CardTitle>\n              <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n                Quick access to key platform configurations\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div className=\"p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <p className=\"text-sm font-medium text-gray-900 dark:text-white\">Platform Fee</p>\n                  <p className=\"text-lg font-bold text-purple-600 dark:text-purple-400\">\n                    {platformSettings.find(s => s.key === 'platform_fee_percent')?.value || '2.5'}%\n                  </p>\n                </div>\n                <div className=\"p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <p className=\"text-sm font-medium text-gray-900 dark:text-white\">Min Exchange</p>\n                  <p className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                    ${platformSettings.find(s => s.key === 'min_exchange_amount_usd')?.value || '50'}\n                  </p>\n                </div>\n              </div>\n              <Button className=\"w-full\" data-testid=\"button-view-all-settings\">\n                View All Settings\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity */}\n        <Card className=\"bg-white dark:bg-gray-800\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-gray-900 dark:text-white\">\n              <BarChart3 className=\"h-5 w-5 mr-2\" />\n              Recent Activity\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n              Latest system events and transactions\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {[\n                { action: 'New user registration', time: '2 minutes ago', status: 'success' },\n                { action: 'BTC wallet address updated', time: '15 minutes ago', status: 'info' },\n                { action: 'Platform settings modified', time: '1 hour ago', status: 'warning' },\n                { action: 'Exchange rate updated', time: '2 hours ago', status: 'info' },\n                { action: 'System backup completed', time: '4 hours ago', status: 'success' }\n              ].map((activity, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`h-2 w-2 rounded-full ${\n                      activity.status === 'success' ? 'bg-green-500' :\n                      activity.status === 'warning' ? 'bg-yellow-500' :\n                      'bg-blue-500'\n                    }`}></div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{activity.action}</p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">{activity.time}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </AdminLayout>\n  );\n}\n\n// Wallet Setting Form Component\nfunction WalletSettingForm({ \n  currency, \n  existing, \n  onSave \n}: { \n  currency: string;\n  existing?: WalletSetting;\n  onSave: (currency: string, address: string, network: string) => void;\n}) {\n  const [address, setAddress] = useState(existing?.address || '');\n  const [network, setNetwork] = useState(existing?.network || getDefaultNetwork(currency));\n\n  const handleSave = () => {\n    if (address.trim()) {\n      onSave(currency, address, network);\n    }\n  };\n\n  return (\n    <div className=\"p-4 border border-gray-600 rounded-lg\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Label className=\"text-white font-medium\">{currency.toUpperCase()}</Label>\n          {existing?.isActive && <Badge variant=\"secondary\" className=\"text-xs\">Active</Badge>}\n        </div>\n        {existing && (\n          <div className=\"text-xs text-gray-400\">\n            Updated: {new Date(existing.createdAt).toLocaleDateString()}\n          </div>\n        )}\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div>\n          <Label className=\"text-sm text-gray-300\">–°–µ—Ç—å</Label>\n          <Input\n            value={network}\n            onChange={(e) => setNetwork(e.target.value)}\n            className=\"bg-gray-700 border-gray-600 text-white mt-1\"\n            placeholder=\"Network\"\n            data-testid={`input-network-${currency}`}\n          />\n        </div>\n        <div className=\"md:col-span-2\">\n          <Label className=\"text-sm text-gray-300\">–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</Label>\n          <div className=\"flex mt-1 space-x-2\">\n            <Input\n              value={address}\n              onChange={(e) => setAddress(e.target.value)}\n              className=\"bg-gray-700 border-gray-600 text-white\"\n              placeholder={`Enter ${currency.toUpperCase()} address`}\n              data-testid={`input-address-${currency}`}\n            />\n            <Button \n              onClick={handleSave}\n              disabled={!address.trim()}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n              data-testid={`button-save-${currency}`}\n            >\n              <Save className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Platform Setting Form Component\nfunction PlatformSettingForm({ \n  settingKey, \n  label, \n  description, \n  existing,\n  onSave,\n  sensitive = false\n}: { \n  settingKey: string;\n  label: string;\n  description: string;\n  existing?: PlatformSetting;\n  onSave: (key: string, value: string, description?: string) => void;\n  sensitive?: boolean;\n}) {\n  const [value, setValue] = useState(existing?.value || '');\n\n  const handleSave = () => {\n    if (value.trim()) {\n      onSave(settingKey, value, description);\n    }\n  };\n\n  return (\n    <div className=\"p-4 border border-gray-600 rounded-lg\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <Label className=\"text-white font-medium\">{label}</Label>\n        {existing && (\n          <div className=\"flex items-center space-x-2\">\n            {existing.isEncrypted && <Badge variant=\"outline\" className=\"text-xs\">Encrypted</Badge>}\n            <div className=\"text-xs text-gray-400\">\n              Updated: {new Date(existing.updatedAt).toLocaleDateString()}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      <p className=\"text-sm text-gray-400 mb-3\">{description}</p>\n      \n      <div className=\"flex space-x-2\">\n        <Input\n          type={sensitive ? \"password\" : \"text\"}\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          className=\"bg-gray-700 border-gray-600 text-white\"\n          placeholder={`Enter ${label.toLowerCase()}`}\n          data-testid={`input-${settingKey}`}\n        />\n        <Button \n          onClick={handleSave}\n          disabled={!value.trim()}\n          className=\"bg-purple-600 hover:bg-purple-700\"\n          data-testid={`button-save-${settingKey}`}\n        >\n          <Save className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// Helper function to get default network for currency\nfunction getDefaultNetwork(currency: string): string {\n  const networks: { [key: string]: string } = {\n    'btc': 'Bitcoin',\n    'eth': 'Ethereum',\n    'usdt-trc20': 'TRC20',\n    'usdt-erc20': 'ERC20',\n    'usdc': 'ERC20',\n  };\n  return networks[currency] || 'Unknown';\n}","size_bytes":19427},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowRight, Shield, Zap, Globe, Star } from \"lucide-react\";\nimport { AuthProviders } from \"@/components/auth-providers\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 dark:from-gray-900 dark:via-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <Badge variant=\"secondary\" className=\"mb-4\">\n            <Star className=\"w-3 h-3 mr-1\" />\n            Trusted by thousands worldwide\n          </Badge>\n          \n          <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 dark:text-white mb-6\">\n            Secure Cryptocurrency\n            <span className=\"bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent block\">\n              Exchange Platform\n            </span>\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto\">\n            Exchange crypto to crypto and crypto to fiat with enterprise-level security, real-time rates, \n            and optional KYC compliance. Join thousands of users who trust our platform.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n            <div className=\"flex flex-col gap-4\">\n              <AuthProviders \n                buttonSize=\"lg\" \n                layout=\"vertical\"\n                showTitle={false}\n                className=\"min-w-[280px]\"\n              />\n            </div>\n            \n            <div className=\"flex items-center\">\n              <div className=\"hidden sm:block w-px h-16 bg-gradient-to-b from-transparent via-gray-300 to-transparent dark:via-gray-600\"></div>\n              <span className=\"sm:hidden text-sm text-gray-400 dark:text-gray-500\">or</span>\n            </div>\n            \n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              onClick={() => document.getElementById('features')?.scrollIntoView()}\n              className=\"border-2\"\n            >\n              Learn More\n              <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Features Section */}\n        <div id=\"features\" className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"border-blue-200 dark:border-blue-800 hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <Shield className=\"w-10 h-10 text-blue-600 mb-4\" />\n              <CardTitle>Enterprise Security</CardTitle>\n              <CardDescription>\n                Maximum protection with session-based authentication, encrypted data storage, and rate limiting\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"border-green-200 dark:border-green-800 hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <Zap className=\"w-10 h-10 text-green-600 mb-4\" />\n              <CardTitle>Real-Time Rates</CardTitle>\n              <CardDescription>\n                Live exchange rates with fixed and floating options, powered by multiple API providers\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"border-purple-200 dark:border-purple-800 hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <Globe className=\"w-10 h-10 text-purple-600 mb-4\" />\n              <CardTitle>Multi-Language Support</CardTitle>\n              <CardDescription>\n                Available in English, Russian, and Romanian with localized payment methods\n              </CardDescription>\n            </CardHeader>\n          </Card>\n        </div>\n\n        {/* Authentication Methods */}\n        <Card className=\"max-w-2xl mx-auto\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"flex items-center justify-center gap-2\">\n              <Shield className=\"w-6 h-6 text-blue-600\" />\n              Secure Authentication Options\n            </CardTitle>\n            <CardDescription>\n              Choose your preferred way to access your account\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center p-4 border rounded-lg\">\n                <div className=\"w-12 h-12 mx-auto mb-2 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center\">\n                  <span className=\"text-red-600 font-bold\">G</span>\n                </div>\n                <p className=\"text-sm font-medium\">Google</p>\n              </div>\n              \n              <div className=\"text-center p-4 border rounded-lg\">\n                <div className=\"w-12 h-12 mx-auto mb-2 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center\">\n                  <span className=\"text-gray-600 font-bold\">GH</span>\n                </div>\n                <p className=\"text-sm font-medium\">GitHub</p>\n              </div>\n              \n              <div className=\"text-center p-4 border rounded-lg\">\n                <div className=\"w-12 h-12 mx-auto mb-2 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                  <span className=\"text-blue-600 font-bold\">A</span>\n                </div>\n                <p className=\"text-sm font-medium\">Apple ID</p>\n              </div>\n              \n              <div className=\"text-center p-4 border rounded-lg\">\n                <div className=\"w-12 h-12 mx-auto mb-2 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                  <span className=\"text-green-600 font-bold\">@</span>\n                </div>\n                <p className=\"text-sm font-medium\">Email</p>\n              </div>\n            </div>\n            \n            <div className=\"text-center pt-4\">\n              <Button \n                onClick={() => window.location.href = '/api/login'} \n                className=\"w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700\"\n                data-testid=\"button-get-started\"\n              >\n                Get Started - It's Free\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6629},"client/src/pages/user-dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { User, CreditCard, History, LogOut, Shield } from \"lucide-react\";\nimport { type Order } from \"@shared/schema\";\n\nexport default function UserDashboard() {\n  const { user, isLoading } = useAuth();\n\n  const { data: orders, isLoading: ordersLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders/user\"],\n    enabled: !!user,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const recentOrders = orders?.slice(0, 5) || [];\n  const completedOrders = orders?.filter(o => o.status === 'completed').length || 0;\n  const totalVolume = orders?.reduce((sum, order) => sum + parseFloat(order.fromAmount), 0) || 0;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-8 space-y-8\">\n        {/* Header with User Info */}\n        <Card className=\"border-blue-200 dark:border-blue-800\">\n          <CardHeader className=\"flex flex-row items-center space-y-0 pb-4\">\n            <div className=\"flex items-center space-x-4 flex-1\">\n              <Avatar className=\"h-16 w-16\">\n                <AvatarImage src={user.profileImageUrl || ''} alt={user.firstName || 'User'} />\n                <AvatarFallback>\n                  <User className=\"h-8 w-8\" />\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {user.firstName && user.lastName \n                    ? `${user.firstName} ${user.lastName}`\n                    : user.email || 'User Dashboard'\n                  }\n                </h1>\n                <p className=\"text-gray-600 dark:text-gray-400\">{user.email}</p>\n                <div className=\"flex items-center gap-2 mt-2\">\n                  <Badge variant={user.role === 'admin' ? 'destructive' : 'secondary'}>\n                    {user.role === 'admin' ? (\n                      <>\n                        <Shield className=\"w-3 h-3 mr-1\" />\n                        Administrator\n                      </>\n                    ) : (\n                      'User'\n                    )}\n                  </Badge>\n                  <Badge variant={user.isActive ? 'default' : 'outline'}>\n                    {user.isActive ? 'Active' : 'Inactive'}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={() => window.location.href = '/api/logout'}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </CardHeader>\n        </Card>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n              <History className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-orders\">{orders?.length || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {completedOrders} completed\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Volume</CardTitle>\n              <CreditCard className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-volume\">\n                ${totalVolume.toLocaleString()}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Across all exchanges\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Member Since</CardTitle>\n              <User className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-member-since\">\n                {new Date(user.createdAt).toLocaleDateString()}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Account created\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Orders */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <History className=\"h-5 w-5\" />\n              Recent Transactions\n            </CardTitle>\n            <CardDescription>\n              Your latest exchange transactions\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {ordersLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse flex items-center space-x-4\">\n                    <div className=\"rounded-full bg-gray-200 h-10 w-10\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : recentOrders.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <CreditCard className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-semibold text-gray-900 dark:text-white\">\n                  No transactions yet\n                </h3>\n                <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                  Start your first exchange to see transactions here.\n                </p>\n                <div className=\"mt-6\">\n                  <Button onClick={() => window.location.href = '/'} data-testid=\"button-start-exchange\">\n                    Start Exchange\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {recentOrders.map((order) => (\n                  <div key={order.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`order-${order.id}`}>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                        <CreditCard className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-900 dark:text-white\">\n                          {order.fromAmount} {order.fromCurrency.toUpperCase()} ‚Üí {order.toAmount} {order.toCurrency.toUpperCase()}\n                        </p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {new Date(order.createdAt).toLocaleDateString()} ‚Ä¢ {order.rateType}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge \n                      variant={\n                        order.status === 'completed' ? 'default' :\n                        order.status === 'failed' ? 'destructive' : \n                        'secondary'\n                      }\n                      data-testid={`status-${order.id}`}\n                    >\n                      {order.status}\n                    </Badge>\n                  </div>\n                ))}\n                \n                {recentOrders.length >= 5 && (\n                  <>\n                    <Separator />\n                    <div className=\"text-center\">\n                      <Button variant=\"outline\" data-testid=\"button-view-all-orders\">\n                        View All Transactions\n                      </Button>\n                    </div>\n                  </>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9082},"server/middleware/auth.ts":{"content":"import type { Request, Response, NextFunction } from 'express';\nimport type { User } from '@shared/schema';\nimport { storage } from '../storage';\n\nexport interface AuthRequest extends Request {\n  user?: User;\n}\n\n// Middleware to check if user is authenticated via Replit Auth\nexport const authenticateToken = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  // Check if user is authenticated via session (Replit Auth)\n  if (!req.isAuthenticated || !req.isAuthenticated()) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  // Get user data from session\n  const sessionUser = req.user as any;\n  if (!sessionUser?.claims?.sub) {\n    return res.status(401).json({ error: 'Invalid session' });\n  }\n\n  try {\n    // Fetch user from database using Replit ID\n    const userId = sessionUser.claims.sub.toString();\n    const dbUser = await storage.getUser(userId);\n    \n    if (!dbUser || !dbUser.isActive) {\n      return res.status(401).json({ error: 'User not found or inactive' });\n    }\n\n    // Attach user to request\n    req.user = dbUser;\n    next();\n  } catch (error) {\n    console.error('Authentication error:', error);\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n};\n\n// Middleware to require admin role\nexport const requireAdmin = (req: AuthRequest, res: Response, next: NextFunction) => {\n  if (!req.user) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  if (req.user.role !== 'admin') {\n    return res.status(403).json({ error: 'Admin access required' });\n  }\n\n  next();\n};\n\n// Middleware to require any authenticated user\nexport const requireAuth = (req: AuthRequest, res: Response, next: NextFunction) => {\n  if (!req.user) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  next();\n};\n\n// Legacy middleware for backward compatibility (using session-based auth)\nexport const isAuthenticated = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  if (!req.isAuthenticated || !req.isAuthenticated()) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  const sessionUser = req.user as any;\n  if (!sessionUser?.claims?.sub) {\n    return res.status(401).json({ message: 'Invalid session' });\n  }\n\n  try {\n    const userId = sessionUser.claims.sub.toString();\n    const dbUser = await storage.getUser(userId);\n    \n    if (!dbUser || !dbUser.isActive) {\n      return res.status(401).json({ message: 'User not found or inactive' });\n    }\n\n    req.user = dbUser;\n    next();\n  } catch (error) {\n    console.error('Authentication error:', error);\n    return res.status(500).json({ message: 'Internal server error' });\n  }\n};","size_bytes":2688},"server/replitAuth.ts":{"content":"// Replit Auth integration - blueprint:javascript_log_in_with_replit\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"].toString(),\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n\n// Admin role check middleware\nexport const requireAdmin: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n  if (!user?.claims?.sub) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  try {\n    const dbUser = await storage.getUser(user.claims.sub.toString());\n    if (!dbUser || dbUser.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    next();\n  } catch (error) {\n    return res.status(500).json({ message: \"Internal server error\" });\n  }\n};","size_bytes":4866},"server/routes/admin.ts":{"content":"import { Router, type Response, type RequestHandler } from 'express';\nimport { type AuthRequest, authenticateToken, requireAdmin } from '../middleware/auth';\nimport { logAdminAction, executeAdminLog, updateAdminLogTargetId, AdminActions, AdminTargets } from '../middleware/admin-logger';\nimport { requireAdminPassword, requireSecureSession } from '../middleware/secure-admin';\nimport { \n  updateWalletSchema, \n  updateSettingSchema, \n  adminCreateUserSchema, \n  adminUpdateUserSchema,\n  createTelegramConfigSchema,\n  createExchangeMethodSchema,\n  insertCurrencySchema\n} from '@shared/schema';\nimport { storage } from '../storage';\nimport { currencyConverter } from '../services/currency-converter';\nimport { encryptionService } from '../services/encryption';\nimport { z } from 'zod';\n\nconst adminRouter = Router();\n\n// Apply authentication middleware to all admin routes\nadminRouter.use(authenticateToken as RequestHandler);\nadminRouter.use(requireAdmin as RequestHandler);\nadminRouter.use(executeAdminLog);\n\n// =====================\n// DASHBOARD & STATS\n// =====================\n\n// Get admin stats for dashboard\nadminRouter.get('/stats',\n  logAdminAction('view_stats', AdminTargets.PLATFORM_SETTING, 'Admin viewed platform stats'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const stats = await storage.getAdminStats();\n    res.json(stats);\n  } catch (error) {\n    console.error('Get admin stats error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Get dashboard data (stats + recent activity)\nadminRouter.get('/dashboard',\n  logAdminAction('view_dashboard', AdminTargets.PLATFORM_SETTING, 'Admin viewed dashboard'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const [stats, recentLogs, recentOrders] = await Promise.all([\n      storage.getAdminStats(),\n      storage.getAdminLogs(1, 10), // Recent 10 admin actions\n      storage.getOrders() // Will be limited to recent orders in implementation\n    ]);\n\n    res.json({\n      stats,\n      recentActivity: recentLogs.logs,\n      recentOrders: recentOrders.slice(0, 5) // Last 5 orders\n    });\n  } catch (error) {\n    console.error('Get dashboard data error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Get enhanced dashboard stats with charts data\nadminRouter.get('/dashboard-stats',\n  logAdminAction('view_dashboard_stats', AdminTargets.PLATFORM_SETTING, 'Admin viewed enhanced dashboard stats'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const [stats, recentLogs, recentOrders] = await Promise.all([\n      storage.getAdminStats(),\n      storage.getAdminLogs(1, 10), // Recent 10 admin actions\n      storage.getOrders() // Get all orders for calculations\n    ]);\n\n    // Calculate real volume data from orders\n    const now = new Date();\n    const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    \n    // Get orders from last 7 days and calculate daily volumes\n    const recentOrdersForVolume = recentOrders.filter(order => \n      new Date(order.createdAt) >= sevenDaysAgo && \n      order.status === 'completed'\n    );\n\n    // Group orders by date for volume chart\n    const volumeByDay = [];\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      const dayOrders = recentOrdersForVolume.filter(order => \n        new Date(order.createdAt).toISOString().split('T')[0] === dateStr\n      );\n      \n      const dayVolume = await dayOrders.reduce(async (sumPromise, order) => {\n        const sum = await sumPromise;\n        // Convert order amounts to USD equivalent using real exchange rates\n        const amount = parseFloat(order.fromAmount) || 0;\n        const usdValue = await currencyConverter.convertToUSD(amount, order.fromCurrency);\n        return sum + usdValue;\n      }, Promise.resolve(0));\n      \n      volumeByDay.push({\n        date: dateStr,\n        volume: Math.round(dayVolume),\n        orders: dayOrders.length\n      });\n    }\n\n    // Calculate currency distribution from orders\n    const currencyMap = new Map();\n    recentOrdersForVolume.forEach(order => {\n      const currency = order.fromCurrency;\n      const amount = parseFloat(order.fromAmount) || 0;\n      currencyMap.set(currency, (currencyMap.get(currency) || 0) + amount);\n    });\n\n    // Convert all currency amounts to USD for proper distribution calculation\n    const currencyUSDValues = new Map();\n    for (const [currency, amount] of Array.from(currencyMap.entries())) {\n      const usdValue = await currencyConverter.convertToUSD(amount, currency);\n      currencyUSDValues.set(currency, usdValue);\n    }\n    \n    const totalCurrencyValue = Array.from(currencyUSDValues.values()).reduce((a, b) => a + b, 0);\n    const currencyDistribution = Array.from(currencyUSDValues.entries()).map(([currency, usdValue]) => ({\n      name: currency.toUpperCase(),\n      value: Math.round(usdValue), // Real USD conversion\n      percentage: totalCurrencyValue > 0 ? Math.round((usdValue / totalCurrencyValue) * 100 * 100) / 100 : 0,\n      color: getCurrencyColor(currency)\n    }));\n\n    // Calculate 24h metrics\n    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    const ordersLast24h = recentOrders.filter(order => \n      new Date(order.createdAt) >= oneDayAgo && \n      order.status === 'completed'\n    );\n    \n    const totalVolume = await ordersLast24h.reduce(async (sumPromise, order) => {\n      const sum = await sumPromise;\n      const amount = parseFloat(order.fromAmount) || 0;\n      const usdValue = await currencyConverter.convertToUSD(amount, order.fromCurrency);\n      return sum + usdValue;\n    }, Promise.resolve(0));\n\n    res.json({\n      stats,\n      recentActivity: recentLogs.logs,\n      recentOrders: recentOrders.slice(0, 5),\n      exchanges24h: ordersLast24h.length,\n      totalVolume: Math.round(totalVolume),\n      volumeByDay,\n      currencyDistribution\n    });\n  } catch (error) {\n    console.error('Get dashboard stats error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Helper function for currency colors\nfunction getCurrencyColor(currency: string): string {\n  const colors: { [key: string]: string } = {\n    'btc': '#f97316',\n    'eth': '#6366f1', \n    'usdt': '#10b981',\n    'usdc': '#8b5cf6',\n    'doge': '#eab308',\n    'ltc': '#06b6d4'\n  };\n  return colors[currency.toLowerCase()] || '#6b7280';\n}\n\n// =====================\n// USERS MANAGEMENT\n// =====================\n\n// Get all users with pagination\nadminRouter.get('/users',\n  logAdminAction('list_users', AdminTargets.USER, 'Admin viewed users list'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 20;\n    const search = req.query.search as string;\n\n    const result = await storage.getAllUsers(page, limit, search);\n    res.json(result);\n  } catch (error) {\n    console.error('Get users error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Get specific user\nadminRouter.get('/users/:id',\n  logAdminAction('view_user', AdminTargets.USER, 'Admin viewed user details'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const user = await storage.getUser(req.params.id);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        error: 'User not found',\n      });\n    }\n\n    res.json(user);\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Create new user\nadminRouter.post('/users', \n  logAdminAction(AdminActions.CREATE_USER, AdminTargets.USER, 'Admin created new user'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = adminCreateUserSchema.parse(req.body);\n      \n      const newUser = await storage.adminCreateUser(validatedData);\n      updateAdminLogTargetId(req, newUser.id);\n      \n      res.status(201).json(newUser);\n    } catch (error) {\n      console.error('Create user error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Update user\nadminRouter.put('/users/:id',\n  logAdminAction(AdminActions.UPDATE_USER, AdminTargets.USER, 'Admin updated user'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = adminUpdateUserSchema.parse(req.body);\n      \n      const updatedUser = await storage.adminUpdateUser(req.params.id, validatedData);\n      if (!updatedUser) {\n        return res.status(404).json({\n          success: false,\n          error: 'User not found',\n        });\n      }\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Update user error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Deactivate user\nadminRouter.delete('/users/:id',\n  logAdminAction(AdminActions.DEACTIVATE_USER, AdminTargets.USER, 'Admin deactivated user'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const success = await storage.deactivateUser(req.params.id);\n      if (!success) {\n        return res.status(404).json({\n          success: false,\n          error: 'User not found',\n        });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Deactivate user error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// =====================\n// TELEGRAM MANAGEMENT - SECURE\n// =====================\n\n// Get telegram configs (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤)\nadminRouter.get('/telegram-configs',\n  logAdminAction('list_telegram_configs', AdminTargets.TELEGRAM, 'Admin viewed telegram configs'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const configs = await storage.getTelegramConfigs();\n    \n    // –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n    const safeConfigs = configs.map(config => ({\n      ...config,\n      botToken: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' + (config.botToken ? config.botToken.slice(-4) : ''),\n      signingSecret: config.signingSecret ? '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' : ''\n    }));\n    \n    res.json(safeConfigs);\n  } catch (error) {\n    console.error('Get telegram configs error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// –°–æ–∑–¥–∞—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏\nadminRouter.post('/telegram/secure-auth',\n  requireAdminPassword('telegram_manage') as any,\n  logAdminAction('telegram_secure_auth', AdminTargets.TELEGRAM, 'Admin created secure session for Telegram access'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const sessionId = res.locals.secureSessionId;\n      \n      res.json({\n        success: true,\n        secureSessionId: sessionId,\n        expiresIn: 15 * 60, // 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö\n        message: 'Secure session created for Telegram management'\n      });\n    } catch (error) {\n      console.error('Create secure session error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to create secure session',\n      });\n    }\n  }) as RequestHandler\n);\n\n// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–û–ß–ï–ù–¨ –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø)\nadminRouter.post('/telegram/reveal-token',\n  requireSecureSession('telegram_manage') as any,\n  logAdminAction('reveal_telegram_token', AdminTargets.TELEGRAM, 'Admin revealed telegram token'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const { configId } = req.body;\n      \n      if (!configId) {\n        return res.status(400).json({\n          success: false,\n          error: 'Configuration ID is required',\n        });\n      }\n\n      const config = await storage.getTelegramConfig(configId);\n      if (!config) {\n        return res.status(404).json({\n          success: false,\n          error: 'Telegram configuration not found',\n        });\n      }\n\n      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–≥–¥–µ)\n      const decryptedToken = encryptionService.decrypt(config.botToken);\n      const decryptedSecret = encryptionService.decrypt(config.signingSecret);\n\n      // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n      updateAdminLogTargetId(req, configId);\n\n      res.json({\n        success: true,\n        botToken: decryptedToken,\n        signingSecret: decryptedSecret,\n        configName: config.name,\n        // –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ\n        autoDestroy: true\n      });\n\n    } catch (error) {\n      console.error('Reveal token error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to reveal token',\n      });\n    }\n  }) as RequestHandler\n);\n\n// –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π)\nadminRouter.post('/telegram/test-connection',\n  requireSecureSession('telegram_manage') as any,\n  logAdminAction('test_telegram_connection', AdminTargets.TELEGRAM, 'Admin tested telegram connection'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const { configId } = req.body;\n      \n      if (!configId) {\n        return res.status(400).json({\n          success: false,\n          error: 'Configuration ID is required',\n        });\n      }\n\n      const config = await storage.getTelegramConfig(configId);\n      if (!config) {\n        return res.status(404).json({\n          success: false,\n          error: 'Telegram configuration not found',\n        });\n      }\n\n      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n      const decryptedToken = encryptionService.decrypt(config.botToken);\n\n      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API\n      try {\n        const response = await fetch(`https://api.telegram.org/bot${decryptedToken}/getMe`, {\n          method: 'GET',\n          signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ timeout\n        });\n\n        if (!response.ok) {\n          throw new Error(`Telegram API error: ${response.status}`);\n        }\n\n        const botInfo = await response.json();\n        \n        if (botInfo.ok) {\n          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ\n          await storage.updateTelegramTestStatus(configId, 'success');\n          \n          updateAdminLogTargetId(req, configId);\n          \n          res.json({\n            success: true,\n            botInfo: botInfo.result,\n            message: 'Connection successful'\n          });\n        } else {\n          throw new Error(botInfo.description || 'Unknown Telegram API error');\n        }\n\n      } catch (apiError: any) {\n        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑–µ\n        await storage.updateTelegramTestStatus(configId, 'failed', apiError.message);\n        \n        res.status(400).json({\n          success: false,\n          error: 'Telegram API connection failed',\n          details: apiError.message\n        });\n      }\n\n    } catch (error) {\n      console.error('Test connection error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to test connection',\n      });\n    }\n  }) as RequestHandler\n);\n\n// –°–æ–∑–¥–∞—Ç—å telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º)\nadminRouter.post('/telegram-configs',\n  requireSecureSession('telegram_manage') as any,\n  logAdminAction(AdminActions.CREATE_TELEGRAM_CONFIG, AdminTargets.TELEGRAM, 'Admin created telegram config'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = createTelegramConfigSchema.parse(req.body);\n      \n      // –®–∏—Ñ—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º\n      const encryptedData = {\n        ...validatedData,\n        botToken: encryptionService.encrypt(validatedData.botToken),\n        signingSecret: encryptionService.encrypt(validatedData.signingSecret)\n      };\n      \n      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º\n      try {\n        const response = await fetch(`https://api.telegram.org/bot${validatedData.botToken}/getMe`, {\n          method: 'GET',\n          signal: AbortSignal.timeout(10000)\n        });\n\n        if (!response.ok) {\n          return res.status(400).json({\n            success: false,\n            error: 'Invalid Telegram bot token - unable to connect to Telegram API',\n          });\n        }\n\n        const botInfo = await response.json();\n        if (!botInfo.ok) {\n          return res.status(400).json({\n            success: false,\n            error: 'Invalid Telegram bot token - API returned error',\n          });\n        }\n\n      } catch (apiError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Unable to validate Telegram bot token - API connection failed',\n        });\n      }\n      \n      const newConfig = await storage.createTelegramConfig(encryptedData, req.user!.id);\n      updateAdminLogTargetId(req, newConfig.id);\n      \n      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n      const safeConfig = {\n        ...newConfig,\n        botToken: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' + (validatedData.botToken ? validatedData.botToken.slice(-4) : ''),\n        signingSecret: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢'\n      };\n      \n      res.status(201).json(safeConfig);\n    } catch (error) {\n      console.error('Create telegram config error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// –û–±–Ω–æ–≤–∏—Ç—å telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º)\nadminRouter.put('/telegram-configs/:id',\n  requireSecureSession('telegram_manage') as any,\n  logAdminAction(AdminActions.UPDATE_TELEGRAM_CONFIG, AdminTargets.TELEGRAM, 'Admin updated telegram config'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = createTelegramConfigSchema.partial().parse(req.body);\n      \n      // –®–∏—Ñ—Ä—É–µ–º –Ω–æ–≤—ã–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã\n      const updateData = { ...validatedData };\n      if (validatedData.botToken) {\n        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω\n        try {\n          const response = await fetch(`https://api.telegram.org/bot${validatedData.botToken}/getMe`, {\n            method: 'GET',\n            signal: AbortSignal.timeout(10000)\n          });\n\n          if (!response.ok || !(await response.json()).ok) {\n            return res.status(400).json({\n              success: false,\n              error: 'Invalid Telegram bot token',\n            });\n          }\n        } catch (apiError) {\n          return res.status(400).json({\n            success: false,\n            error: 'Unable to validate Telegram bot token',\n          });\n        }\n        \n        updateData.botToken = encryptionService.encrypt(validatedData.botToken);\n      }\n      \n      if (validatedData.signingSecret) {\n        updateData.signingSecret = encryptionService.encrypt(validatedData.signingSecret);\n      }\n      \n      const updatedConfig = await storage.updateTelegramConfig(req.params.id, updateData);\n      if (!updatedConfig) {\n        return res.status(404).json({\n          success: false,\n          error: 'Telegram config not found',\n        });\n      }\n\n      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n      const safeConfig = {\n        ...updatedConfig,\n        botToken: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' + (updatedConfig.botToken ? updatedConfig.botToken.slice(-4) : ''),\n        signingSecret: updatedConfig.signingSecret ? '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' : ''\n      };\n\n      res.json(safeConfig);\n    } catch (error) {\n      console.error('Update telegram config error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Delete telegram config\nadminRouter.delete('/telegram-configs/:id',\n  logAdminAction(AdminActions.DELETE_TELEGRAM_CONFIG, AdminTargets.TELEGRAM, 'Admin deleted telegram config'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const success = await storage.deleteTelegramConfig(req.params.id);\n      if (!success) {\n        return res.status(404).json({\n          success: false,\n          error: 'Telegram config not found',\n        });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete telegram config error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// =====================\n// WALLETS MANAGEMENT  \n// =====================\n\n// Get wallet settings\nadminRouter.get('/wallets',\n  logAdminAction('list_wallets', AdminTargets.WALLET, 'Admin viewed wallet settings'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const wallets = await storage.getWalletSettings();\n    res.json(wallets);\n  } catch (error) {\n    console.error('Get wallets error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Create or update wallet setting\nadminRouter.post('/wallets',\n  logAdminAction(AdminActions.CREATE_WALLET, AdminTargets.WALLET, 'Admin created/updated wallet setting'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = updateWalletSchema.parse(req.body);\n      \n      // Check if wallet already exists\n      const existing = await storage.getWalletSetting(validatedData.currency);\n      \n      if (existing) {\n        // Update existing wallet\n        const updated = await storage.updateWalletSetting(existing.id, {\n          address: validatedData.address,\n          network: validatedData.network,\n          isActive: validatedData.isActive,\n        });\n        updateAdminLogTargetId(req, existing.id);\n        res.json(updated);\n      } else {\n        // Create new wallet setting\n        const newWallet = await storage.createWalletSetting({\n          currency: validatedData.currency,\n          address: validatedData.address,\n          network: validatedData.network,\n          isActive: validatedData.isActive,\n          createdBy: req.user!.id,\n        });\n        updateAdminLogTargetId(req, newWallet.id);\n        res.status(201).json(newWallet);\n      }\n    } catch (error) {\n      console.error('Create/update wallet error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Update wallet setting\nadminRouter.put('/wallets/:id',\n  logAdminAction(AdminActions.UPDATE_WALLET, AdminTargets.WALLET, 'Admin updated wallet setting'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = updateWalletSchema.partial().parse(req.body);\n      \n      const updated = await storage.updateWalletSetting(req.params.id, validatedData);\n      if (!updated) {\n        return res.status(404).json({\n          success: false,\n          error: 'Wallet setting not found',\n        });\n      }\n\n      res.json(updated);\n    } catch (error) {\n      console.error('Update wallet error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Delete wallet setting\nadminRouter.delete('/wallets/:id',\n  logAdminAction(AdminActions.DELETE_WALLET, AdminTargets.WALLET, 'Admin deleted wallet setting'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const success = await storage.deleteWalletSetting(req.params.id);\n      if (!success) {\n        return res.status(404).json({\n          success: false,\n          error: 'Wallet setting not found',\n        });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete wallet error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// =====================\n// CURRENCIES MANAGEMENT\n// =====================\n\n// Get currencies\nadminRouter.get('/currencies',\n  logAdminAction('list_currencies', AdminTargets.CURRENCY, 'Admin viewed currencies'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const currencies = await storage.getCurrencies();\n    res.json(currencies);\n  } catch (error) {\n    console.error('Get currencies error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Create currency\nadminRouter.post('/currencies',\n  logAdminAction(AdminActions.CREATE_CURRENCY, AdminTargets.CURRENCY, 'Admin created currency'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = insertCurrencySchema.parse(req.body);\n      \n      const newCurrency = await storage.createCurrency(validatedData);\n      updateAdminLogTargetId(req, newCurrency.id);\n      \n      res.status(201).json(newCurrency);\n    } catch (error) {\n      console.error('Create currency error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Update currency\nadminRouter.put('/currencies/:id',\n  logAdminAction(AdminActions.UPDATE_CURRENCY, AdminTargets.CURRENCY, 'Admin updated currency'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = insertCurrencySchema.partial().parse(req.body);\n      \n      const updated = await storage.updateCurrency(req.params.id, validatedData);\n      if (!updated) {\n        return res.status(404).json({\n          success: false,\n          error: 'Currency not found',\n        });\n      }\n\n      res.json(updated);\n    } catch (error) {\n      console.error('Update currency error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Delete currency (with usage check)\nadminRouter.delete('/currencies/:id',\n  logAdminAction(AdminActions.DELETE_CURRENCY, AdminTargets.CURRENCY, 'Admin deleted currency'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      // Check if currency is being used in orders or exchange rates\n      const orders = await storage.getOrders();\n      const isUsedInOrders = orders.some(order => \n        order.fromCurrency === req.params.id || order.toCurrency === req.params.id\n      );\n\n      if (isUsedInOrders) {\n        return res.status(400).json({\n          success: false,\n          error: 'Cannot delete currency that is used in existing orders',\n        });\n      }\n\n      const success = await storage.deleteCurrency(req.params.id);\n      if (!success) {\n        return res.status(404).json({\n          success: false,\n          error: 'Currency not found',\n        });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete currency error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// =====================\n// CURRENCIES MANAGEMENT - SECURE\n// =====================\n\n// Get all currencies (with inactive ones for admin)\nadminRouter.get('/currencies',\n  logAdminAction('list_currencies', AdminTargets.CURRENCY, 'Admin viewed currencies list'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    // Admin can see all currencies including inactive ones\n    const currencies = await storage.getAllCurrencies();\n    res.json(currencies);\n  } catch (error) {\n    console.error('Get currencies error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Get specific currency\nadminRouter.get('/currencies/:id',\n  logAdminAction('view_currency', AdminTargets.CURRENCY, 'Admin viewed currency details'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const currency = await storage.getCurrency(req.params.id);\n    if (!currency) {\n      return res.status(404).json({\n        success: false,\n        error: 'Currency not found',\n      });\n    }\n\n    res.json(currency);\n  } catch (error) {\n    console.error('Get currency error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Create new currency\nadminRouter.post('/currencies', \n  logAdminAction(AdminActions.CREATE_CURRENCY, AdminTargets.CURRENCY, 'Admin created new currency'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = insertCurrencySchema.parse(req.body);\n      \n      // Check if currency with same ID already exists\n      const existingCurrency = await storage.getCurrency(validatedData.id);\n      if (existingCurrency) {\n        return res.status(409).json({\n          success: false,\n          error: 'Currency with this ID already exists',\n        });\n      }\n      \n      const newCurrency = await storage.createCurrency(validatedData);\n      updateAdminLogTargetId(req, newCurrency.id);\n      \n      res.status(201).json(newCurrency);\n    } catch (error) {\n      console.error('Create currency error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Update currency\nadminRouter.put('/currencies/:id',\n  logAdminAction(AdminActions.UPDATE_CURRENCY, AdminTargets.CURRENCY, 'Admin updated currency'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = insertCurrencySchema.partial().parse(req.body);\n      \n      const updatedCurrency = await storage.updateCurrency(req.params.id, validatedData);\n      if (!updatedCurrency) {\n        return res.status(404).json({\n          success: false,\n          error: 'Currency not found',\n        });\n      }\n\n      res.json(updatedCurrency);\n    } catch (error) {\n      console.error('Update currency error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Delete currency (soft delete - set inactive)\nadminRouter.delete('/currencies/:id',\n  logAdminAction(AdminActions.DELETE_CURRENCY, AdminTargets.CURRENCY, 'Admin deleted currency'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const success = await storage.deleteCurrency(req.params.id);\n      if (!success) {\n        return res.status(404).json({\n          success: false,\n          error: 'Currency not found',\n        });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete currency error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Toggle currency active status\nadminRouter.patch('/currencies/:id/toggle',\n  logAdminAction(AdminActions.UPDATE_CURRENCY, AdminTargets.CURRENCY, 'Admin toggled currency status'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const currency = await storage.getCurrency(req.params.id);\n      if (!currency) {\n        return res.status(404).json({\n          success: false,\n          error: 'Currency not found',\n        });\n      }\n\n      const updatedCurrency = await storage.updateCurrency(req.params.id, {\n        isActive: !currency.isActive\n      });\n\n      res.json(updatedCurrency);\n    } catch (error) {\n      console.error('Toggle currency status error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// =====================\n// EXCHANGE METHODS MANAGEMENT\n// =====================\n\n// Get exchange methods\nadminRouter.get('/exchange-methods',\n  logAdminAction('list_exchange_methods', AdminTargets.EXCHANGE_METHOD, 'Admin viewed exchange methods'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const methods = await storage.getExchangeMethods();\n    res.json(methods);\n  } catch (error) {\n    console.error('Get exchange methods error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Create exchange method\nadminRouter.post('/exchange-methods',\n  logAdminAction(AdminActions.CREATE_EXCHANGE_METHOD, AdminTargets.EXCHANGE_METHOD, 'Admin created exchange method'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = createExchangeMethodSchema.parse(req.body);\n      \n      const newMethod = await storage.createExchangeMethod(validatedData, req.user!.id);\n      updateAdminLogTargetId(req, newMethod.id);\n      \n      res.status(201).json(newMethod);\n    } catch (error) {\n      console.error('Create exchange method error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Update exchange method\nadminRouter.put('/exchange-methods/:id',\n  logAdminAction(AdminActions.UPDATE_EXCHANGE_METHOD, AdminTargets.EXCHANGE_METHOD, 'Admin updated exchange method'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = createExchangeMethodSchema.partial().parse(req.body);\n      \n      const updated = await storage.updateExchangeMethod(req.params.id, validatedData);\n      if (!updated) {\n        return res.status(404).json({\n          success: false,\n          error: 'Exchange method not found',\n        });\n      }\n\n      res.json(updated);\n    } catch (error) {\n      console.error('Update exchange method error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// Delete exchange method\nadminRouter.delete('/exchange-methods/:id',\n  logAdminAction(AdminActions.DELETE_EXCHANGE_METHOD, AdminTargets.EXCHANGE_METHOD, 'Admin deleted exchange method'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const success = await storage.deleteExchangeMethod(req.params.id);\n      if (!success) {\n        return res.status(404).json({\n          success: false,\n          error: 'Exchange method not found',\n        });\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete exchange method error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// =====================\n// PLATFORM SETTINGS\n// =====================\n\n// Get platform settings\nadminRouter.get('/settings',\n  logAdminAction('view_settings', AdminTargets.PLATFORM_SETTING, 'Admin viewed platform settings'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const settings = await storage.getPlatformSettings();\n    \n    // Filter sensitive settings in response\n    const safeSettings = settings.map(setting => ({\n      ...setting,\n      value: setting.isEncrypted ? '***ENCRYPTED***' : setting.value,\n    }));\n    \n    res.json(safeSettings);\n  } catch (error) {\n    console.error('Get settings error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Create or update platform setting\nadminRouter.post('/settings',\n  logAdminAction(AdminActions.UPDATE_PLATFORM_SETTING, AdminTargets.PLATFORM_SETTING, 'Admin updated platform setting'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const validatedData = updateSettingSchema.parse(req.body);\n      \n      const setting = await storage.setPlatformSetting({\n        key: validatedData.key,\n        value: validatedData.value,\n        description: validatedData.description,\n        isEncrypted: validatedData.isEncrypted,\n        updatedBy: req.user!.id,\n      });\n\n      // Return safe version without sensitive data\n      res.json({\n        ...setting,\n        value: setting.isEncrypted ? '***ENCRYPTED***' : setting.value,\n      });\n    } catch (error) {\n      console.error('Create/update setting error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          success: false,\n          error: 'Invalid input data',\n          details: error.errors,\n        });\n      }\n\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\n// =====================\n// ADMIN LOGS\n// =====================\n\n// Get admin logs with pagination\nadminRouter.get('/logs',\n  logAdminAction('view_logs', AdminTargets.PLATFORM_SETTING, 'Admin viewed audit logs'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 50;\n    const adminId = req.query.adminId as string;\n\n    const result = await storage.getAdminLogs(page, limit, adminId);\n    res.json(result);\n  } catch (error) {\n    console.error('Get admin logs error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Get logs for specific admin\nadminRouter.get('/logs/:adminId',\n  logAdminAction('view_admin_logs', AdminTargets.PLATFORM_SETTING, 'Admin viewed specific admin logs'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 50;\n\n    const result = await storage.getAdminLogs(page, limit, req.params.adminId);\n    res.json(result);\n  } catch (error) {\n    console.error('Get admin logs by admin error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// =====================\n// ORDERS MANAGEMENT\n// =====================\n\n// Get all orders (existing endpoint but moved here for organization)\nadminRouter.get('/orders',\n  logAdminAction('view_orders', 'order', 'Admin viewed orders list'),\n  (async (req: AuthRequest, res: Response) => {\n  try {\n    const orders = await storage.getOrders();\n    res.json(orders);\n  } catch (error) {\n    console.error('Get orders error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Update order status (existing endpoint but moved here)\nadminRouter.patch('/orders/:id/status',\n  logAdminAction('update_order_status', 'order', 'Admin updated order status'),\n  (async (req: AuthRequest, res: Response) => {\n    try {\n      const { status, txHash, payoutTxHash } = req.body;\n      \n      const updates: any = {};\n      if (txHash) updates.txHash = txHash;\n      if (payoutTxHash) updates.payoutTxHash = payoutTxHash;\n      \n      const order = await storage.updateOrderStatus(req.params.id, status, updates);\n      \n      if (!order) {\n        return res.status(404).json({\n          success: false,\n          error: 'Order not found',\n        });\n      }\n      \n      res.json(order);\n    } catch (error) {\n      console.error('Update order status error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n      });\n    }\n  }) as RequestHandler\n);\n\nexport { adminRouter };","size_bytes":42727},"server/routes/auth.ts":{"content":"import { Router, type Request, type Response, type RequestHandler } from 'express';\nimport { type AuthRequest, authenticateToken, requireAdmin } from '../middleware/auth';\nimport { storage } from '../storage';\nimport { registerSchema } from '@shared/schema';\nimport { z } from 'zod';\nimport bcrypt from 'bcryptjs';\nimport crypto from 'crypto';\nimport { emailService } from '../services/email';\n\nconst authRouter = Router();\n\n// Unified user endpoint - works with both Replit Auth and OAuth\nauthRouter.get('/user', (async (req: AuthRequest, res: Response) => {\n  try {\n    // Check if user is authenticated via session\n    if (!req.isAuthenticated || !req.isAuthenticated()) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    // Get user data from session (works for both Replit Auth and OAuth)\n    const sessionUser = req.user as any;\n    if (!sessionUser?.claims?.sub) {\n      return res.status(401).json({ error: 'Invalid session' });\n    }\n\n    // Fetch user from database\n    const userId = sessionUser.claims.sub.toString();\n    const dbUser = await storage.getUser(userId);\n    \n    if (!dbUser || !dbUser.isActive) {\n      return res.status(401).json({ error: 'User not found or inactive' });\n    }\n\n    // Return user data in format expected by frontend\n    res.json({\n      id: dbUser.id,\n      email: dbUser.email,\n      firstName: dbUser.firstName,\n      lastName: dbUser.lastName,\n      profileImageUrl: dbUser.profileImageUrl,\n      role: dbUser.role,\n      isActive: dbUser.isActive,\n      createdAt: dbUser.createdAt,\n      updatedAt: dbUser.updatedAt\n    });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}) as RequestHandler);\n\n// Get current user info (via Replit Auth session) - legacy endpoint\nauthRouter.get('/me', authenticateToken as RequestHandler, ((req: AuthRequest, res: Response) => {\n  res.json({\n    success: true,\n    user: {\n      id: req.user!.id,\n      email: req.user!.email,\n      firstName: req.user!.firstName,\n      lastName: req.user!.lastName,\n      profileImageUrl: req.user!.profileImageUrl,\n      role: req.user!.role,\n      isActive: req.user!.isActive,\n    },\n  });\n}) as RequestHandler);\n\n// Verify current session\nauthRouter.get('/verify', authenticateToken as RequestHandler, ((req: AuthRequest, res: Response) => {\n  res.json({\n    success: true,\n    user: {\n      id: req.user!.id,\n      email: req.user!.email,\n      firstName: req.user!.firstName,\n      lastName: req.user!.lastName,\n      role: req.user!.role,\n    },\n  });\n}) as RequestHandler);\n\n// Update user role (admin only)\nauthRouter.patch('/users/:id/role', authenticateToken as RequestHandler, requireAdmin as RequestHandler, (async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { role } = req.body;\n\n    if (!role || !['admin', 'user'].includes(role)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid role. Must be \"admin\" or \"user\"',\n      });\n    }\n\n    const updatedUser = await storage.updateUser(id, { role });\n    \n    if (!updatedUser) {\n      return res.status(404).json({\n        success: false,\n        error: 'User not found',\n      });\n    }\n\n    res.json({\n      success: true,\n      user: {\n        id: updatedUser.id,\n        email: updatedUser.email,\n        firstName: updatedUser.firstName,\n        lastName: updatedUser.lastName,\n        role: updatedUser.role,\n        isActive: updatedUser.isActive,\n      },\n    });\n\n  } catch (error) {\n    console.error('Update user role error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Get all users (admin only)\nauthRouter.get('/users', authenticateToken as RequestHandler, requireAdmin as RequestHandler, (async (req: AuthRequest, res: Response) => {\n  try {\n    // Note: This would need to be implemented in storage if we need to list all users\n    // For now, return the current user as an array\n    res.json({\n      success: true,\n      users: [{\n        id: req.user!.id,\n        email: req.user!.email,\n        firstName: req.user!.firstName,\n        lastName: req.user!.lastName,\n        role: req.user!.role,\n        isActive: req.user!.isActive,\n        createdAt: req.user!.createdAt,\n      }],\n    });\n  } catch (error) {\n    console.error('Get users error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Update user status (admin only)\nauthRouter.patch('/users/:id/status', authenticateToken as RequestHandler, requireAdmin as RequestHandler, (async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { isActive } = req.body;\n\n    if (typeof isActive !== 'boolean') {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid status. Must be boolean',\n      });\n    }\n\n    const updatedUser = await storage.updateUser(id, { isActive });\n    \n    if (!updatedUser) {\n      return res.status(404).json({\n        success: false,\n        error: 'User not found',\n      });\n    }\n\n    res.json({\n      success: true,\n      user: {\n        id: updatedUser.id,\n        email: updatedUser.email,\n        firstName: updatedUser.firstName,\n        lastName: updatedUser.lastName,\n        role: updatedUser.role,\n        isActive: updatedUser.isActive,\n      },\n    });\n\n  } catch (error) {\n    console.error('Update user status error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n    });\n  }\n}) as RequestHandler);\n\n// Login with email and password\nauthRouter.post('/login', (async (req: Request, res: Response) => {\n  try {\n    // Validate request body\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({\n        success: false,\n        error: 'Email and password are required',\n      });\n    }\n\n    // Find user by email\n    const user = await storage.getUserByEmail(email);\n\n    if (!user || !user.password) {\n      return res.status(401).json({\n        success: false,\n        error: 'Invalid email or password',\n      });\n    }\n\n    // Check if account is activated\n    if (!user.isActive) {\n      return res.status(403).json({\n        success: false,\n        error: 'Account not activated. Please check your email and activate your account first.',\n      });\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n\n    if (!isValidPassword) {\n      return res.status(401).json({\n        success: false,\n        error: 'Invalid email or password',\n      });\n    }\n\n    // Create session object compatible with existing auth system\n    const sessionUser = {\n      claims: {\n        sub: user.id,\n        email: user.email,\n        first_name: user.firstName,\n        last_name: user.lastName,\n        profile_image_url: user.profileImageUrl,\n        exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 hours from now\n      },\n      provider: 'local'\n    };\n\n    // Store user in session (compatible with passport session)\n    req.login(sessionUser, (err) => {\n      if (err) {\n        console.error('Session creation error:', err);\n        return res.status(500).json({\n          success: false,\n          error: 'Login failed. Please try again.',\n        });\n      }\n\n      res.json({\n        success: true,\n        message: 'Login successful',\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          isActive: user.isActive,\n        },\n      });\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Login failed. Please try again.',\n    });\n  }\n}) as RequestHandler);\n\n// Register new user with email confirmation\nauthRouter.post('/register', (async (req: Request, res: Response) => {\n  try {\n    // Validate request body\n    const validatedData = registerSchema.parse(req.body);\n    const { login, email, password } = validatedData;\n\n    // Check if user with this email or login already exists\n    const existingUser = await storage.getUserByEmail(email);\n    if (existingUser) {\n      return res.status(409).json({ \n        success: false, \n        error: 'User with this email already exists' \n      });\n    }\n\n    // Hash password with salt rounds 12 (2025 best practice)\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n    // Create user with inactive status\n    const newUser = await storage.createUser({\n      email,\n      password: hashedPassword,\n      firstName: login, // Use login as firstName for now\n      lastName: null,\n      profileImageUrl: null,\n      role: 'user',\n      isActive: false,\n    });\n\n    // Generate activation token\n    const token = crypto.randomBytes(32).toString('hex');\n    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n\n    // Store activation token\n    await storage.createEmailToken({\n      userId: newUser.id,\n      token,\n      expiresAt,\n    });\n\n    // Send activation email\n    const emailSent = await emailService.sendActivationEmail(email, login, token);\n    \n    if (!emailSent) {\n      console.warn(`‚ö†Ô∏è  Registration completed but activation email could not be sent to ${email}`);\n    }\n\n    res.status(201).json({\n      success: true,\n      message: 'Registration successful! Please check your email to activate your account.',\n      user: {\n        id: newUser.id,\n        email: newUser.email,\n        firstName: newUser.firstName,\n        isActive: newUser.isActive,\n      },\n      emailSent,\n    });\n\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        error: 'Validation failed',\n        details: error.errors,\n      });\n    }\n\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Registration failed. Please try again.',\n    });\n  }\n}) as RequestHandler);\n\n// Activate user account with email token\nauthRouter.get('/activate', (async (req: Request, res: Response) => {\n  try {\n    const { token } = req.query;\n\n    if (!token || typeof token !== 'string') {\n      return res.status(400).json({\n        success: false,\n        error: 'Activation token is required',\n      });\n    }\n\n    // Find the email token\n    const emailToken = await storage.getEmailToken(token);\n\n    if (!emailToken) {\n      return res.status(404).json({\n        success: false,\n        error: 'Invalid or expired activation token',\n      });\n    }\n\n    // Check if token has expired\n    if (new Date() > new Date(emailToken.expiresAt)) {\n      // Clean up expired token\n      await storage.deleteEmailToken(token);\n      return res.status(400).json({\n        success: false,\n        error: 'Activation token has expired. Please register again.',\n      });\n    }\n\n    // Activate the user\n    const activated = await storage.activateUser(emailToken.userId);\n\n    if (!activated) {\n      return res.status(500).json({\n        success: false,\n        error: 'Failed to activate account. Please try again.',\n      });\n    }\n\n    // Clean up the used token\n    await storage.deleteEmailToken(token);\n\n    // Get user info to return\n    const user = await storage.getUser(emailToken.userId);\n\n    res.json({\n      success: true,\n      message: 'Account activated successfully! You can now log in.',\n      user: user ? {\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        isActive: user.isActive,\n      } : null,\n    });\n\n  } catch (error) {\n    console.error('Account activation error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Account activation failed. Please try again.',\n    });\n  }\n}) as RequestHandler);\n\nexport { authRouter };","size_bytes":12041},"server/services/bybit-stub.ts":{"content":"/**\n * Bybit Deposit Monitor Service (Stub Implementation)\n * \n * This is a stub implementation for future Bybit integration.\n * When ready, this service will monitor deposit transactions on Bybit account.\n */\n\nexport interface BybitDepositRecord {\n  coin: string;\n  amount: string;\n  txId: string;\n  status: string; // 'success', 'pending', 'failed'\n  timestamp: number;\n  network: string;\n  address?: string;\n  memo?: string;\n}\n\nexport class BybitDepositMonitor {\n  private apiKey: string;\n  private apiSecret: string;\n  private isRunning: boolean = false;\n  private lastSeenId: string | null = null;\n  private intervalId?: NodeJS.Timeout;\n\n  constructor() {\n    this.apiKey = process.env.BYBIT_API_KEY || '';\n    this.apiSecret = process.env.BYBIT_API_SECRET || '';\n  }\n\n  /**\n   * Start monitoring deposits\n   */\n  start(): void {\n    if (this.isRunning) {\n      console.log('Bybit deposit monitor is already running');\n      return;\n    }\n\n    if (!this.apiKey || !this.apiSecret) {\n      console.log('Bybit API credentials not configured. Deposit monitoring disabled.');\n      return;\n    }\n\n    console.log('Starting Bybit deposit monitor (stub implementation)...');\n    this.isRunning = true;\n\n    // Poll every 60 seconds for new deposits\n    this.intervalId = setInterval(() => {\n      this.checkDeposits();\n    }, 60000);\n\n    // Initial check\n    this.checkDeposits();\n  }\n\n  /**\n   * Stop monitoring deposits\n   */\n  stop(): void {\n    if (!this.isRunning) {\n      return;\n    }\n\n    console.log('Stopping Bybit deposit monitor...');\n    this.isRunning = false;\n\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = undefined;\n    }\n  }\n\n  /**\n   * Check for new deposits (stub implementation)\n   */\n  private async checkDeposits(): Promise<void> {\n    try {\n      console.log('Checking for new Bybit deposits... (stub)');\n      \n      // TODO: Implement actual Bybit API call\n      // This is where we would call Bybit's deposit history endpoint:\n      // GET /v5/asset/deposit/query-record\n      \n      const stubDeposits = await this.getDepositHistory();\n      \n      for (const deposit of stubDeposits) {\n        if (this.isNewDeposit(deposit)) {\n          await this.processNewDeposit(deposit);\n          this.lastSeenId = deposit.txId;\n        }\n      }\n\n    } catch (error) {\n      console.error('Error checking Bybit deposits:', error);\n    }\n  }\n\n  /**\n   * Get deposit history from Bybit API (stub implementation)\n   */\n  private async getDepositHistory(): Promise<BybitDepositRecord[]> {\n    // TODO: Replace with actual Bybit API call\n    // const response = await this.makeAuthenticatedRequest('/v5/asset/deposit/query-record', {\n    //   coin: '', // empty for all coins\n    //   startTime: Date.now() - 3600000, // last hour\n    //   limit: 50\n    // });\n    \n    // For now, return empty array (stub)\n    return [];\n  }\n\n  /**\n   * Check if deposit is new\n   */\n  private isNewDeposit(deposit: BybitDepositRecord): boolean {\n    if (!this.lastSeenId) {\n      return true; // First run, consider all as new\n    }\n    \n    return deposit.txId !== this.lastSeenId && \n           deposit.status === 'success' &&\n           deposit.timestamp > Date.now() - 3600000; // Within last hour\n  }\n\n  /**\n   * Process new deposit notification\n   */\n  private async processNewDeposit(deposit: BybitDepositRecord): Promise<void> {\n    console.log('New Bybit deposit detected:', {\n      coin: deposit.coin,\n      amount: deposit.amount,\n      txId: deposit.txId,\n      network: deposit.network,\n    });\n\n    // Try to correlate with existing orders\n    const orderId = await this.findRelatedOrder(deposit);\n\n    // Send Telegram notification\n    try {\n      const { telegramService } = await import('./telegram');\n      await telegramService.sendDepositAlert(\n        deposit.coin,\n        deposit.amount,\n        deposit.txId,\n        orderId\n      );\n    } catch (error) {\n      console.error('Failed to send Telegram notification:', error);\n    }\n  }\n\n  /**\n   * Try to find related order by address or memo\n   */\n  private async findRelatedOrder(deposit: BybitDepositRecord): Promise<string | undefined> {\n    try {\n      const { storage } = await import('../storage');\n      const orders = await storage.getOrders();\n      \n      // Look for orders with matching deposit address or memo\n      const relatedOrder = orders.find(order => \n        order.status === 'awaiting_deposit' &&\n        (order.depositAddress === deposit.address ||\n         order.depositAddress.includes(deposit.memo || ''))\n      );\n\n      return relatedOrder?.id;\n    } catch (error) {\n      console.error('Error finding related order:', error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Make authenticated request to Bybit API (stub)\n   */\n  private async makeAuthenticatedRequest(endpoint: string, params: any): Promise<any> {\n    // TODO: Implement Bybit API authentication\n    // This would include:\n    // 1. Generate timestamp\n    // 2. Create signature using HMAC-SHA256\n    // 3. Make request with proper headers\n    \n    throw new Error('Bybit API not implemented yet (stub)');\n  }\n\n  /**\n   * Get monitor status\n   */\n  getStatus(): { running: boolean; configured: boolean; lastCheck: string | null } {\n    return {\n      running: this.isRunning,\n      configured: !!(this.apiKey && this.apiSecret),\n      lastCheck: this.lastSeenId,\n    };\n  }\n}\n\n// Export singleton instance\nexport const bybitDepositMonitor = new BybitDepositMonitor();\n\n// Auto-start if credentials are available\nif (process.env.BYBIT_API_KEY && process.env.BYBIT_API_SECRET) {\n  bybitDepositMonitor.start();\n}","size_bytes":5621},"server/services/crypto.ts":{"content":"import crypto from 'crypto';\n\nconst ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || crypto.randomBytes(32);\nconst IV_LENGTH = 16; // For AES, this is always 16\n\nexport class CryptoService {\n  /**\n   * Encrypt sensitive data like API keys\n   */\n  static encrypt(text: string): string {\n    const iv = crypto.randomBytes(IV_LENGTH);\n    const cipher = crypto.createCipher('aes-256-cbc', ENCRYPTION_KEY);\n    let encrypted = cipher.update(text, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    return iv.toString('hex') + ':' + encrypted;\n  }\n\n  /**\n   * Decrypt sensitive data\n   */\n  static decrypt(encryptedData: string): string {\n    const parts = encryptedData.split(':');\n    const iv = Buffer.from(parts[0], 'hex');\n    const encryptedText = parts[1];\n    const decipher = crypto.createDecipher('aes-256-cbc', ENCRYPTION_KEY);\n    let decrypted = decipher.update(encryptedText, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  }\n\n  /**\n   * Generate HMAC signature for Telegram messages\n   */\n  static generateHMAC(data: string, secret: string): string {\n    return crypto\n      .createHmac('sha256', secret)\n      .update(data)\n      .digest('hex');\n  }\n\n  /**\n   * Verify HMAC signature\n   */\n  static verifyHMAC(data: string, signature: string, secret: string): boolean {\n    const expectedSignature = this.generateHMAC(data, secret);\n    return crypto.timingSafeEqual(\n      Buffer.from(signature, 'hex'),\n      Buffer.from(expectedSignature, 'hex')\n    );\n  }\n\n  /**\n   * Generate random verification code\n   */\n  static generateVerificationCode(length: number = 6): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  /**\n   * Generate secure random string for tokens\n   */\n  static generateSecureRandom(length: number = 32): string {\n    return crypto.randomBytes(length).toString('hex');\n  }\n}","size_bytes":2024},"scripts/create-admin.ts":{"content":"// Script to create first admin user\nimport { db } from \"../server/db\";\nimport { users } from \"../shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nasync function createFirstAdmin() {\n  try {\n    console.log('Creating first admin user...');\n    \n    const adminUserId = 'admin-1'; // This is the ID for the first admin\n    \n    // Check if admin already exists\n    const [existing] = await db.select().from(users).where(eq(users.id, adminUserId));\n    \n    if (existing) {\n      console.log('Admin user already exists:', existing.email);\n      return existing;\n    }\n    \n    // Create first admin user\n    const [admin] = await db.insert(users).values({\n      id: adminUserId,\n      email: 'admin@cryptoflow.com',\n      firstName: 'Admin',\n      lastName: 'User',\n      role: 'admin',\n      isActive: true,\n      profileImageUrl: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n    \n    console.log('‚úÖ Admin user created successfully!');\n    console.log('Admin ID:', admin.id);\n    console.log('Admin Email:', admin.email);\n    console.log('Role:', admin.role);\n    \n    return admin;\n  } catch (error) {\n    console.error('‚ùå Error creating admin user:', error);\n    process.exit(1);\n  }\n}\n\ncreateFirstAdmin()\n  .then(() => {\n    console.log('\\nüéâ Setup complete! You can now access admin features.');\n    process.exit(0);\n  })\n  .catch(console.error);","size_bytes":1396},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/oauthProviders.ts":{"content":"// OAuth providers integration for Google and GitHub\nimport passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { Strategy as GitHubStrategy } from \"passport-github2\";\nimport type { Express } from \"express\";\nimport { storage } from \"./storage\";\nimport crypto from \"crypto\";\n\n// Individual provider validation - allows partial OAuth setup\nfunction validateGoogleConfig(): boolean {\n  return !!(process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET);\n}\n\nfunction validateGitHubConfig(): boolean {\n  return !!(process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET);\n}\n\n// Enhanced verify function with better session integration\nasync function verifyOAuthUser(\n  accessToken: string,\n  refreshToken: string,\n  profile: any,\n  done: (error: any, user?: any) => void\n) {\n  try {\n    console.log('OAuth profile received:', {\n      provider: profile.provider,\n      id: profile.id,\n      email: profile.emails?.[0]?.value,\n      name: profile.displayName\n    });\n\n    // Create user data from OAuth profile\n    const userData = {\n      id: `${profile.provider}_${profile.id}`, // Prefix with provider to avoid ID conflicts\n      email: profile.emails?.[0]?.value || null,\n      firstName: profile.name?.givenName || profile.displayName?.split(' ')[0] || null,\n      lastName: profile.name?.familyName || profile.displayName?.split(' ').slice(1).join(' ') || null,\n      profileImageUrl: profile.photos?.[0]?.value || null,\n    };\n\n    // Upsert user in database\n    const user = await storage.upsertUser(userData);\n    \n    // Create Replit Auth compatible session object\n    const sessionUser = {\n      claims: {\n        sub: user.id,\n        email: user.email,\n        first_name: user.firstName,\n        last_name: user.lastName,\n        profile_image_url: user.profileImageUrl,\n        exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 hours from now\n      },\n      access_token: accessToken,\n      refresh_token: refreshToken,\n      expires_at: Math.floor(Date.now() / 1000) + (24 * 60 * 60),\n      provider: profile.provider\n    };\n\n    done(null, sessionUser);\n  } catch (error) {\n    console.error('OAuth verification error:', error);\n    done(error, null);\n  }\n}\n\nexport function setupOAuthProviders(app: Express, baseUrl: string) {\n  console.log('Setting up OAuth providers...');\n  \n  const configuredProviders: string[] = [];\n\n  // Google OAuth Strategy - proper implementation\n  if (validateGoogleConfig()) {\n    try {\n      passport.use('google', new GoogleStrategy({\n        clientID: process.env.GOOGLE_CLIENT_ID!,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n        callbackURL: `${baseUrl}/api/auth/google/callback`,\n        scope: ['profile', 'email', 'openid']\n      }, verifyOAuthUser));\n\n      // Google OAuth routes with CSRF protection\n      app.get('/api/auth/google', (req, res, next) => {\n        // Generate and store CSRF state parameter\n        const state = crypto.randomBytes(32).toString('hex');\n        req.session.oauthState = state;\n        \n        passport.authenticate('google', { \n          scope: ['profile', 'email', 'openid'],\n          state: state\n        })(req, res, next);\n      });\n\n      app.get('/api/auth/google/callback', (req, res, next) => {\n        // Verify CSRF state parameter\n        const state = req.query.state as string;\n        if (!state || state !== req.session.oauthState) {\n          return res.redirect('/api/login?error=csrf_failed');\n        }\n        \n        // Clear the state from session\n        delete req.session.oauthState;\n        \n        passport.authenticate('google', {\n          successRedirect: '/',\n          failureRedirect: '/api/login?error=oauth_failed'\n        })(req, res, next);\n      });\n\n      configuredProviders.push('google');\n      console.log('‚úÖ Google OAuth configured successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to configure Google OAuth:', error);\n    }\n  } else {\n    console.log('‚ö†Ô∏è  Google OAuth not configured - missing environment variables');\n    console.log('‚ÑπÔ∏è  To enable Google OAuth, set GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET environment variables');\n    \n    // Setup fallback routes that redirect to Replit Auth when Google is not configured\n    app.get('/api/auth/google', (req, res) => {\n      console.log('üîÑ Google OAuth not configured - redirecting to Replit Auth');\n      res.redirect('/api/login');\n    });\n\n    app.get('/api/auth/google/callback', (req, res) => {\n      console.log('üîÑ Google OAuth not configured - redirecting to Replit Auth');\n      res.redirect('/api/login');\n    });\n  }\n\n  // GitHub OAuth Strategy - independent setup\n  if (validateGitHubConfig()) {\n    try {\n      passport.use('github', new GitHubStrategy({\n        clientID: process.env.GITHUB_CLIENT_ID!,\n        clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n        callbackURL: `${baseUrl}/api/auth/github/callback`,\n        scope: ['user:email']\n      }, verifyOAuthUser));\n\n      // GitHub OAuth routes with CSRF protection\n      app.get('/api/auth/github', (req, res, next) => {\n        // Generate and store CSRF state parameter\n        const state = crypto.randomBytes(32).toString('hex');\n        req.session.oauthState = state;\n        \n        passport.authenticate('github', { \n          scope: ['user:email'],\n          state: state\n        })(req, res, next);\n      });\n\n      app.get('/api/auth/github/callback', (req, res, next) => {\n        // Verify CSRF state parameter\n        const state = req.query.state as string;\n        if (!state || state !== req.session.oauthState) {\n          return res.redirect('/api/login?error=csrf_failed');\n        }\n        \n        // Clear the state from session\n        delete req.session.oauthState;\n        \n        passport.authenticate('github', {\n          successRedirect: '/',\n          failureRedirect: '/api/login?error=oauth_failed'\n        })(req, res, next);\n      });\n\n      configuredProviders.push('github');\n      console.log('‚úÖ GitHub OAuth configured successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to configure GitHub OAuth:', error);\n    }\n  } else {\n    console.log('‚ö†Ô∏è  GitHub OAuth not configured - missing environment variables');\n  }\n\n  // Cached provider configuration for instant responses\n  let cachedProviderResponse: any = null;\n  \n  function generateProviderResponse() {\n    const providers = [...configuredProviders]; // Start with OAuth providers first\n    if (!providers.includes('google')) {\n      providers.unshift('google'); // Always include Google as primary\n    }\n    if (!providers.includes('replit')) {\n      providers.push('replit'); // Add Replit as fallback\n    }\n    \n    return {\n      providers,\n      configured: configuredProviders.length,\n      available: ['google', 'github', 'replit'],\n      cached_at: new Date().toISOString()\n    };\n  }\n  \n  // Pre-generate cached response\n  cachedProviderResponse = generateProviderResponse();\n  \n  // Get available providers endpoint - optimized for speed\n  app.get('/api/auth/providers', (req, res) => {\n    // Set aggressive caching headers\n    res.set({\n      'Cache-Control': 'public, max-age=300, stale-while-revalidate=600',\n      'Content-Type': 'application/json'\n    });\n    \n    // Return cached response immediately\n    res.json(cachedProviderResponse);\n  });\n\n  if (configuredProviders.length > 0) {\n    console.log(`‚úÖ OAuth providers setup completed: ${configuredProviders.join(', ')}`);\n  } else {\n    console.log('‚ö†Ô∏è  No OAuth providers configured');\n  }\n}\n\n// Export functions to check individual OAuth providers\nexport function isGoogleOAuthConfigured(): boolean {\n  return validateGoogleConfig();\n}\n\nexport function isGitHubOAuthConfigured(): boolean {\n  return validateGitHubConfig();\n}\n\nexport function getConfiguredOAuthProviders(): string[] {\n  const providers: string[] = [];\n  if (validateGoogleConfig()) providers.push('google');\n  if (validateGitHubConfig()) providers.push('github');\n  return providers;\n}","size_bytes":8047},"client/src/components/auth-providers.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { LogIn, Loader2 } from \"lucide-react\";\nimport { SiGoogle, SiGithub, SiReplit } from \"react-icons/si\";\nimport { LocalAuth } from \"./local-auth\";\n\ninterface Provider {\n  id: string;\n  name: string;\n  icon: React.ReactNode;\n  url: string;\n  color?: string;\n}\n\ninterface AuthProvidersProps {\n  className?: string;\n  buttonSize?: \"sm\" | \"default\" | \"lg\";\n  layout?: \"vertical\" | \"horizontal\";\n  title?: string;\n  showTitle?: boolean;\n  showLocalAuth?: boolean;\n  onSuccess?: () => void;\n}\n\nexport function AuthProviders({ \n  className = \"\", \n  buttonSize = \"default\", \n  layout = \"vertical\",\n  title = \"Sign in with\",\n  showTitle = true,\n  showLocalAuth = true,\n  onSuccess\n}: AuthProvidersProps) {\n  const [availableProviders, setAvailableProviders] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Always show Google as primary provider (skip backend check)\n  useEffect(() => {\n    // Set Google as the primary provider without backend dependency\n    setAvailableProviders(['google']);\n    setIsLoading(false);\n  }, []);\n\n  // Provider definitions\n  const allProviders: Record<string, Provider> = {\n    replit: {\n      id: 'replit',\n      name: 'Replit',\n      icon: <SiReplit className=\"w-5 h-5\" />,\n      url: '/api/login',\n      color: 'bg-orange-600 hover:bg-orange-700'\n    },\n    google: {\n      id: 'google',\n      name: 'Google',\n      icon: <SiGoogle className=\"w-5 h-5\" />,\n      url: '/api/login', // Use Replit auth as fallback but show Google branding\n      color: 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold'\n    },\n    github: {\n      id: 'github',\n      name: 'GitHub',\n      icon: <SiGithub className=\"w-5 h-5\" />,\n      url: '/api/auth/github',\n      color: 'bg-gray-800 hover:bg-gray-900'\n    }\n  };\n\n  // Filter providers based on what's available\n  const providers = availableProviders\n    .map(id => allProviders[id])\n    .filter(Boolean);\n\n  if (isLoading) {\n    return (\n      <div className={`flex items-center justify-center p-4 ${className}`}>\n        <Loader2 className=\"w-6 h-6 animate-spin text-muted-foreground\" />\n        <span className=\"ml-2 text-sm text-muted-foreground\">Loading providers...</span>\n      </div>\n    );\n  }\n\n  if (providers.length === 0 && !showLocalAuth) {\n    return (\n      <div className={`text-center p-4 ${className}`}>\n        <p className=\"text-sm text-muted-foreground\">No authentication providers available</p>\n      </div>\n    );\n  }\n\n  // Always show the full UI with local auth when enabled\n  if (providers.length === 1 && !showLocalAuth) {\n    const provider = providers[0];\n    const isGoogleProvider = provider.id === 'google';\n    return (\n      <div className={className}>\n        <Button \n          size={buttonSize}\n          onClick={() => window.location.href = provider.url}\n          className={`w-full ${provider.color || 'bg-primary hover:bg-primary/90'} ${\n            isGoogleProvider ? 'font-semibold' : ''\n          }`}\n          data-testid={`button-login-${provider.id}`}\n        >\n          {provider.icon}\n          <span className=\"ml-2\">\n            {isGoogleProvider ? 'Sign in with Google' : `Continue with ${provider.name}`}\n          </span>\n          <LogIn className=\"w-4 h-4 ml-2\" />\n        </Button>\n        {isGoogleProvider && (\n          <p className=\"text-xs text-center text-muted-foreground mt-2\">\n            Secure authentication with your Google account\n          </p>\n        )}\n      </div>\n    );\n  }\n\n  // Show all options with local auth\n  return (\n    <div className={className}>\n      {/* Local Email/Password Authentication */}\n      {showLocalAuth && (\n        <LocalAuth \n          className=\"mb-6\" \n          onSuccess={onSuccess}\n        />\n      )}\n\n      {/* OAuth Providers */}\n      {providers.length > 0 && (\n        <div className=\"space-y-3\">\n          {providers.map((provider, index) => (\n            <div key={provider.id}>\n              <Button\n                size={buttonSize}\n                onClick={() => window.location.href = provider.url}\n                className={`w-full ${provider.color || 'bg-primary hover:bg-primary/90'} ${\n                  provider.id === 'google' ? 'font-semibold' : ''\n                }`}\n                data-testid={`button-login-${provider.id}`}\n              >\n                {provider.icon}\n                <span className=\"ml-2\">\n                  {provider.id === 'google' ? 'Sign in with Google' : `Continue with ${provider.name}`}\n                </span>\n                <LogIn className=\"w-4 h-4 ml-2\" />\n              </Button>\n              {provider.id === 'google' && (\n                <p className=\"text-xs text-center text-muted-foreground mt-2\">\n                  Secure authentication with your Google account\n                </p>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":5062},"types/express-session.d.ts":{"content":"import \"express-session\";\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    oauthState?: string;\n  }\n}","size_bytes":118},"client/src/lib/performance.ts":{"content":"// Performance monitoring utilities\nclass PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metrics: Map<string, number[]> = new Map();\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  // Track page load performance\n  trackPageLoad(pageName: string) {\n    if (typeof window !== 'undefined' && 'performance' in window) {\n      const loadTime = performance.now();\n      this.recordMetric(`page_load_${pageName}`, loadTime);\n      \n      // Log performance if it's slow (over 2 seconds)\n      if (loadTime > 2000) {\n        console.warn(`Slow page load detected: ${pageName} took ${loadTime.toFixed(2)}ms`);\n      }\n    }\n  }\n\n  // Track API response times\n  trackAPICall(endpoint: string, startTime: number) {\n    const duration = performance.now() - startTime;\n    this.recordMetric(`api_${endpoint}`, duration);\n    \n    // Log slow API calls (over 1 second)\n    if (duration > 1000) {\n      console.warn(`Slow API call: ${endpoint} took ${duration.toFixed(2)}ms`);\n    }\n  }\n\n  // Track component render times\n  trackRender(componentName: string, renderTime: number) {\n    this.recordMetric(`render_${componentName}`, renderTime);\n    \n    // Log slow renders (over 100ms)\n    if (renderTime > 100) {\n      console.warn(`Slow render: ${componentName} took ${renderTime.toFixed(2)}ms`);\n    }\n  }\n\n  private recordMetric(key: string, value: number) {\n    const existing = this.metrics.get(key) || [];\n    existing.push(value);\n    \n    // Keep only last 10 measurements to avoid memory leaks\n    if (existing.length > 10) {\n      existing.shift();\n    }\n    \n    this.metrics.set(key, existing);\n  }\n\n  // Get performance stats\n  getStats(key: string) {\n    const values = this.metrics.get(key) || [];\n    if (values.length === 0) return null;\n\n    const sum = values.reduce((a, b) => a + b, 0);\n    const avg = sum / values.length;\n    const min = Math.min(...values);\n    const max = Math.max(...values);\n\n    return { avg, min, max, count: values.length };\n  }\n\n  // Get all current metrics\n  getAllStats() {\n    const stats: Record<string, any> = {};\n    for (const [key, _] of Array.from(this.metrics.entries())) {\n      stats[key] = this.getStats(key);\n    }\n    return stats;\n  }\n\n  // Log performance summary (useful for debugging)\n  logSummary() {\n    console.group('üöÄ Performance Summary');\n    const stats = this.getAllStats();\n    \n    Object.entries(stats).forEach(([key, data]) => {\n      if (data && data.avg > 50) { // Only show metrics over 50ms\n        console.log(`${key}: avg ${data.avg.toFixed(1)}ms (min: ${data.min.toFixed(1)}ms, max: ${data.max.toFixed(1)}ms)`);\n      }\n    });\n    \n    console.groupEnd();\n  }\n}\n\n// Singleton instance\nexport const performanceMonitor = PerformanceMonitor.getInstance();\n\n// Hook for tracking component performance\nexport function usePerformanceTracking(componentName: string) {\n  const startTime = performance.now();\n  \n  return {\n    trackRender: () => {\n      const renderTime = performance.now() - startTime;\n      performanceMonitor.trackRender(componentName, renderTime);\n    },\n    trackPageLoad: () => performanceMonitor.trackPageLoad(componentName)\n  };\n}\n\n// Enhanced API request wrapper with performance tracking\nexport async function trackAPIRequest(url: string, fetchFn: () => Promise<Response>): Promise<Response> {\n  const startTime = performance.now();\n  try {\n    const response = await fetchFn();\n    performanceMonitor.trackAPICall(url, startTime);\n    return response;\n  } catch (error) {\n    performanceMonitor.trackAPICall(`${url}_error`, startTime);\n    throw error;\n  }\n}","size_bytes":3736},"client/src/pages/exchange-only.tsx":{"content":"import { Header } from \"@/components/header\";\nimport { ExchangeWidget } from \"@/components/exchange-widget\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function ExchangeOnly() {\n  const { t } = useTranslation();\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-purple-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 relative\">\n      {/* Falling Stars Background Effect */}\n      <div className=\"falling-stars-container\">\n        <div className=\"falling-star\"></div>\n        <div className=\"falling-star\"></div>\n        <div className=\"falling-star\"></div>\n        <div className=\"falling-star\"></div>\n        <div className=\"falling-star\"></div>\n        <div className=\"falling-star\"></div>\n        <div className=\"falling-star\"></div>\n      </div>\n      \n      <Header />\n      \n      {/* Simple, clean exchange page */}\n      <main className=\"min-h-[calc(100vh-4rem)] relative z-10\">\n        <div className=\"container mx-auto px-4 py-8 sm:py-12\">\n          {/* Simple, minimal header */}\n          <div className=\"text-center mb-8 sm:mb-12\">\n            <h1 className=\"text-3xl sm:text-4xl font-bold text-slate-900 dark:text-white mb-2\" data-testid=\"text-exchange-title\">\n              {t('exchange.pageTitle')}\n            </h1>\n            <p className=\"text-base sm:text-lg text-slate-600 dark:text-slate-300 max-w-xl mx-auto\" data-testid=\"text-exchange-description\">\n              {t('exchange.pageDescription')}\n            </p>\n          </div>\n          \n          {/* Exchange Widget - Main Focus */}\n          <div className=\"flex justify-center\">\n            <ExchangeWidget />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":1731},"types/qrcode.d.ts":{"content":"declare module 'qrcode.js' {\n  interface QRCodeOptions {\n    text: string;\n    width?: number;\n    height?: number;\n    colorDark?: string;\n    colorLight?: string;\n    correctLevel?: QRCode.CorrectLevel;\n  }\n\n  class QRCode {\n    constructor(element: HTMLElement, options: QRCodeOptions);\n    \n    static CorrectLevel: {\n      L: number;\n      M: number;\n      Q: number;\n      H: number;\n    };\n  }\n\n  export = QRCode;\n}","size_bytes":422},"server/services/email.ts":{"content":"import nodemailer from 'nodemailer';\nimport type { Transporter } from 'nodemailer';\n\ninterface EmailConfig {\n  host: string;\n  port: number;\n  secure: boolean;\n  auth: {\n    user: string;\n    pass: string;\n  };\n}\n\nclass EmailService {\n  private transporter: Transporter | null = null;\n  private isConfigured = false;\n\n  constructor() {\n    this.initialize();\n  }\n\n  private initialize() {\n    const requiredEnvVars = ['SMTP_HOST', 'SMTP_PORT', 'SMTP_USER', 'SMTP_PASS'];\n    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\n\n    if (missingVars.length > 0) {\n      console.warn(`‚ö†Ô∏è  Email service not configured - missing environment variables: ${missingVars.join(', ')}`);\n      console.warn('‚ÑπÔ∏è  To enable email functionality, set the following environment variables:');\n      console.warn('   - SMTP_HOST (e.g., smtp.gmail.com)');\n      console.warn('   - SMTP_PORT (e.g., 587)');\n      console.warn('   - SMTP_USER (your email)');\n      console.warn('   - SMTP_PASS (your password or app password)');\n      console.warn('   - SMTP_FROM (optional, defaults to SMTP_USER)');\n      return;\n    }\n\n    const config: EmailConfig = {\n      host: process.env.SMTP_HOST!,\n      port: parseInt(process.env.SMTP_PORT!, 10),\n      secure: process.env.SMTP_PORT === '465', // true for 465, false for other ports\n      auth: {\n        user: process.env.SMTP_USER!,\n        pass: process.env.SMTP_PASS!,\n      },\n    };\n\n    try {\n      this.transporter = nodemailer.createTransport(config);\n      this.isConfigured = true;\n      console.log('‚úÖ Email service initialized successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize email service:', error);\n    }\n  }\n\n  async sendActivationEmail(to: string, login: string, activationToken: string): Promise<boolean> {\n    if (!this.isConfigured || !this.transporter) {\n      console.warn('‚ö†Ô∏è  Email service not configured - activation email not sent');\n      return false;\n    }\n\n    const baseUrl = process.env.REPLIT_DOMAINS \n      ? `https://${process.env.REPLIT_DOMAINS.split(',')[0]}`\n      : 'http://localhost:5000';\n    \n    const activationUrl = `${baseUrl}/activate?token=${activationToken}`;\n    const fromEmail = process.env.SMTP_FROM || process.env.SMTP_USER;\n\n    const mailOptions = {\n      from: {\n        name: 'Exchange Platform',\n        address: fromEmail!\n      },\n      to,\n      subject: 'Activate Your Account',\n      html: `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n          <title>Account Activation</title>\n        </head>\n        <body style=\"margin: 0; padding: 0; background-color: #f8fafc; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\">\n          <div style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\">\n            \n            <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 30px; text-align: center;\">\n              <h1 style=\"color: #ffffff; margin: 0; font-size: 28px; font-weight: 600;\">Welcome to Exchange Platform!</h1>\n            </div>\n            \n            <div style=\"padding: 40px 30px;\">\n              <h2 style=\"color: #1f2937; margin: 0 0 20px; font-size: 24px; font-weight: 600;\">Hi ${login},</h2>\n              \n              <p style=\"color: #4b5563; margin: 0 0 20px; font-size: 16px; line-height: 1.6;\">\n                Thanks for registering! To complete your account setup and start using our exchange platform, \n                please activate your account by clicking the button below.\n              </p>\n              \n              <div style=\"text-align: center; margin: 30px 0;\">\n                <a href=\"${activationUrl}\" \n                   style=\"display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); \n                          color: #ffffff; text-decoration: none; padding: 12px 30px; \n                          border-radius: 8px; font-weight: 600; font-size: 16px;\n                          transition: transform 0.2s ease;\">\n                  Activate Account\n                </a>\n              </div>\n              \n              <p style=\"color: #6b7280; margin: 20px 0 0; font-size: 14px; line-height: 1.5;\">\n                If the button doesn't work, you can copy and paste this link into your browser:\n              </p>\n              <p style=\"color: #3b82f6; margin: 10px 0; font-size: 14px; word-break: break-all;\">\n                ${activationUrl}\n              </p>\n              \n              <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;\">\n                <p style=\"color: #9ca3af; margin: 0; font-size: 13px;\">\n                  This activation link expires in 24 hours for security reasons. \n                  If you didn't create this account, please ignore this email.\n                </p>\n              </div>\n            </div>\n          </div>\n        </body>\n        </html>\n      `,\n      text: `Welcome to Exchange Platform!\n      \nHi ${login},\n\nThanks for registering! To complete your account setup, please activate your account by visiting this link:\n\n${activationUrl}\n\nThis activation link expires in 24 hours for security reasons.\n\nIf you didn't create this account, please ignore this email.\n\nBest regards,\nExchange Platform Team`\n    };\n\n    try {\n      const result = await this.transporter.sendMail(mailOptions);\n      console.log(`‚úÖ Activation email sent successfully to ${to}:`, result.messageId);\n      return true;\n    } catch (error) {\n      console.error(`‚ùå Failed to send activation email to ${to}:`, error);\n      return false;\n    }\n  }\n\n  async verifyConnection(): Promise<boolean> {\n    if (!this.transporter) {\n      return false;\n    }\n\n    try {\n      await this.transporter.verify();\n      console.log('‚úÖ Email service connection verified');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Email service connection failed:', error);\n      return false;\n    }\n  }\n\n  isEnabled(): boolean {\n    return this.isConfigured;\n  }\n}\n\n// Create singleton instance\nexport const emailService = new EmailService();","size_bytes":6284},"client/src/pages/order-confirmation.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Header } from \"@/components/header\";\nimport { Footer } from \"@/components/footer\";\nimport { Copy, ArrowLeft, CheckCircle, Clock, Wallet } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport QRCode from \"qrcode\";\nimport type { Currency } from \"@shared/schema\";\n\ninterface OrderData {\n  fromCurrency: string;\n  toCurrency: string;\n  fromAmount: string;\n  rateType: \"fixed\" | \"float\";\n  exchangeRate: number;\n  receiveAmount: string;\n  recipientAddress?: string;\n  cardNumberMasked?: string;\n  contactEmail?: string;\n  cardDataHash?: string;\n}\n\ninterface TempCardData {\n  cardNumber: string;\n  bankName: string;\n  holderName: string;\n}\n\n// Type guard for card details\nconst isCardPayout = (toCurrency: string): boolean => {\n  return toCurrency.startsWith(\"card-\");\n};\n\nexport default function OrderConfirmation() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const qrCodeRef = useRef<HTMLDivElement>(null);\n  \n  const [orderData, setOrderData] = useState<OrderData | null>(null);\n  const [tempCardData, setTempCardData] = useState<TempCardData | null>(null);\n  const [depositAddress, setDepositAddress] = useState<string>(\"\");\n  const [timeRemaining, setTimeRemaining] = useState<number>(600); // 10 minutes for fixed rate\n  const [qrCodeGenerated, setQrCodeGenerated] = useState(false);\n  const [isGeneratingAddress, setIsGeneratingAddress] = useState(false);\n\n  // Get currencies for display\n  const { data: currencies = [] } = useQuery<Currency[]>({\n    queryKey: ['/api/currencies'],\n  });\n\n  // Generate unique deposit address based on currency and time\n  const generateDepositAddress = (currency: string) => {\n    // Generate a deterministic but unique address based on currency and timestamp\n    const timestamp = Date.now();\n    const userSuffix = user?.id ? user.id.slice(-4) : '0000';\n    \n    if (currency.includes('usdt-trc20')) {\n      // Generate TRC20-like address\n      const baseAddress = 'TQn9Y2khEsLMWtWsMab9C5zsdnUr95JkVt';\n      const uniquePart = (timestamp % 10000).toString().padStart(4, '0') + userSuffix;\n      return baseAddress.slice(0, -8) + uniquePart;\n    } else if (currency.includes('btc')) {\n      // Generate BTC-like address  \n      return 'bc1q' + (timestamp % 1000000).toString(16) + userSuffix + 'example';\n    } else {\n      // Default to TRC20-like for other currencies\n      const baseAddress = 'TQn9Y2khEsLMWtWsMab9C5zsdnUr95JkVt';\n      const uniquePart = (timestamp % 10000).toString().padStart(4, '0') + userSuffix;\n      return baseAddress.slice(0, -8) + uniquePart;\n    }\n  };\n\n  useEffect(() => {\n    // Get order data from sessionStorage\n    const savedData = sessionStorage.getItem('orderConfirmationData');\n    const tempCardDataString = sessionStorage.getItem('tempCardData');\n    \n    if (savedData) {\n      try {\n        const parsedData = JSON.parse(savedData) as OrderData;\n        setOrderData(parsedData);\n        \n        // Generate unique deposit address\n        const uniqueAddress = generateDepositAddress(parsedData.fromCurrency);\n        setDepositAddress(uniqueAddress);\n        \n        // Handle temporary card data securely\n        if (tempCardDataString && parsedData.cardDataHash) {\n          try {\n            const tempCard = JSON.parse(tempCardDataString) as TempCardData;\n            setTempCardData(tempCard);\n            // Clear sensitive data immediately after reading\n            sessionStorage.removeItem('tempCardData');\n          } catch (cardError) {\n            console.error('Failed to parse temp card data:', cardError);\n          }\n        }\n      } catch (error) {\n        console.error('Failed to parse order data:', error);\n        toast({\n          title: \"Error\",\n          description: \"Invalid order data. Redirecting to home page.\",\n          variant: \"destructive\",\n        });\n        setLocation('/');\n      }\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"No order data found. Redirecting to home page.\",\n        variant: \"destructive\",\n      });\n      setLocation('/');\n    }\n  }, [user?.id, setLocation, toast]);\n\n  // Generate QR code when deposit address is available\n  useEffect(() => {\n    if (orderData && depositAddress && qrCodeRef.current && !qrCodeGenerated) {\n      setIsGeneratingAddress(true);\n      try {\n        // Clear any existing QR code\n        qrCodeRef.current.innerHTML = '';\n        \n        // Generate new QR code with the unique deposit address using new qrcode API\n        QRCode.toDataURL(depositAddress, {\n          width: 200,\n          color: { \n            dark: '#000000',\n            light: '#ffffff' \n          },\n          errorCorrectionLevel: 'H'\n        }).then((url: string) => {\n          const img = document.createElement('img');\n          img.src = url;\n          img.style.width = '200px';\n          img.style.height = '200px';\n          img.alt = 'QR Code for Deposit Address';\n          qrCodeRef.current!.appendChild(img);\n          \n          setQrCodeGenerated(true);\n          setIsGeneratingAddress(false);\n        }).catch((error: any) => {\n          console.error('QR code generation failed:', error);\n          setIsGeneratingAddress(false);\n          throw error;\n        });\n      } catch (error) {\n        console.error('Failed to generate QR code:', error);\n        setIsGeneratingAddress(false);\n        toast({\n          title: \"QR Code Error\",\n          description: \"Failed to generate QR code. You can still copy the deposit address.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  }, [orderData, depositAddress, qrCodeGenerated, toast]);\n\n  // Countdown timer for fixed rate\n  useEffect(() => {\n    if (orderData?.rateType === \"fixed\" && timeRemaining > 0) {\n      const timer = setInterval(() => {\n        setTimeRemaining((prev) => Math.max(0, prev - 1));\n      }, 1000);\n      \n      return () => clearInterval(timer);\n    }\n  }, [orderData?.rateType, timeRemaining]);\n\n  const createOrderMutation = useMutation({\n    mutationFn: async () => {\n      if (!orderData) throw new Error(\"No order data available\");\n      \n      const isCardPayoutType = isCardPayout(orderData.toCurrency);\n      \n      const requestData: any = {\n        fromCurrency: orderData.fromCurrency,\n        toCurrency: orderData.toCurrency,\n        fromAmount: orderData.fromAmount,\n        rateType: orderData.rateType,\n        exchangeRate: orderData.exchangeRate, // Use real exchange rate\n        expectedReceiveAmount: orderData.receiveAmount, // Include expected amount\n        contactEmail: orderData.contactEmail || undefined,\n        userId: user?.id,\n        depositAddress: depositAddress, // Include generated deposit address\n      };\n      \n      // Add relevant fields based on payout type\n      if (isCardPayoutType && tempCardData) {\n        requestData.cardDetails = {\n          number: tempCardData.cardNumber,\n          bankName: tempCardData.bankName,\n          holderName: tempCardData.holderName,\n        };\n      } else if (!isCardPayoutType) {\n        requestData.recipientAddress = orderData.recipientAddress || \"\";\n      }\n\n      const response = await apiRequest(\"POST\", \"/api/orders\", requestData);\n      return response.json();\n    },\n    onSuccess: (order) => {\n      // Clear all session storage for security\n      sessionStorage.removeItem('orderConfirmationData');\n      sessionStorage.removeItem('tempCardData'); // Extra safety\n      \n      // Clear sensitive temp data\n      setTempCardData(null);\n      \n      toast({\n        title: \"Order Created Successfully!\",\n        description: `Order ID: ${order.id}. Redirecting to order status...`,\n      });\n      \n      // Use wouter navigation\n      setTimeout(() => {\n        setLocation(`/order-status?id=${order.id}`);\n      }, 1500);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Order Creation Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConfirmOrder = () => {\n    if (orderData?.rateType === \"fixed\" && timeRemaining <= 0) {\n      toast({\n        title: \"Rate Expired\",\n        description: \"The fixed rate has expired. Please go back and get a new quote.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!depositAddress) {\n      toast({\n        title: \"Error\",\n        description: \"Deposit address not ready. Please wait a moment and try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Additional validation for card payments\n    if (orderData && isCardPayout(orderData.toCurrency) && !tempCardData && !orderData.cardDataHash) {\n      toast({\n        title: \"Error\",\n        description: \"Card payment data is missing. Please go back and try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createOrderMutation.mutate();\n  };\n\n  const handleGoBack = () => {\n    // Use wouter navigation instead of window.history\n    setLocation('/');\n  };\n\n  const copyToClipboard = async (text: string, label: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: `${label} copied to clipboard`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  // Get currency details for display\n  const fromCurrency = currencies.find(c => c.id === orderData?.fromCurrency);\n  const toCurrency = currencies.find(c => c.id === orderData?.toCurrency);\n  \n  // Use REAL calculations from exchange widget - NO MORE MOCK DATA!\n  const fromAmount = parseFloat(orderData?.fromAmount || \"0\");\n  const exchangeRate = orderData?.exchangeRate || 0; // Use REAL exchange rate from widget\n  const receiveAmount = parseFloat(orderData?.receiveAmount || \"0\"); // Use REAL calculated amount\n  \n  // Calculate fees for display (should match exchange widget logic exactly)\n  const fee = fromAmount * 0.005; // 0.5% fee\n  const networkFee = orderData?.fromCurrency?.includes(\"usdt\") ? 2 : 0.0001;\n\n  if (!orderData) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-6 sm:py-12 max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-6 sm:mb-8\">\n          <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold mb-2 sm:mb-4\" data-testid=\"text-page-title\">\n            {t('orderConfirmation.title', 'Confirm Your Exchange')}\n          </h1>\n          <p className=\"text-muted-foreground text-base sm:text-lg\" data-testid=\"text-page-subtitle\">\n            {t('orderConfirmation.subtitle', 'Review the details and complete your order')}\n          </p>\n        </div>\n\n        {/* Fixed Rate Timer */}\n        {orderData.rateType === \"fixed\" && (\n          <Card className=\"mb-6 border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-950/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-5 w-5 text-orange-600 dark:text-orange-400\" />\n                  <span className=\"text-sm font-medium text-orange-800 dark:text-orange-200\">\n                    {t('orderConfirmation.rateExpiry', 'Rate expires in:')}\n                  </span>\n                </div>\n                <Badge \n                  variant={timeRemaining > 60 ? \"default\" : \"destructive\"}\n                  className=\"text-sm font-mono\"\n                  data-testid=\"badge-time-remaining\"\n                >\n                  {formatTime(timeRemaining)}\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"grid lg:grid-cols-2 gap-6 sm:gap-8\">\n          {/* Exchange Details */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <span>{t('orderConfirmation.exchangeDetails', 'Exchange Details')}</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\" data-testid=\"row-send-amount\">\n                  <span className=\"text-muted-foreground\">You Send:</span>\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold\">{orderData.fromAmount} {fromCurrency?.symbol || orderData.fromCurrency}</div>\n                    <div className=\"text-xs text-muted-foreground\">{fromCurrency?.name}</div>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"flex justify-between items-center\" data-testid=\"row-receive-amount\">\n                  <span className=\"text-muted-foreground\">You Receive:</span>\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold\">{receiveAmount.toFixed(2)} {toCurrency?.symbol || orderData.toCurrency.replace('card-', '').toUpperCase()}</div>\n                    <div className=\"text-xs text-muted-foreground\">{toCurrency?.name || orderData.toCurrency}</div>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"text-xs text-muted-foreground space-y-1\">\n                  <div className=\"flex justify-between\">\n                    <span>Service Fee (0.5%):</span>\n                    <span>-{fee.toFixed(4)} {fromCurrency?.symbol}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Network Fee:</span>\n                    <span>-{networkFee.toFixed(4)} {fromCurrency?.symbol}</span>\n                  </div>\n                  <div className=\"flex justify-between font-medium\">\n                    <span>Exchange Rate:</span>\n                    <span>1 {fromCurrency?.symbol} = {exchangeRate} {toCurrency?.symbol || orderData.toCurrency.replace('card-', '').toUpperCase()}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payout Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('orderConfirmation.payoutDetails', 'Payout Details')}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {isCardPayout(orderData.toCurrency) ? (\n                  <>\n                    <div className=\"flex justify-between\" data-testid=\"row-card-number\">\n                      <span className=\"text-muted-foreground\">Card Number:</span>\n                      <span className=\"font-mono\">{orderData.cardNumberMasked || \"****\"}</span>\n                    </div>\n                    {tempCardData && (\n                      <>\n                        <div className=\"flex justify-between\" data-testid=\"row-bank-name\">\n                          <span className=\"text-muted-foreground\">Bank:</span>\n                          <span>{tempCardData.bankName}</span>\n                        </div>\n                        <div className=\"flex justify-between\" data-testid=\"row-holder-name\">\n                          <span className=\"text-muted-foreground\">Holder Name:</span>\n                          <span>{tempCardData.holderName}</span>\n                        </div>\n                      </>\n                    )}\n                    {!tempCardData && (\n                      <div className=\"text-sm text-muted-foreground italic\">\n                        Card details will be verified during order creation\n                      </div>\n                    )}\n                  </>\n                ) : (\n                  <div className=\"space-y-2\" data-testid=\"row-recipient-address\">\n                    <div className=\"text-muted-foreground\">Recipient Address:</div>\n                    <div className=\"font-mono text-sm bg-muted p-2 rounded break-all\">\n                      {orderData.recipientAddress}\n                    </div>\n                  </div>\n                )}\n                \n                {orderData.contactEmail && (\n                  <div className=\"flex justify-between\" data-testid=\"row-contact-email\">\n                    <span className=\"text-muted-foreground\">Contact Email:</span>\n                    <span>{orderData.contactEmail}</span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Deposit Instructions */}\n          <div className=\"space-y-6\">\n            <Card className=\"border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950/20\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Wallet className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                  <span className=\"text-green-800 dark:text-green-200\">\n                    {t('orderConfirmation.depositInstructions', 'Deposit Instructions')}\n                  </span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-green-700 dark:text-green-300 mb-4\">\n                    {t('orderConfirmation.depositMessage', 'After confirming, send your crypto to this address:')}\n                  </p>\n                  \n                  {/* QR Code */}\n                  <div className=\"flex justify-center mb-4\">\n                    {isGeneratingAddress ? (\n                      <div className=\"p-4 bg-white rounded-lg shadow-inner w-[232px] h-[232px] flex items-center justify-center\">\n                        <div className=\"text-center\">\n                          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n                          <div className=\"text-sm text-muted-foreground\">Generating QR Code...</div>\n                        </div>\n                      </div>\n                    ) : (\n                      <div \n                        ref={qrCodeRef}\n                        className=\"p-4 bg-white rounded-lg shadow-inner min-h-[232px] min-w-[232px] flex items-center justify-center\"\n                        data-testid=\"qr-code-container\"\n                      >\n                        {!qrCodeGenerated && depositAddress && (\n                          <div className=\"text-center\">\n                            <div className=\"text-sm text-muted-foreground\">Loading QR Code...</div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Deposit Address */}\n                  <div className=\"space-y-2\">\n                    <div className=\"text-xs text-muted-foreground\">Deposit Address:</div>\n                    <div className=\"bg-white dark:bg-slate-800 p-3 rounded border\">\n                      {depositAddress ? (\n                        <div className=\"font-mono text-sm break-all\" data-testid=\"text-deposit-address\">\n                          {depositAddress}\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center space-x-2 justify-center py-2\">\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n                          <span className=\"text-sm text-muted-foreground\">Generating address...</span>\n                        </div>\n                      )}\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"w-full\"\n                      onClick={() => copyToClipboard(depositAddress, \"Deposit address\")}\n                      disabled={!depositAddress || isGeneratingAddress}\n                      data-testid=\"button-copy-address\"\n                    >\n                      <Copy className=\"h-4 w-4 mr-2\" />\n                      {t('common.copy', 'Copy Address')}\n                    </Button>\n                  </div>\n                  \n                  <div className=\"text-xs text-muted-foreground mt-4 space-y-1\">\n                    <p>‚Ä¢ {t('orderConfirmation.instruction1', 'Send only USDT TRC20 to this address')}</p>\n                    <p>‚Ä¢ {t('orderConfirmation.instruction2', 'Minimum amount: 10 USDT')}</p>\n                    <p>‚Ä¢ {t('orderConfirmation.instruction3', 'Processing time: 5-30 minutes')}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mt-8 sm:mt-12\">\n          <Button\n            variant=\"outline\"\n            onClick={handleGoBack}\n            className=\"flex-1 sm:flex-initial\"\n            disabled={createOrderMutation.isPending}\n            data-testid=\"button-go-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            {t('common.goBack', 'Go Back')}\n          </Button>\n          \n          <Button\n            onClick={handleConfirmOrder}\n            className=\"flex-1\"\n            disabled={createOrderMutation.isPending || (orderData.rateType === \"fixed\" && timeRemaining <= 0)}\n            data-testid=\"button-confirm-order\"\n          >\n            {createOrderMutation.isPending ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                {t('orderConfirmation.creating', 'Creating Order...')}\n              </>\n            ) : (\n              t('orderConfirmation.confirmOrder', 'Confirm Order')\n            )}\n          </Button>\n        </div>\n\n        {/* Security Notice */}\n        <div className=\"text-center mt-8 sm:mt-12 text-xs text-muted-foreground max-w-2xl mx-auto\">\n          <p>\n            {t('orderConfirmation.securityNotice', \n              'Your transaction is secure and encrypted. Never share your private keys or seed phrases with anyone.'\n            )}\n          </p>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":23453},"client/src/pages/activate.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle, XCircle, Clock, Mail, AlertTriangle } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\ntype ActivationStatus = \"loading\" | \"success\" | \"error\" | \"expired\" | \"invalid\";\n\ninterface ActivationResponse {\n  success: boolean;\n  message: string;\n  user?: {\n    id: string;\n    email: string;\n    firstName: string;\n    isActive: boolean;\n  };\n  error?: string;\n}\n\nexport default function ActivatePage() {\n  const [, setLocation] = useLocation();\n  const [status, setStatus] = useState<ActivationStatus>(\"loading\");\n  const [message, setMessage] = useState<string>(\"\");\n  const [userEmail, setUserEmail] = useState<string>(\"\");\n\n  useEffect(() => {\n    const activateAccount = async () => {\n      // Get token from URL query params\n      const urlParams = new URLSearchParams(window.location.search);\n      const token = urlParams.get(\"token\");\n\n      if (!token) {\n        setStatus(\"invalid\");\n        setMessage(\"Activation token is missing. Please check your email link.\");\n        return;\n      }\n\n      try {\n        const response = await fetch(`/api/auth/activate?token=${encodeURIComponent(token)}`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n        const result: ActivationResponse = await response.json();\n\n        if (response.ok && result.success) {\n          setStatus(\"success\");\n          setMessage(result.message || \"Your account has been activated successfully!\");\n          setUserEmail(result.user?.email || \"\");\n        } else {\n          // Handle different error cases\n          if (response.status === 400 && result.error?.includes(\"expired\")) {\n            setStatus(\"expired\");\n            setMessage(\"Your activation token has expired. Please register again.\");\n          } else if (response.status === 404 || result.error?.includes(\"Invalid\")) {\n            setStatus(\"invalid\");\n            setMessage(\"Invalid or already used activation token.\");\n          } else {\n            setStatus(\"error\");\n            setMessage(result.error || \"Account activation failed. Please try again.\");\n          }\n        }\n      } catch (error) {\n        console.error(\"Activation error:\", error);\n        setStatus(\"error\");\n        setMessage(\"Network error. Please check your connection and try again.\");\n      }\n    };\n\n    activateAccount();\n  }, []);\n\n  const getStatusIcon = () => {\n    switch (status) {\n      case \"loading\":\n        return (\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        );\n      case \"success\":\n        return <CheckCircle className=\"h-8 w-8 text-green-600 dark:text-green-400\" />;\n      case \"error\":\n        return <XCircle className=\"h-8 w-8 text-red-600 dark:text-red-400\" />;\n      case \"expired\":\n        return <Clock className=\"h-8 w-8 text-amber-600 dark:text-amber-400\" />;\n      case \"invalid\":\n        return <AlertTriangle className=\"h-8 w-8 text-orange-600 dark:text-orange-400\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusTitle = () => {\n    switch (status) {\n      case \"loading\":\n        return \"Activating Account...\";\n      case \"success\":\n        return \"Account Activated!\";\n      case \"error\":\n        return \"Activation Failed\";\n      case \"expired\":\n        return \"Token Expired\";\n      case \"invalid\":\n        return \"Invalid Token\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (status) {\n      case \"loading\":\n        return \"text-blue-600 dark:text-blue-400\";\n      case \"success\":\n        return \"text-green-600 dark:text-green-400\";\n      case \"error\":\n        return \"text-red-600 dark:text-red-400\";\n      case \"expired\":\n        return \"text-amber-600 dark:text-amber-400\";\n      case \"invalid\":\n        return \"text-orange-600 dark:text-orange-400\";\n      default:\n        return \"text-gray-600 dark:text-gray-400\";\n    }\n  };\n\n  const getBackgroundColor = () => {\n    switch (status) {\n      case \"success\":\n        return \"bg-green-100 dark:bg-green-900\";\n      case \"error\":\n        return \"bg-red-100 dark:bg-red-900\";\n      case \"expired\":\n        return \"bg-amber-100 dark:bg-amber-900\";\n      case \"invalid\":\n        return \"bg-orange-100 dark:bg-orange-900\";\n      default:\n        return \"bg-blue-100 dark:bg-blue-900\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        <Card className=\"bg-white/10 border-white/20 backdrop-blur text-center\">\n          <CardHeader>\n            <div className={`mx-auto mb-4 p-3 ${getBackgroundColor()} rounded-full w-16 h-16 flex items-center justify-center`}>\n              {getStatusIcon()}\n            </div>\n            <CardTitle className={`text-2xl text-white ${getStatusColor()}`}>\n              {getStatusTitle()}\n            </CardTitle>\n            <CardDescription className=\"text-gray-300\">\n              {status === \"loading\" && \"Please wait while we activate your account...\"}\n              {status === \"success\" && \"Welcome to our crypto exchange platform!\"}\n              {status === \"error\" && \"Something went wrong during activation\"}\n              {status === \"expired\" && \"Your activation link has expired\"}\n              {status === \"invalid\" && \"The activation link is not valid\"}\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {message && (\n              <Alert \n                variant={status === \"success\" ? \"default\" : \"destructive\"}\n                className={status === \"success\" ? \"border-green-200 dark:border-green-800\" : \"\"}\n                data-testid={`alert-${status}`}\n              >\n                <AlertDescription className={status === \"success\" ? \"text-green-800 dark:text-green-200\" : \"\"}>\n                  {message}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {status === \"success\" && userEmail && (\n              <div className=\"p-4 bg-green-100 dark:bg-green-900/30 rounded-lg\">\n                <Mail className=\"mx-auto h-6 w-6 text-green-600 dark:text-green-400 mb-2\" />\n                <p className=\"text-sm text-green-800 dark:text-green-200\">\n                  Account activated for: <strong>{userEmail}</strong>\n                </p>\n              </div>\n            )}\n\n            {status === \"expired\" && (\n              <div className=\"p-4 bg-amber-100 dark:bg-amber-900/30 rounded-lg\">\n                <Clock className=\"mx-auto h-6 w-6 text-amber-600 dark:text-amber-400 mb-2\" />\n                <p className=\"text-sm text-amber-800 dark:text-amber-200\">\n                  Activation tokens expire after 24 hours for security reasons.\n                </p>\n              </div>\n            )}\n\n            <div className=\"pt-4 space-y-3\">\n              {status === \"success\" && (\n                <Button\n                  onClick={() => setLocation(\"/admin/login\")}\n                  className=\"w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-semibold\"\n                  data-testid=\"button-login\"\n                >\n                  Sign In Now\n                </Button>\n              )}\n\n              {(status === \"expired\" || status === \"invalid\") && (\n                <Button\n                  onClick={() => setLocation(\"/register\")}\n                  className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold\"\n                  data-testid=\"button-register-again\"\n                >\n                  Register Again\n                </Button>\n              )}\n\n              {status === \"error\" && (\n                <Button\n                  onClick={() => window.location.reload()}\n                  variant=\"outline\"\n                  className=\"w-full bg-white/10 border-white/20 text-white hover:bg-white/20\"\n                  data-testid=\"button-retry\"\n                >\n                  Try Again\n                </Button>\n              )}\n\n              <Button\n                onClick={() => setLocation(\"/\")}\n                variant=\"ghost\"\n                className=\"w-full text-white hover:bg-white/10\"\n                data-testid=\"button-home\"\n              >\n                Return to Home\n              </Button>\n\n              {status === \"success\" && (\n                <div className=\"text-center text-sm text-gray-300 pt-2\">\n                  <p>You can now access all platform features!</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9028},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { UserPlus, AlertCircle, CheckCircle, Mail } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { registerSchema, type RegisterRequest } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function RegisterPage() {\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>(\"\");\n  const [success, setSuccess] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<RegisterRequest>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      login: \"\",\n      email: \"\",\n      password: \"\",\n      passwordConfirm: \"\",\n    },\n  });\n\n  const onSubmit = async (data: RegisterRequest) => {\n    setIsLoading(true);\n    setError(\"\");\n    setSuccess(false);\n\n    try {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        setSuccess(true);\n        toast({\n          title: \"Registration Successful!\",\n          description: \"Please check your email to activate your account.\",\n        });\n        \n        // Reset form\n        form.reset();\n      } else {\n        throw new Error(result.error || \"Registration failed\");\n      }\n    } catch (err: any) {\n      console.error(\"Registration error:\", err);\n      setError(err.message || \"Registration failed. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 p-4\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <Card className=\"bg-white/10 border-white/20 backdrop-blur text-center\">\n            <CardHeader>\n              <div className=\"mx-auto mb-4 p-3 bg-green-100 dark:bg-green-900 rounded-full w-16 h-16 flex items-center justify-center\">\n                <CheckCircle className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <CardTitle className=\"text-2xl text-white\">Check Your Email!</CardTitle>\n              <CardDescription className=\"text-gray-300\">\n                We've sent you an activation link to complete your registration.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-4 bg-blue-100 dark:bg-blue-900/30 rounded-lg\">\n                <Mail className=\"mx-auto h-8 w-8 text-blue-600 dark:text-blue-400 mb-2\" />\n                <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                  Please click the activation link in your email to activate your account.\n                  The link expires in 24 hours.\n                </p>\n              </div>\n              \n              <div className=\"pt-4 space-y-3\">\n                <Button\n                  onClick={() => setLocation(\"/\")}\n                  variant=\"outline\"\n                  className=\"w-full bg-white/10 border-white/20 text-white hover:bg-white/20\"\n                  data-testid=\"button-home\"\n                >\n                  Return to Home\n                </Button>\n                <Button\n                  onClick={() => {\n                    setSuccess(false);\n                    setError(\"\");\n                  }}\n                  variant=\"ghost\"\n                  className=\"w-full text-white hover:bg-white/10\"\n                  data-testid=\"button-register-another\"\n                >\n                  Register Another Account\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        <div className=\"text-center\">\n          <UserPlus className=\"mx-auto h-12 w-12 text-blue-400\" />\n          <h2 className=\"mt-6 text-3xl font-bold text-white\">\n            Create Account\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-300\">\n            Join our crypto exchange platform\n          </p>\n        </div>\n\n        <Card className=\"bg-white/10 border-white/20 backdrop-blur\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Registration</CardTitle>\n            <CardDescription className=\"text-gray-300\">\n              Fill in your details to create a new account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {error && (\n              <Alert variant=\"destructive\" className=\"mb-4\" data-testid=\"alert-error\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"login\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Login</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"text\"\n                          placeholder=\"Enter your login\"\n                          className=\"bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-500 h-12 sm:h-10 text-base sm:text-sm\"\n                          data-testid=\"input-login\"\n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-red-400\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"your@email.com\"\n                          className=\"bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-500 h-12 sm:h-10 text-base sm:text-sm\"\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-red-400\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                          className=\"bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-500 h-12 sm:h-10 text-base sm:text-sm\"\n                          data-testid=\"input-password\"\n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-red-400\" />\n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        At least 8 characters with uppercase, lowercase, and number\n                      </p>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"passwordConfirm\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-white\">Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                          className=\"bg-white/10 border-white/20 text-white placeholder-gray-400 focus:border-blue-500 h-12 sm:h-10 text-base sm:text-sm\"\n                          data-testid=\"input-password-confirm\"\n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-red-400\" />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"pt-4 space-y-3\">\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold h-12 sm:h-10 text-base sm:text-sm\"\n                    data-testid=\"button-register\"\n                  >\n                    {isLoading ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Creating Account...\n                      </>\n                    ) : (\n                      \"Create Account\"\n                    )}\n                  </Button>\n\n                  <div className=\"text-center text-sm text-gray-300\">\n                    Already have an account?{\" \"}\n                    <Link \n                      href=\"/admin/login\"\n                      className=\"text-blue-400 hover:text-blue-300 font-medium\"\n                      data-testid=\"link-login\"\n                    >\n                      Sign in here\n                    </Link>\n                  </div>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10586},"server/middleware/admin-logger.ts":{"content":"import type { Request, RequestHandler } from 'express';\nimport { storage } from '../storage';\nimport type { InsertAdminLog } from '@shared/schema';\n\nexport interface AdminActionRequest extends Request {\n  user?: any;\n  adminAction?: {\n    action: string;\n    target: string;\n    targetId?: string;\n    description: string;\n    metadata?: any;\n  };\n}\n\nexport const logAdminAction = (\n  action: string,\n  target: string,\n  description: string\n): RequestHandler => {\n  return async (req: AdminActionRequest, res, next) => {\n    // Store action details for later logging\n    req.adminAction = {\n      action,\n      target,\n      description,\n      metadata: {\n        method: req.method,\n        path: req.path,\n        // SECURITY: Exclude req.body completely to prevent secret leaks\n        params: req.params,\n        query: req.query,\n        userAgent: req.get('User-Agent')\n      }\n    };\n\n    // Continue to the actual route handler\n    next();\n  };\n};\n\nexport const executeAdminLog: RequestHandler = async (req: AdminActionRequest, res, next) => {\n  const originalSend = res.send;\n  \n  // Override res.send to capture response and log action\n  res.send = function(data: any) {\n    // Only log if action was successful (not an error response)\n    if (req.adminAction && res.statusCode >= 200 && res.statusCode < 300) {\n      const user = req.user;\n      // Fix: Use req.user.id (from database) instead of req.user.claims.sub\n      const adminId = user?.id || user?.claims?.sub;\n      \n      if (adminId) {\n        const logData: InsertAdminLog = {\n          adminId: adminId.toString(),\n          action: req.adminAction.action,\n          target: req.adminAction.target,\n          targetId: req.adminAction.targetId || req.params.id || null,\n          description: req.adminAction.description,\n          metadata: {\n            ...req.adminAction.metadata,\n            responseStatus: res.statusCode,\n            timestamp: new Date().toISOString()\n          },\n          ipAddress: req.ip || req.connection.remoteAddress || null,\n          userAgent: req.get('User-Agent') || null\n        };\n\n        // Log asynchronously to not block response\n        storage.createAdminLog(logData).catch(error => {\n          console.error('Failed to log admin action:', error);\n        });\n      } else {\n        console.error('Admin log failed: No admin ID found in request');\n      }\n    }\n\n    // Call original send method\n    return originalSend.call(this, data);\n  };\n\n  next();\n};\n\n// Helper function to update targetId after creation\nexport const updateAdminLogTargetId = (req: AdminActionRequest, targetId: string) => {\n  if (req.adminAction) {\n    req.adminAction.targetId = targetId;\n  }\n};\n\n// Predefined action descriptions for consistency\nexport const AdminActions = {\n  // User actions\n  CREATE_USER: 'create_user',\n  UPDATE_USER: 'update_user', \n  DEACTIVATE_USER: 'deactivate_user',\n  ACTIVATE_USER: 'activate_user',\n  \n  // Wallet actions\n  CREATE_WALLET: 'create_wallet',\n  UPDATE_WALLET: 'update_wallet',\n  DELETE_WALLET: 'delete_wallet',\n  \n  // Currency actions\n  CREATE_CURRENCY: 'create_currency',\n  UPDATE_CURRENCY: 'update_currency',\n  DELETE_CURRENCY: 'delete_currency',\n  \n  // Telegram actions\n  CREATE_TELEGRAM_CONFIG: 'create_telegram_config',\n  UPDATE_TELEGRAM_CONFIG: 'update_telegram_config',\n  DELETE_TELEGRAM_CONFIG: 'delete_telegram_config',\n  \n  // Exchange method actions\n  CREATE_EXCHANGE_METHOD: 'create_exchange_method',\n  UPDATE_EXCHANGE_METHOD: 'update_exchange_method',\n  DELETE_EXCHANGE_METHOD: 'delete_exchange_method',\n  \n  // Settings actions\n  UPDATE_PLATFORM_SETTING: 'update_platform_setting'\n} as const;\n\nexport const AdminTargets = {\n  USER: 'user',\n  CURRENCY: 'currency',\n  WALLET: 'wallet',\n  TELEGRAM: 'telegram',\n  EXCHANGE_METHOD: 'exchange_method',\n  PLATFORM_SETTING: 'platform_setting'\n} as const;","size_bytes":3850},"server/services/encryption.ts":{"content":"import { createCipheriv, createDecipheriv, randomBytes, createHash } from 'crypto';\n\nexport class EncryptionService {\n  private static readonly ALGORITHM = 'aes-256-cbc';\n  private readonly encryptionKey: Buffer;\n\n  constructor() {\n    const jwtSecret = process.env.JWT_SECRET || 'fallback-secret-key';\n    // Use SHA-256 to derive a proper 32-byte key from any JWT_SECRET\n    this.encryptionKey = createHash('sha256').update(jwtSecret).digest();\n  }\n\n  /**\n   * Encrypts sensitive data like Telegram bot tokens\n   */\n  encrypt(text: string): string {\n    if (!text) return text;\n    \n    try {\n      const iv = randomBytes(16);\n      const cipher = createCipheriv(EncryptionService.ALGORITHM, this.encryptionKey, iv);\n      \n      let encrypted = cipher.update(text, 'utf8', 'hex');\n      encrypted += cipher.final('hex');\n      \n      // Return IV + encrypted data (hex encoded)\n      return iv.toString('hex') + ':' + encrypted;\n    } catch (error) {\n      console.error('Encryption failed:', error);\n      throw new Error('Failed to encrypt sensitive data');\n    }\n  }\n\n  /**\n   * Decrypts sensitive data like Telegram bot tokens\n   */\n  decrypt(encryptedText: string): string {\n    if (!encryptedText || !encryptedText.includes(':')) {\n      // Return as-is for backward compatibility with unencrypted tokens\n      return encryptedText;\n    }\n    \n    try {\n      const [ivHex, encrypted] = encryptedText.split(':');\n      const iv = Buffer.from(ivHex, 'hex');\n      const decipher = createDecipheriv(EncryptionService.ALGORITHM, this.encryptionKey, iv);\n      \n      let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n      decrypted += decipher.final('utf8');\n      \n      return decrypted;\n    } catch (error) {\n      console.error('Decryption failed:', error);\n      // Return original for backward compatibility\n      return encryptedText;\n    }\n  }\n\n  /**\n   * Check if a value is encrypted (contains IV separator)\n   */\n  isEncrypted(value: string): boolean {\n    return !!(value && value.includes(':') && value.split(':').length === 2);\n  }\n}\n\n// Singleton instance\nexport const encryptionService = new EncryptionService();","size_bytes":2144},"client/src/components/local-auth.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { LogIn, UserPlus, Eye, EyeOff, Loader2, Mail, Lock } from \"lucide-react\";\n\ninterface LocalAuthProps {\n  className?: string;\n  onSuccess?: () => void;\n}\n\nexport function LocalAuth({ className = \"\", onSuccess }: LocalAuthProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥\",\n        description: \"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoFlow!\",\n      });\n      // Reload page to refresh auth state\n      window.location.href = '/';\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞\",\n        description: error.message || \"–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email || !password) {\n      toast({\n        title: \"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è\",\n        description: \"Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –≤—Ö–æ–¥–∞\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate({ email, password });\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold text-foreground\">–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</h3>\n        <p className=\"text-sm text-muted-foreground mt-1\">\n          –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞–º–∏\n        </p>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n            Email –∞–¥—Ä–µ—Å\n          </Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"example@email.com\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-email\"\n              disabled={loginMutation.isPending}\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n            –ü–∞—Ä–æ–ª—å\n          </Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              id=\"password\"\n              type={showPassword ? \"text\" : \"password\"}\n              placeholder=\"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"pl-10 pr-10\"\n              data-testid=\"input-password\"\n              disabled={loginMutation.isPending}\n            />\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n              onClick={() => setShowPassword(!showPassword)}\n              data-testid=\"button-toggle-password\"\n            >\n              {showPassword ? (\n                <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n              ) : (\n                <Eye className=\"h-4 w-4 text-muted-foreground\" />\n              )}\n            </Button>\n          </div>\n        </div>\n\n        <Button\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={loginMutation.isPending}\n          data-testid=\"button-login\"\n        >\n          {loginMutation.isPending ? (\n            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n          ) : (\n            <LogIn className=\"w-4 h-4 mr-2\" />\n          )}\n          {loginMutation.isPending ? \"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...\" : \"–í–æ–π—Ç–∏\"}\n        </Button>\n      </form>\n\n      <div className=\"text-center\">\n        <p className=\"text-sm text-muted-foreground\">\n          –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{\" \"}\n          <Link href=\"/register\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-register\">\n            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n          </Link>\n        </p>\n      </div>\n\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <Separator className=\"w-full\" />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-background px-2 text-muted-foreground\">–∏–ª–∏</span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5514},"client/src/components/ActivityTimeline.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Activity, User, Wallet, Settings, AlertCircle, CheckCircle, Clock } from \"lucide-react\";\n\ninterface TimelineActivity {\n  id: string;\n  action: string;\n  target: string;\n  targetId?: string;\n  description: string;\n  adminId: string;\n  adminEmail?: string;\n  timestamp: string;\n  metadata?: any;\n}\n\ninterface ActivityTimelineProps {\n  activities?: TimelineActivity[];\n  isLoading?: boolean;\n  className?: string;\n}\n\n\nexport function ActivityTimeline({ activities = [], isLoading = false, className }: ActivityTimelineProps) {\n  const getActivityIcon = (action: string, target: string) => {\n    if (action.includes('user')) return User;\n    if (action.includes('wallet') || target === 'wallet') return Wallet;\n    if (action.includes('setting') || target === 'platform_setting') return Settings;\n    if (action.includes('deactivate') || action.includes('delete')) return AlertCircle;\n    if (action.includes('create') || action.includes('approve')) return CheckCircle;\n    return Activity;\n  };\n\n  const getActivityColor = (action: string) => {\n    if (action.includes('create') || action.includes('approve')) return 'bg-green-100 dark:bg-green-900/20 text-green-600 dark:text-green-400';\n    if (action.includes('update') || action.includes('modify')) return 'bg-blue-100 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400';\n    if (action.includes('deactivate') || action.includes('delete')) return 'bg-red-100 dark:bg-red-900/20 text-red-600 dark:text-red-400';\n    return 'bg-purple-100 dark:bg-purple-900/20 text-purple-600 dark:text-purple-400';\n  };\n\n  const getActionBadge = (action: string) => {\n    const actionMap: { [key: string]: { label: string; variant: 'default' | 'secondary' | 'destructive' | 'outline' } } = {\n      create_user: { label: 'Created', variant: 'default' },\n      update_user: { label: 'Updated', variant: 'secondary' },\n      deactivate_user: { label: 'Deactivated', variant: 'destructive' },\n      create_wallet: { label: 'Created', variant: 'default' },\n      update_wallet: { label: 'Updated', variant: 'secondary' },\n      update_setting: { label: 'Modified', variant: 'outline' },\n      create_currency: { label: 'Added', variant: 'default' },\n    };\n\n    const badgeInfo = actionMap[action] || { label: 'Action', variant: 'outline' as const };\n    return <Badge variant={badgeInfo.variant} className=\"text-xs\">{badgeInfo.label}</Badge>;\n  };\n\n  const formatTimeAgo = (timestamp: string) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffInMinutes = Math.floor((now.getTime() - time.getTime()) / (1000 * 60));\n\n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={`bg-white dark:bg-gray-800 ${className}`}>\n        <CardHeader>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"h-5 w-5 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n            <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-32 animate-pulse\"></div>\n          </div>\n          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-48 animate-pulse\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"flex items-start space-x-3\">\n                <div className=\"h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 animate-pulse\"></div>\n                  <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2 animate-pulse\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`bg-white dark:bg-gray-800 ${className}`} data-testid=\"activity-timeline\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-gray-900 dark:text-white\">\n          <Clock className=\"h-5 w-5 mr-2 text-orange-600 dark:text-orange-400\" />\n          Recent Activity\n        </CardTitle>\n        <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n          Latest admin actions and system events\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\" data-testid=\"activity-timeline-list\">\n          {!activities || activities.length === 0 ? (\n            <div className=\"flex items-center justify-center py-8 text-gray-500 dark:text-gray-400\">\n              No recent activity to display\n            </div>\n          ) : (\n            activities.map((activity, index) => {\n              const Icon = getActivityIcon(activity.action, activity.target);\n              const iconColor = getActivityColor(activity.action);\n              \n              return (\n                <div \n                  key={activity.id} \n                  className=\"flex items-start space-x-3 pb-4 border-b border-gray-100 dark:border-gray-700 last:border-0 last:pb-0\"\n                  data-testid={`row-activity-${activity.id}`}\n                >\n                <div className={`h-8 w-8 rounded-full flex items-center justify-center ${iconColor}`}>\n                  <Icon className=\"h-4 w-4\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        {getActionBadge(activity.action)}\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          by {activity.adminEmail || `Admin ${activity.adminId}`}\n                        </span>\n                      </div>\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                        {activity.description}\n                      </p>\n                      {activity.targetId && (\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                          Target: {activity.targetId}\n                        </p>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400 flex-shrink-0 ml-2\">\n                      {formatTimeAgo(activity.timestamp)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            );\n          })\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6944},"client/src/components/CurrencyPieChart.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\nimport { PieChart as PieIcon } from \"lucide-react\";\n\ninterface CurrencyData {\n  name: string;\n  value: number;\n  percentage: number;\n  color: string;\n}\n\ninterface CurrencyPieChartProps {\n  data?: CurrencyData[];\n  isLoading?: boolean;\n  className?: string;\n}\n\n\nexport function CurrencyPieChart({ data = [], isLoading = false, className }: CurrencyPieChartProps) {\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={`bg-white dark:bg-gray-800 ${className}`}>\n        <CardHeader>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"h-5 w-5 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n            <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-40 animate-pulse\"></div>\n          </div>\n          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-56 animate-pulse\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const renderCustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload[0]) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-3 shadow-lg\">\n          <p className=\"font-medium text-gray-900 dark:text-white\">{data.name}</p>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Volume: {formatCurrency(data.value)}\n          </p>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Share: {data.percentage}%\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const renderLegend = (props: any) => {\n    const { payload } = props;\n    return (\n      <ul className=\"flex flex-wrap gap-4 justify-center mt-4\">\n        {payload.map((entry: any, index: number) => (\n          <li key={index} className=\"flex items-center space-x-2\">\n            <div \n              className=\"w-3 h-3 rounded-full\" \n              style={{ backgroundColor: entry.color }}\n            ></div>\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n              {entry.value} ({data.find(d => d.name === entry.value)?.percentage}%)\n            </span>\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  // Handle empty data state\n  if (!data || data.length === 0) {\n    return (\n      <Card className={`bg-white dark:bg-gray-800 ${className}`} data-testid=\"currency-pie-chart\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-gray-900 dark:text-white\">\n            <PieIcon className=\"h-5 w-5 mr-2 text-green-600 dark:text-green-400\" />\n            Currency Distribution\n          </CardTitle>\n          <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n            No currency data available\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80 flex items-center justify-center text-gray-500 dark:text-gray-400\">\n            No currency distribution data to display\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const totalVolume = data.reduce((sum, item) => sum + item.value, 0);\n\n  return (\n    <Card className={`bg-white dark:bg-gray-800 ${className}`} data-testid=\"currency-pie-chart\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-gray-900 dark:text-white\">\n          <PieIcon className=\"h-5 w-5 mr-2 text-green-600 dark:text-green-400\" />\n          Currency Distribution\n        </CardTitle>\n        <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n          Trading volume by cryptocurrency ({formatCurrency(totalVolume)} total)\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-80\" data-testid=\"currency-pie-chart-container\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={data}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={60}\n                outerRadius={100}\n                paddingAngle={2}\n                dataKey=\"value\"\n              >\n                {data.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip content={renderCustomTooltip} />\n              <Legend content={renderLegend} />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4973},"client/src/components/KPICard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface KPICardProps {\n  title: string;\n  value: string | number;\n  change?: {\n    value: number;\n    label: string;\n  };\n  icon: LucideIcon;\n  color: 'blue' | 'green' | 'purple' | 'orange' | 'red';\n  isLoading?: boolean;\n  testId: string;\n}\n\nconst colorClasses = {\n  blue: {\n    bg: 'bg-blue-100 dark:bg-blue-900/20',\n    icon: 'text-blue-600 dark:text-blue-400',\n    change: 'text-blue-600 dark:text-blue-400'\n  },\n  green: {\n    bg: 'bg-green-100 dark:bg-green-900/20',\n    icon: 'text-green-600 dark:text-green-400',\n    change: 'text-green-600 dark:text-green-400'\n  },\n  purple: {\n    bg: 'bg-purple-100 dark:bg-purple-900/20',\n    icon: 'text-purple-600 dark:text-purple-400',\n    change: 'text-purple-600 dark:text-purple-400'\n  },\n  orange: {\n    bg: 'bg-orange-100 dark:bg-orange-900/20',\n    icon: 'text-orange-600 dark:text-orange-400',\n    change: 'text-orange-600 dark:text-orange-400'\n  },\n  red: {\n    bg: 'bg-red-100 dark:bg-red-900/20',\n    icon: 'text-red-600 dark:text-red-400',\n    change: 'text-red-600 dark:text-red-400'\n  }\n};\n\nexport function KPICard({ \n  title, \n  value, \n  change, \n  icon: Icon, \n  color, \n  isLoading = false, \n  testId \n}: KPICardProps) {\n  const colors = colorClasses[color];\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white dark:bg-gray-800\" data-testid={`${testId}-loading`}>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-2\">\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n              <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n            </div>\n            <div className={`h-12 w-12 ${colors.bg} rounded-lg flex items-center justify-center`}>\n              <Icon className={`h-6 w-6 ${colors.icon}`} />\n            </div>\n          </div>\n          <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded mt-2 animate-pulse\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-gray-800 transition-all duration-200 hover:shadow-lg\" data-testid={testId}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\" data-testid={`${testId}-title`}>\n              {title}\n            </p>\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-white mt-1\" data-testid={`${testId}-value`}>\n              {typeof value === 'number' ? value.toLocaleString() : value}\n            </p>\n          </div>\n          <div className={`h-12 w-12 ${colors.bg} rounded-lg flex items-center justify-center`}>\n            <Icon className={`h-6 w-6 ${colors.icon}`} />\n          </div>\n        </div>\n        {change && (\n          <p className={`text-xs mt-2 ${change.value >= 0 ? colors.change : 'text-red-600 dark:text-red-400'}`} data-testid={`${testId}-change`}>\n            {change.value >= 0 ? '+' : ''}{change.value}% {change.label}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3233},"client/src/components/VolumeChart.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp } from \"lucide-react\";\n\ninterface VolumeData {\n  date: string;\n  volume: number;\n  orders: number;\n}\n\ninterface VolumeChartProps {\n  data: VolumeData[];\n  isLoading?: boolean;\n  className?: string;\n}\n\n\nexport function VolumeChart({ data = [], isLoading = false, className }: VolumeChartProps) {\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Card className={`bg-white dark:bg-gray-800 ${className}`}>\n        <CardHeader>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"h-5 w-5 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n            <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-32 animate-pulse\"></div>\n          </div>\n          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-48 animate-pulse\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Calculate trend from real data\n  const latestVolume = data && data.length > 0 ? data[data.length - 1]?.volume || 0 : 0;\n  const previousVolume = data && data.length > 1 ? data[data.length - 2]?.volume || 0 : 0;\n  const trend = previousVolume > 0 ? ((latestVolume - previousVolume) / previousVolume) * 100 : 0;\n\n  // Handle empty data state\n  if (!data || data.length === 0) {\n    return (\n      <Card className={`bg-white dark:bg-gray-800 ${className}`} data-testid=\"volume-chart\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-gray-900 dark:text-white\">\n            <TrendingUp className=\"h-5 w-5 mr-2 text-purple-600 dark:text-purple-400\" />\n            Transaction Volume (7 Days)\n          </CardTitle>\n          <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n            No volume data available\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80 flex items-center justify-center text-gray-500 dark:text-gray-400\">\n            No transaction data to display\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`bg-white dark:bg-gray-800 ${className}`} data-testid=\"volume-chart\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-gray-900 dark:text-white\">\n          <TrendingUp className=\"h-5 w-5 mr-2 text-purple-600 dark:text-purple-400\" />\n          Transaction Volume (7 Days)\n        </CardTitle>\n        <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n          Daily transaction volume and order counts\n          {trend !== 0 && (\n            <span className={`ml-2 text-xs ${trend >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>\n              {trend >= 0 ? '+' : ''}{trend.toFixed(1)}% from yesterday\n            </span>\n          )}\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-80\" data-testid=\"volume-chart-container\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-gray-200 dark:stroke-gray-700\" />\n              <XAxis \n                dataKey=\"date\" \n                tickFormatter={formatDate}\n                className=\"text-xs text-gray-600 dark:text-gray-400\"\n              />\n              <YAxis \n                tickFormatter={formatCurrency}\n                className=\"text-xs text-gray-600 dark:text-gray-400\"\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: 'var(--background)',\n                  border: '1px solid var(--border)',\n                  borderRadius: '8px',\n                }}\n                labelFormatter={(date) => formatDate(date as string)}\n                formatter={(value, name) => [\n                  name === 'volume' ? formatCurrency(value as number) : `${value} orders`,\n                  name === 'volume' ? 'Volume' : 'Orders'\n                ]}\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"volume\" \n                stroke=\"#8b5cf6\" \n                strokeWidth={3}\n                dot={{ fill: '#8b5cf6', strokeWidth: 2, r: 4 }}\n                activeDot={{ r: 6 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5063},"client/src/components/admin-header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Menu, \n  LogOut, \n  User, \n  ChevronRight,\n  Bell,\n  Search,\n  Settings\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { BreadcrumbItem } from \"./admin-types\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminHeaderProps {\n  title?: string;\n  breadcrumbs?: BreadcrumbItem[];\n  onMenuClick: () => void;\n}\n\ninterface AdminUser {\n  id: string;\n  email: string;\n  role: string;\n}\n\nexport function AdminHeader({ title, breadcrumbs = [], onMenuClick }: AdminHeaderProps) {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [user, setUser] = useState<AdminUser | null>(null);\n  const [notifications] = useState(3); // Mock notifications count\n\n  useEffect(() => {\n    // Get user info from localStorage or API\n    const checkAuth = async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) return;\n\n      try {\n        const response = await fetch('/api/auth/verify', {\n          headers: { 'Authorization': `Bearer ${token}` },\n        });\n\n        if (response.ok) {\n          const result = await response.json();\n          setUser(result.user);\n        }\n      } catch (error) {\n        console.error('Failed to get user info:', error);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('auth_token');\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out\",\n    });\n    setLocation('/admin/login');\n  };\n\n  const getPageTitle = () => {\n    if (title) return title;\n    \n    // Generate title from current path\n    const path = window.location.pathname;\n    const segments = path.split('/').filter(Boolean);\n    const lastSegment = segments[segments.length - 1];\n    \n    if (lastSegment === 'admin' || !lastSegment) return 'Dashboard';\n    return lastSegment.charAt(0).toUpperCase() + lastSegment.slice(1);\n  };\n\n  const getCurrentBreadcrumbs = (): BreadcrumbItem[] => {\n    if (breadcrumbs.length > 0) return breadcrumbs;\n    \n    // Generate breadcrumbs from current path\n    const path = window.location.pathname;\n    const segments = path.split('/').filter(Boolean);\n    \n    const crumbs: BreadcrumbItem[] = [\n      { label: 'Admin', href: '/admin' }\n    ];\n    \n    if (segments.length > 1) {\n      const section = segments[segments.length - 1];\n      if (section !== 'admin') {\n        crumbs.push({ \n          label: section.charAt(0).toUpperCase() + section.slice(1) \n        });\n      }\n    }\n    \n    return crumbs;\n  };\n\n  return (\n    <header className=\"sticky top-0 z-10 flex h-16 items-center justify-between border-b border-gray-200 bg-white px-4 dark:border-gray-700 dark:bg-gray-800 sm:px-6 lg:px-8\">\n      {/* Left side */}\n      <div className=\"flex items-center space-x-4\">\n        {/* Mobile menu button */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onMenuClick}\n          className=\"lg:hidden text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n          data-testid=\"button-mobile-menu\"\n        >\n          <Menu className=\"h-5 w-5\" />\n        </Button>\n\n        {/* Breadcrumbs */}\n        <nav className=\"flex items-center space-x-2 text-sm\">\n          {getCurrentBreadcrumbs().map((crumb, index) => (\n            <div key={index} className=\"flex items-center space-x-2\">\n              {index > 0 && <ChevronRight className=\"h-4 w-4 text-gray-400\" />}\n              {crumb.href ? (\n                <a\n                  href={crumb.href}\n                  className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors\"\n                  data-testid={`breadcrumb-${index}`}\n                >\n                  {crumb.label}\n                </a>\n              ) : (\n                <span className=\"font-medium text-gray-900 dark:text-white\">\n                  {crumb.label}\n                </span>\n              )}\n            </div>\n          ))}\n        </nav>\n      </div>\n\n      {/* Page title */}\n      <div className=\"hidden sm:block\">\n        <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n          {getPageTitle()}\n        </h1>\n      </div>\n\n      {/* Right side */}\n      <div className=\"flex items-center space-x-4\">\n        {/* Search */}\n        <div className=\"hidden md:block\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400\" />\n            <Input\n              placeholder=\"Search...\"\n              className=\"w-64 pl-9 bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n\n        {/* Notifications */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"relative text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"h-5 w-5\" />\n          {notifications > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 text-xs flex items-center justify-center\"\n            >\n              {notifications}\n            </Badge>\n          )}\n        </Button>\n\n        {/* User menu */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              className=\"flex items-center space-x-2 text-gray-700 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white\"\n              data-testid=\"button-user-menu\"\n            >\n              <div className=\"h-8 w-8 rounded-full bg-purple-100 dark:bg-purple-900/20 flex items-center justify-center\">\n                <User className=\"h-4 w-4 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <div className=\"hidden sm:block text-left\">\n                <div className=\"text-sm font-medium\">\n                  {user?.email || 'Admin'}\n                </div>\n                <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  Administrator\n                </div>\n              </div>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <DropdownMenuLabel>My Account</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem data-testid=\"menu-item-profile\">\n              <User className=\"mr-2 h-4 w-4\" />\n              <span>Profile</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem data-testid=\"menu-item-settings\">\n              <Settings className=\"mr-2 h-4 w-4\" />\n              <span>Settings</span>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem \n              onClick={handleLogout}\n              className=\"text-red-600 dark:text-red-400\"\n              data-testid=\"menu-item-logout\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              <span>Log out</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  );\n}","size_bytes":7591},"client/src/components/admin-layout.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport { AdminSidebar } from \"./admin-sidebar\";\nimport { AdminHeader } from \"./admin-header\";\nimport type { BreadcrumbItem } from \"./admin-types\";\n\ninterface AdminLayoutProps {\n  children: ReactNode;\n  title?: string;\n  breadcrumbs?: BreadcrumbItem[];\n  currentSection?: string;\n}\n\nexport function AdminLayout({ children, title, breadcrumbs = [], currentSection = \"dashboard\" }: AdminLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  return (\n    <div className=\"flex h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Mobile sidebar overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 z-20 bg-black bg-opacity-50 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"sidebar-overlay\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={`\n        fixed inset-y-0 left-0 z-30 w-64 transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0\n        ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}\n      `}>\n        <AdminSidebar \n          currentSection={currentSection} \n          onClose={() => setSidebarOpen(false)}\n        />\n      </div>\n\n      {/* Main content area */}\n      <div className=\"flex flex-1 flex-col overflow-hidden\">\n        {/* Header */}\n        <AdminHeader \n          title={title}\n          breadcrumbs={breadcrumbs}\n          onMenuClick={() => setSidebarOpen(true)}\n        />\n\n        {/* Page content */}\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 dark:bg-gray-900\">\n          <div className=\"container mx-auto px-4 py-6 sm:px-6 lg:px-8\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":1754},"client/src/components/admin-sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  BarChart3, \n  Users, \n  MessageSquare, \n  Wallet, \n  Coins, \n  ArrowLeftRight, \n  FileText, \n  Settings,\n  Shield,\n  X,\n  ChevronRight\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface SidebarProps {\n  currentSection: string;\n  onClose: () => void;\n}\n\nconst navigationItems = [\n  {\n    id: \"dashboard\",\n    label: \"Dashboard\",\n    icon: BarChart3,\n    href: \"/admin\",\n    badge: null\n  },\n  {\n    id: \"users\",\n    label: \"Users\",\n    icon: Users,\n    href: \"/admin/users\",\n    badge: null\n  },\n  {\n    id: \"telegram\",\n    label: \"Telegram\",\n    icon: MessageSquare,\n    href: \"/admin/telegram\",\n    badge: null\n  },\n  {\n    id: \"wallets\",\n    label: \"Wallets\",\n    icon: Wallet,\n    href: \"/admin/wallets\",\n    badge: null\n  },\n  {\n    id: \"currencies\",\n    label: \"Currencies\",\n    icon: Coins,\n    href: \"/admin/currencies\",\n    badge: null\n  },\n  {\n    id: \"exchanges\",\n    label: \"Exchange Methods\",\n    icon: ArrowLeftRight,\n    href: \"/admin/exchanges\",\n    badge: null\n  },\n  {\n    id: \"logs\",\n    label: \"Logs\",\n    icon: FileText,\n    href: \"/admin/logs\",\n    badge: \"New\"\n  },\n  {\n    id: \"settings\",\n    label: \"Settings\",\n    icon: Settings,\n    href: \"/admin/settings\",\n    badge: null\n  }\n];\n\nexport function AdminSidebar({ currentSection, onClose }: SidebarProps) {\n  const [location] = useLocation();\n\n  const isActive = (item: typeof navigationItems[0]) => {\n    return location === item.href || (item.id === \"dashboard\" && location === \"/admin\");\n  };\n\n  return (\n    <div className=\"flex h-full w-64 flex-col bg-white dark:bg-gray-800 shadow-lg\">\n      {/* Header */}\n      <div className=\"flex h-16 items-center justify-between px-6 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center space-x-2\">\n          <Shield className=\"h-8 w-8 text-purple-600 dark:text-purple-400\" />\n          <div className=\"flex flex-col\">\n            <span className=\"text-lg font-bold text-gray-900 dark:text-white\">CryptoFlow</span>\n            <span className=\"text-xs text-gray-500 dark:text-gray-400\">Admin Panel</span>\n          </div>\n        </div>\n        \n        {/* Mobile close button */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onClose}\n          className=\"lg:hidden text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n          data-testid=\"button-close-sidebar\"\n        >\n          <X className=\"h-5 w-5\" />\n        </Button>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 space-y-1 px-3 py-4\">\n        {navigationItems.map((item) => {\n          const Icon = item.icon;\n          const active = isActive(item);\n          \n          return (\n            <Link\n              key={item.id}\n              href={item.href}\n              className={`\n                group flex items-center justify-between w-full px-3 py-2.5 text-sm font-medium rounded-lg transition-all duration-200\n                ${active \n                  ? 'bg-purple-100 text-purple-900 dark:bg-purple-900/20 dark:text-purple-100' \n                  : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-700 dark:hover:text-white'\n                }\n              `}\n              onClick={onClose}\n              data-testid={`nav-link-${item.id}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <Icon className={`h-5 w-5 flex-shrink-0 ${\n                  active ? 'text-purple-600 dark:text-purple-400' : 'text-gray-400 group-hover:text-gray-500 dark:group-hover:text-gray-300'\n                }`} />\n                <span className=\"truncate\">{item.label}</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                {item.badge && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {item.badge}\n                  </Badge>\n                )}\n                {active && (\n                  <ChevronRight className=\"h-4 w-4 text-purple-600 dark:text-purple-400\" />\n                )}\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      <Separator className=\"mx-3\" />\n\n      {/* Footer */}\n      <div className=\"p-4\">\n        <div className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg\">\n          <div className=\"h-2 w-2 bg-green-500 rounded-full animate-pulse\"></div>\n          <div className=\"flex-1\">\n            <p className=\"text-xs font-medium text-gray-900 dark:text-white\">System Status</p>\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">All systems operational</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4900},"client/src/components/admin-types.ts":{"content":"export interface BreadcrumbItem {\n  label: string;\n  href?: string;\n}","size_bytes":69},"client/src/components/protected-route.tsx":{"content":"import { ReactNode, ComponentType } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Shield, AlertCircle, LogIn, ArrowLeft } from \"lucide-react\";\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  requiredRole?: 'admin' | 'user';\n  fallbackComponent?: ComponentType;\n}\n\nfunction LoadingFallback() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 flex items-center justify-center\">\n      <div className=\"flex flex-col items-center space-y-4\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white/60\"></div>\n        <div className=\"text-white/80 text-sm font-medium\">Checking permissions...</div>\n      </div>\n    </div>\n  );\n}\n\nfunction AccessDeniedFallback({ requiredRole }: { requiredRole?: string }) {\n  const [, setLocation] = useLocation();\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        <div className=\"text-center\">\n          <Shield className=\"mx-auto h-12 w-12 text-red-400\" />\n          <h2 className=\"mt-6 text-3xl font-bold text-white\">Access Denied</h2>\n          <p className=\"mt-2 text-sm text-gray-300\">\n            You don't have permission to access this page\n          </p>\n        </div>\n\n        <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <AlertCircle className=\"mr-2 h-5 w-5 text-red-400\" />\n              Insufficient Permissions\n            </CardTitle>\n            <CardDescription className=\"text-gray-300\">\n              {requiredRole === 'admin' \n                ? \"This area is restricted to administrators only.\"\n                : \"This area requires authentication.\"\n              }\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Alert variant=\"destructive\" className=\"border-red-500/50 bg-red-900/20\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription className=\"text-red-200\">\n                {requiredRole === 'admin' \n                  ? \"Contact your system administrator if you believe this is an error.\"\n                  : \"Please sign in with an account that has the required permissions.\"\n                }\n              </AlertDescription>\n            </Alert>\n            \n            <div className=\"flex space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setLocation('/')}\n                className=\"flex-1 border-gray-600 text-white hover:bg-gray-700\"\n                data-testid=\"button-go-home\"\n              >\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Go Home\n              </Button>\n              {requiredRole === 'admin' && (\n                <Button\n                  onClick={() => setLocation('/admin/login')}\n                  className=\"flex-1 bg-purple-600 hover:bg-purple-700 text-white\"\n                  data-testid=\"button-admin-login\"\n                >\n                  <LogIn className=\"mr-2 h-4 w-4\" />\n                  Admin Login\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nfunction UnauthenticatedFallback() {\n  const [, setLocation] = useLocation();\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        <div className=\"text-center\">\n          <LogIn className=\"mx-auto h-12 w-12 text-blue-400\" />\n          <h2 className=\"mt-6 text-3xl font-bold text-white\">Authentication Required</h2>\n          <p className=\"mt-2 text-sm text-gray-300\">\n            Please sign in to access this page\n          </p>\n        </div>\n\n        <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Sign In Required</CardTitle>\n            <CardDescription className=\"text-gray-300\">\n              You must be signed in to view this content.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setLocation('/')}\n                className=\"flex-1 border-gray-600 text-white hover:bg-gray-700\"\n                data-testid=\"button-go-home-unauth\"\n              >\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Go Home\n              </Button>\n              <Button\n                onClick={() => setLocation('/')}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white\"\n                data-testid=\"button-sign-in\"\n              >\n                <LogIn className=\"mr-2 h-4 w-4\" />\n                Sign In\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport function ProtectedRoute({ children, requiredRole = 'user', fallbackComponent: FallbackComponent }: ProtectedRouteProps) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return FallbackComponent ? <FallbackComponent /> : <LoadingFallback />;\n  }\n\n  // Check if user is authenticated\n  if (!isAuthenticated || !user) {\n    return <UnauthenticatedFallback />;\n  }\n\n  // Check role requirements\n  if (requiredRole && user.role !== requiredRole) {\n    // Special case: if user is admin, allow access to user-level routes\n    if (!(user.role === 'admin' && requiredRole === 'user')) {\n      return <AccessDeniedFallback requiredRole={requiredRole} />;\n    }\n  }\n\n  // All checks passed, render the protected content\n  return <>{children}</>;\n}","size_bytes":6266},"client/src/pages/admin-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AdminLayout } from \"@/components/admin-layout\";\nimport { KPICard } from \"@/components/KPICard\";\nimport { VolumeChart } from \"@/components/VolumeChart\";\nimport { CurrencyPieChart } from \"@/components/CurrencyPieChart\";\nimport { ActivityTimeline } from \"@/components/ActivityTimeline\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Users, \n  DollarSign, \n  TrendingUp, \n  Wallet,\n  RefreshCw,\n  AlertCircle,\n  Calendar\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\n\ninterface AdminStats {\n  totalUsers: number;\n  activeUsers: number;\n  totalOrders: number;\n  completedOrders: number;\n  totalCurrencies: number;\n  activeCurrencies: number;\n  totalWallets: number;\n  activeWallets: number;\n}\n\ninterface DashboardData {\n  stats: AdminStats;\n  recentActivity: Array<{\n    id: string;\n    action: string;\n    target: string;\n    targetId?: string;\n    description: string;\n    adminId: string;\n    timestamp: string;\n  }>;\n  recentOrders: Array<{\n    id: string;\n    fromCurrency: string;\n    toCurrency: string;\n    fromAmount: string;\n    toAmount: string;\n    status: string;\n    createdAt: string;\n  }>;\n  exchanges24h: number;\n  totalVolume: number;\n  volumeByDay: Array<{\n    date: string;\n    volume: number;\n    orders: number;\n  }>;\n  currencyDistribution: Array<{\n    name: string;\n    value: number;\n    percentage: number;\n    color: string;\n  }>;\n}\n\n\nexport function AdminDashboardPage() {\n  const { toast } = useToast();\n  const [refreshing, setRefreshing] = useState(false);\n\n  // Fetch dashboard data\n  const { \n    data: dashboardData, \n    isLoading, \n    error, \n    refetch \n  } = useQuery<DashboardData>({\n    queryKey: ['/api/admin/dashboard-stats'],\n    retry: 2,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    try {\n      await refetch();\n      toast({\n        title: \"Dashboard Updated\",\n        description: \"Latest data has been loaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Refresh Failed\",\n        description: \"Unable to refresh dashboard data. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  // Get real data from backend - no mock calculations\n  const exchanges24h = dashboardData?.exchanges24h || 0;\n  const totalVolume = dashboardData?.totalVolume || 0;\n\n  if (error) {\n    return (\n      <AdminLayout \n        title=\"Dashboard\" \n        currentSection=\"dashboard\"\n        breadcrumbs={[\n          { label: 'Admin', href: '/admin' },\n          { label: 'Dashboard' }\n        ]}\n      >\n        <div className=\"space-y-6\">\n          <Alert className=\"border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/10\">\n            <AlertCircle className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n            <AlertDescription className=\"text-red-700 dark:text-red-300\">\n              Failed to load dashboard data. Please check your connection and try again.\n            </AlertDescription>\n          </Alert>\n          <div className=\"flex justify-center\">\n            <Button \n              onClick={handleRefresh} \n              disabled={refreshing}\n              data-testid=\"button-retry-dashboard\"\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\n              Retry\n            </Button>\n          </div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout \n      title=\"Dashboard\" \n      currentSection=\"dashboard\"\n      breadcrumbs={[\n        { label: 'Admin', href: '/admin' },\n        { label: 'Dashboard' }\n      ]}\n    >\n      <div className=\"space-y-6\" data-testid=\"admin-dashboard\">\n        {/* Header with Refresh Button */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              Dashboard Overview\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Monitor your platform's key metrics and recent activity\n            </p>\n          </div>\n          <Button \n            onClick={handleRefresh} \n            disabled={refreshing || isLoading}\n            variant=\"outline\"\n            data-testid=\"button-refresh-dashboard\"\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n        </div>\n\n        {/* KPI Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <KPICard\n            title=\"Total Users\"\n            value={dashboardData?.stats.totalUsers || 0}\n            change={{\n              value: 12,\n              label: \"from last month\"\n            }}\n            icon={Users}\n            color=\"blue\"\n            isLoading={isLoading}\n            testId=\"kpi-total-users\"\n          />\n\n          <KPICard\n            title=\"Total Volume\"\n            value={totalVolume > 1000000 ? `$${(totalVolume / 1000000).toFixed(1)}M` : `$${Math.round(totalVolume).toLocaleString()}`}\n            change={{\n              value: 8,\n              label: \"from last month\"\n            }}\n            icon={DollarSign}\n            color=\"green\"\n            isLoading={isLoading}\n            testId=\"kpi-total-volume\"\n          />\n\n          <KPICard\n            title=\"Exchanges (24h)\"\n            value={exchanges24h}\n            change={{\n              value: 23,\n              label: \"from yesterday\"\n            }}\n            icon={TrendingUp}\n            color=\"purple\"\n            isLoading={isLoading}\n            testId=\"kpi-exchanges-24h\"\n          />\n\n          <KPICard\n            title=\"Active Wallets\"\n            value={dashboardData?.stats.activeWallets || 0}\n            icon={Wallet}\n            color=\"orange\"\n            isLoading={isLoading}\n            testId=\"kpi-active-wallets\"\n          />\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n          {/* Volume Chart - Takes 2/3 width on large screens */}\n          <div className=\"xl:col-span-2\">\n            <VolumeChart \n              data={dashboardData?.volumeByDay || []} \n              isLoading={isLoading}\n            />\n          </div>\n\n          {/* Currency Distribution - Takes 1/3 width on large screens */}\n          <div className=\"xl:col-span-1\">\n            <CurrencyPieChart \n              data={dashboardData?.currencyDistribution || []} \n              isLoading={isLoading} \n            />\n          </div>\n        </div>\n\n        {/* Bottom Section - Recent Activity and Quick Stats */}\n        <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n          {/* Recent Activity Timeline - Takes 2/3 width */}\n          <div className=\"xl:col-span-2\">\n            <ActivityTimeline \n              activities={dashboardData?.recentActivity || []} \n              isLoading={isLoading}\n            />\n          </div>\n\n          {/* Quick Stats Card - Takes 1/3 width */}\n          <div className=\"xl:col-span-1\">\n            <Card className=\"bg-white dark:bg-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-gray-900 dark:text-white\">\n                  <Calendar className=\"h-5 w-5 mr-2 text-blue-600 dark:text-blue-400\" />\n                  Quick Stats\n                </CardTitle>\n                <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n                  System health and performance\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {isLoading ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(4)].map((_, i) => (\n                      <div key={i} className=\"flex justify-between items-center\">\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2 animate-pulse\"></div>\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4 animate-pulse\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Active Users</span>\n                      <span className=\"text-sm font-semibold text-green-600 dark:text-green-400\">\n                        {dashboardData?.stats.activeUsers || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Completed Orders</span>\n                      <span className=\"text-sm font-semibold text-blue-600 dark:text-blue-400\">\n                        {dashboardData?.stats.completedOrders || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Active Currencies</span>\n                      <span className=\"text-sm font-semibold text-purple-600 dark:text-purple-400\">\n                        {dashboardData?.stats.activeCurrencies || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Total Currencies</span>\n                      <span className=\"text-sm font-semibold text-orange-600 dark:text-orange-400\">\n                        {dashboardData?.stats.totalCurrencies || 0}\n                      </span>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </AdminLayout>\n  );\n}","size_bytes":10391},"server/services/currency-converter.ts":{"content":"import { storage } from '../storage';\nimport { exchangeRateService } from './exchange-api';\n\n/**\n * Currency conversion service that uses real exchange rates from the database\n * and external APIs to provide accurate currency conversions.\n */\nexport class CurrencyConverter {\n  private static instance: CurrencyConverter;\n  private conversionCache: Map<string, { rate: number; timestamp: number }> = new Map();\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes cache for conversions\n\n  static getInstance(): CurrencyConverter {\n    if (!CurrencyConverter.instance) {\n      CurrencyConverter.instance = new CurrencyConverter();\n    }\n    return CurrencyConverter.instance;\n  }\n\n  /**\n   * Convert any currency amount to USD using real exchange rates\n   */\n  async convertToUSD(amount: number, fromCurrency: string): Promise<number> {\n    if (amount === 0) return 0;\n\n    // Handle USD and USD-pegged currencies directly\n    if (fromCurrency === 'card-usd' || fromCurrency === 'usd') {\n      return amount;\n    }\n\n    // Handle stablecoins (USDT, USDC) that are pegged to USD\n    if (fromCurrency.includes('usdt') || fromCurrency === 'usdc') {\n      return amount; // 1:1 with USD\n    }\n\n    const cacheKey = `${fromCurrency}-usd`;\n    const cached = this.conversionCache.get(cacheKey);\n    \n    // Return cached rate if available and fresh\n    if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {\n      return amount * cached.rate;\n    }\n\n    try {\n      // First try to get rate from database\n      let rate = await this.getRateFromDatabase(fromCurrency, 'card-usd');\n      \n      // If no database rate, try external API\n      if (!rate) {\n        rate = await exchangeRateService.getRate(fromCurrency, 'usd');\n      }\n\n      // Cache the rate\n      this.conversionCache.set(cacheKey, { rate, timestamp: Date.now() });\n      \n      return amount * rate;\n    } catch (error) {\n      console.error(`Error converting ${fromCurrency} to USD:`, error);\n      \n      // Fallback to basic known rates for critical currencies\n      const fallbackRates: { [key: string]: number } = {\n        'btc': 65000,      // Approximate BTC price\n        'eth': 3500,       // Approximate ETH price\n        'card-eur': 1.08,  // EUR to USD\n        'card-mdl': 0.055, // MDL to USD (1/18)\n        'eur': 1.08,\n        'mdl': 0.055\n      };\n      \n      const fallbackRate = fallbackRates[fromCurrency] || 1;\n      console.warn(`Using fallback rate for ${fromCurrency}: ${fallbackRate}`);\n      \n      return amount * fallbackRate;\n    }\n  }\n\n  /**\n   * Convert amounts to a common base currency for comparison and aggregation\n   */\n  async convertToBaseCurrency(amounts: Array<{ amount: number; currency: string }>): Promise<number> {\n    let totalUSD = 0;\n    \n    for (const item of amounts) {\n      const usdValue = await this.convertToUSD(item.amount, item.currency);\n      totalUSD += usdValue;\n    }\n    \n    return totalUSD;\n  }\n\n  /**\n   * Get exchange rate from database first, fallback to API\n   */\n  private async getRateFromDatabase(fromCurrency: string, toCurrency: string): Promise<number | null> {\n    try {\n      // Try direct pair\n      let rate = await storage.getExchangeRate(fromCurrency, toCurrency);\n      if (rate) {\n        return parseFloat(rate.rate);\n      }\n\n      // Try with USD as intermediate currency for card-* currencies\n      if (toCurrency.startsWith('card-')) {\n        const fiatCurrency = toCurrency.replace('card-', '');\n        rate = await storage.getExchangeRate(fromCurrency, fiatCurrency);\n        if (rate) {\n          return parseFloat(rate.rate);\n        }\n      }\n\n      // Try reverse pair and invert\n      rate = await storage.getExchangeRate(toCurrency, fromCurrency);\n      if (rate) {\n        const rateValue = parseFloat(rate.rate);\n        return rateValue !== 0 ? 1 / rateValue : 0;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Error getting rate from database:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Convert multiple currency amounts to USD and return the breakdown\n   */\n  async convertMultipleToUSD(items: Array<{ currency: string; amount: number }>): Promise<Array<{ currency: string; amount: number; usdValue: number }>> {\n    const results = [];\n    \n    for (const item of items) {\n      const usdValue = await this.convertToUSD(item.amount, item.currency);\n      results.push({\n        currency: item.currency,\n        amount: item.amount,\n        usdValue: Math.round(usdValue * 100) / 100 // Round to 2 decimal places\n      });\n    }\n    \n    return results;\n  }\n\n  /**\n   * Clear the conversion cache (useful for testing or manual refresh)\n   */\n  clearCache(): void {\n    this.conversionCache.clear();\n  }\n}\n\nexport const currencyConverter = CurrencyConverter.getInstance();","size_bytes":4782},"client/src/components/add-user-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  X,\n  UserPlus,\n  Mail,\n  User,\n  Shield,\n  Eye,\n  EyeOff,\n  Key,\n  Send,\n  AlertCircle\n} from \"lucide-react\";\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nconst addUserSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  role: z.enum([\"user\", \"admin\"], {\n    required_error: \"Please select a role\",\n  }),\n  isActive: z.boolean().default(true),\n  password: z.string().min(8, \"Password must be at least 8 characters\")\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, \"Password must contain at least one uppercase letter, one lowercase letter, and one number\"),\n  sendInvitationEmail: z.boolean().default(true),\n});\n\ntype AddUserFormData = z.infer<typeof addUserSchema>;\n\ninterface AddUserModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onUserAdded?: () => void;\n}\n\nexport function AddUserModal({ isOpen, onClose, onUserAdded }: AddUserModalProps) {\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n  const [autoGeneratedPassword, setAutoGeneratedPassword] = useState('');\n\n  const form = useForm<AddUserFormData>({\n    resolver: zodResolver(addUserSchema),\n    defaultValues: {\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"user\",\n      isActive: true,\n      password: \"\",\n      sendInvitationEmail: true,\n    },\n  });\n\n  // Generate secure password\n  const generatePassword = () => {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*\";\n    let password = \"\";\n    \n    // Ensure password meets requirements\n    password += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[Math.floor(Math.random() * 26)]; // Uppercase\n    password += \"abcdefghijklmnopqrstuvwxyz\"[Math.floor(Math.random() * 26)]; // Lowercase\n    password += \"0123456789\"[Math.floor(Math.random() * 10)]; // Number\n    password += \"!@#$%^&*\"[Math.floor(Math.random() * 8)]; // Special char\n    \n    // Fill rest with random characters\n    for (let i = 4; i < 12; i++) {\n      password += chars[Math.floor(Math.random() * chars.length)];\n    }\n    \n    // Shuffle the password\n    password = password.split('').sort(() => Math.random() - 0.5).join('');\n    \n    setAutoGeneratedPassword(password);\n    form.setValue(\"password\", password);\n  };\n\n  // Add user mutation\n  const addUserMutation = useMutation({\n    mutationFn: async (userData: AddUserFormData) => {\n      const response = await apiRequest('POST', '/api/admin/users', userData);\n      return await response.json();\n    },\n    onSuccess: (newUser: any) => {\n      toast({\n        title: \"User Created\",\n        description: `User ${newUser.firstName} ${newUser.lastName} has been created successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n      form.reset();\n      setAutoGeneratedPassword('');\n      onClose();\n      if (onUserAdded) onUserAdded();\n    },\n    onError: (error: any) => {\n      console.error('Add user error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AddUserFormData) => {\n    addUserMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    setAutoGeneratedPassword('');\n    setShowPassword(false);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-add-user\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <UserPlus className=\"h-6 w-6 text-purple-600\" />\n            <span>Add New User</span>\n          </DialogTitle>\n          <DialogDescription>\n            Create a new user account with access to the platform. The user will receive an email invitation.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Basic Information</CardTitle>\n                <CardDescription>Enter the user's personal details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                            <Input \n                              placeholder=\"Enter first name\" \n                              className=\"pl-10\"\n                              data-testid=\"input-add-user-firstName\"\n                              {...field} \n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name *</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                            <Input \n                              placeholder=\"Enter last name\" \n                              className=\"pl-10\"\n                              data-testid=\"input-add-user-lastName\"\n                              {...field} \n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                          <Input \n                            type=\"email\"\n                            placeholder=\"Enter email address\" \n                            className=\"pl-10\"\n                            data-testid=\"input-add-user-email\"\n                            {...field} \n                          />\n                        </div>\n                      </FormControl>\n                      <FormDescription>\n                        This will be used for login and notifications\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Account Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Account Settings</CardTitle>\n                <CardDescription>Configure user access and permissions</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"role\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>User Role *</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-add-user-role\">\n                              <SelectValue placeholder=\"Select a role\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"user\">\n                              <div className=\"flex items-center space-x-2\">\n                                <User className=\"h-4 w-4\" />\n                                <div>\n                                  <div className=\"font-medium\">User</div>\n                                  <div className=\"text-sm text-gray-500\">Standard user access</div>\n                                </div>\n                              </div>\n                            </SelectItem>\n                            <SelectItem value=\"admin\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Shield className=\"h-4 w-4\" />\n                                <div>\n                                  <div className=\"font-medium\">Admin</div>\n                                  <div className=\"text-sm text-gray-500\">Full administrative access</div>\n                                </div>\n                              </div>\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex flex-col justify-end\">\n                    <FormField\n                      control={form.control}\n                      name=\"isActive\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center space-x-3\">\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"switch-add-user-active\"\n                            />\n                          </FormControl>\n                          <div>\n                            <FormLabel className=\"text-sm font-medium\">\n                              Account Active\n                            </FormLabel>\n                            <FormDescription>\n                              User can log in and access the platform\n                            </FormDescription>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Password Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Security</CardTitle>\n                <CardDescription>Set up login credentials for the user</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password *</FormLabel>\n                      <FormControl>\n                        <div className=\"space-y-2\">\n                          <div className=\"relative\">\n                            <Key className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                            <Input \n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"Enter password\" \n                              className=\"pl-10 pr-10\"\n                              data-testid=\"input-add-user-password\"\n                              {...field} \n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowPassword(!showPassword)}\n                            >\n                              {showPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={generatePassword}\n                              data-testid=\"button-generate-password\"\n                            >\n                              Generate Secure Password\n                            </Button>\n                            {autoGeneratedPassword && (\n                              <Alert>\n                                <AlertCircle className=\"h-4 w-4\" />\n                                <AlertDescription className=\"text-xs\">\n                                  Save this password! It won't be shown again.\n                                </AlertDescription>\n                              </Alert>\n                            )}\n                          </div>\n                        </div>\n                      </FormControl>\n                      <FormDescription>\n                        Password must be at least 8 characters with uppercase, lowercase, and numbers\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"sendInvitationEmail\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-3\">\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-add-user-send-email\"\n                        />\n                      </FormControl>\n                      <div>\n                        <FormLabel className=\"text-sm font-medium flex items-center space-x-2\">\n                          <Send className=\"h-4 w-4\" />\n                          <span>Send Welcome Email</span>\n                        </FormLabel>\n                        <FormDescription>\n                          Send login credentials and welcome message to the user\n                        </FormDescription>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Form Actions */}\n            <DialogFooter className=\"flex justify-between\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={handleClose}\n                disabled={addUserMutation.isPending}\n              >\n                Cancel\n              </Button>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  type=\"submit\" \n                  disabled={addUserMutation.isPending}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                  data-testid=\"button-submit-add-user\"\n                >\n                  {addUserMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Creating User...\n                    </>\n                  ) : (\n                    <>\n                      <UserPlus className=\"h-4 w-4 mr-2\" />\n                      Create User\n                    </>\n                  )}\n                </Button>\n              </div>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17631},"client/src/components/user-detail-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { \n  X,\n  Edit,\n  Mail,\n  Calendar,\n  Shield,\n  User,\n  Activity,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Trash2,\n  Save,\n  Eye,\n  EyeOff\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string | null;\n  lastName: string | null;\n  profileImageUrl: string | null;\n  role: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface UserStats {\n  totalOrders: number;\n  totalVolume: string;\n  lastLoginAt: string | null;\n  accountValue: string;\n}\n\ninterface UserDetailModalProps {\n  user: User | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onUserUpdated?: () => void;\n}\n\ninterface EditFormData {\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  isActive: boolean;\n}\n\nexport function UserDetailModal({ user, isOpen, onClose, onUserUpdated }: UserDetailModalProps) {\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [editForm, setEditForm] = useState<EditFormData>({\n    email: '',\n    firstName: '',\n    lastName: '',\n    role: 'user',\n    isActive: true,\n  });\n\n  // Initialize form data when user changes\n  useEffect(() => {\n    if (user) {\n      setEditForm({\n        email: user.email,\n        firstName: user.firstName || '',\n        lastName: user.lastName || '',\n        role: user.role,\n        isActive: user.isActive,\n      });\n    }\n  }, [user]);\n\n  // Fetch detailed user stats (with fallback mock data)\n  const { data: userStats, isLoading: statsLoading } = useQuery({\n    queryKey: ['admin', 'user-stats', user?.id],\n    queryFn: async (): Promise<UserStats> => {\n      if (!user) throw new Error('No user');\n      \n      // Mock user stats for now since the API endpoint doesn't exist yet\n      // TODO: Replace with real API call when /api/admin/users/:id/stats is implemented\n      return {\n        totalOrders: Math.floor(Math.random() * 50),\n        totalVolume: (Math.random() * 10000).toFixed(2),\n        lastLoginAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n        accountValue: (Math.random() * 5000).toFixed(2),\n      };\n    },\n    enabled: !!user && isOpen,\n    retry: 1,\n  });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: async (updates: Partial<EditFormData>) => {\n      if (!user) throw new Error('No user');\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/admin/users/${user.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(updates),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update user');\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Updated\",\n        description: \"User information has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'user-stats', user?.id] });\n      setIsEditing(false);\n      if (onUserUpdated) onUserUpdated();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!user) return null;\n\n  const getUserDisplayName = (user: User) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    return user.firstName || user.lastName || user.email.split('@')[0];\n  };\n\n  const getUserInitials = (user: User) => {\n    const name = getUserDisplayName(user);\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const formatCurrency = (value: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(parseFloat(value) || 0);\n  };\n\n  const handleSave = () => {\n    const changes: Partial<EditFormData> = {};\n    \n    if (editForm.email !== user.email) changes.email = editForm.email;\n    if (editForm.firstName !== (user.firstName || '')) changes.firstName = editForm.firstName;\n    if (editForm.lastName !== (user.lastName || '')) changes.lastName = editForm.lastName;\n    if (editForm.role !== user.role) changes.role = editForm.role;\n    if (editForm.isActive !== user.isActive) changes.isActive = editForm.isActive;\n\n    if (Object.keys(changes).length === 0) {\n      setIsEditing(false);\n      return;\n    }\n\n    updateUserMutation.mutate(changes);\n  };\n\n  const handleCancel = () => {\n    setEditForm({\n      email: user.email,\n      firstName: user.firstName || '',\n      lastName: user.lastName || '',\n      role: user.role,\n      isActive: user.isActive,\n    });\n    setIsEditing(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-user-detail\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Avatar className=\"h-16 w-16\">\n                <AvatarImage src={user.profileImageUrl || undefined} />\n                <AvatarFallback className=\"text-lg bg-purple-100 text-purple-600 dark:bg-purple-900/20 dark:text-purple-400\">\n                  {getUserInitials(user)}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <DialogTitle className=\"text-2xl\" data-testid=\"modal-user-name\">\n                  {getUserDisplayName(user)}\n                </DialogTitle>\n                <DialogDescription className=\"flex items-center space-x-2\">\n                  <Mail className=\"h-4 w-4\" />\n                  <span data-testid=\"modal-user-email\">{user.email}</span>\n                </DialogDescription>\n                <div className=\"flex items-center space-x-2 mt-2\">\n                  <Badge \n                    variant={user.role === 'admin' ? 'default' : 'secondary'}\n                    data-testid=\"modal-user-role\"\n                  >\n                    {user.role === 'admin' ? (\n                      <>\n                        <Shield className=\"h-3 w-3 mr-1\" />\n                        Admin\n                      </>\n                    ) : (\n                      <>\n                        <User className=\"h-3 w-3 mr-1\" />\n                        User\n                      </>\n                    )}\n                  </Badge>\n                  <Badge \n                    variant={user.isActive ? 'secondary' : 'outline'}\n                    className={user.isActive ? 'text-green-600 bg-green-100 dark:bg-green-900/20' : 'text-red-600 bg-red-100 dark:bg-red-900/20'}\n                    data-testid=\"modal-user-status\"\n                  >\n                    {user.isActive ? (\n                      <>\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Active\n                      </>\n                    ) : (\n                      <>\n                        <XCircle className=\"h-3 w-3 mr-1\" />\n                        Inactive\n                      </>\n                    )}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              {isEditing ? (\n                <>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={handleCancel}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    onClick={handleSave}\n                    disabled={updateUserMutation.isPending}\n                    data-testid=\"button-save-user\"\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    {updateUserMutation.isPending ? 'Saving...' : 'Save'}\n                  </Button>\n                </>\n              ) : (\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => setIsEditing(true)}\n                  data-testid=\"button-edit-user\"\n                >\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </Button>\n              )}\n            </div>\n          </div>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n            <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Orders</p>\n                      <p className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                        {statsLoading ? <Skeleton className=\"h-6 w-8\" /> : userStats?.totalOrders || 0}\n                      </p>\n                    </div>\n                    <Activity className=\"h-6 w-6 text-blue-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Volume</p>\n                      <p className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                        {statsLoading ? <Skeleton className=\"h-6 w-16\" /> : formatCurrency(userStats?.totalVolume || '0')}\n                      </p>\n                    </div>\n                    <Activity className=\"h-6 w-6 text-green-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Account Value</p>\n                      <p className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                        {statsLoading ? <Skeleton className=\"h-6 w-16\" /> : formatCurrency(userStats?.accountValue || '0')}\n                      </p>\n                    </div>\n                    <Activity className=\"h-6 w-6 text-purple-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Last Login</p>\n                      <p className=\"text-sm font-bold text-gray-900 dark:text-white\">\n                        {statsLoading ? <Skeleton className=\"h-4 w-20\" /> : \n                          userStats?.lastLoginAt ? formatDate(userStats.lastLoginAt).split(',')[0] : 'Never'\n                        }\n                      </p>\n                    </div>\n                    <Clock className=\"h-6 w-6 text-orange-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Account Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Account Information</CardTitle>\n                <CardDescription>Personal and account details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {isEditing ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"edit-email\">Email Address</Label>\n                      <Input\n                        id=\"edit-email\"\n                        type=\"email\"\n                        value={editForm.email}\n                        onChange={(e) => setEditForm(prev => ({ ...prev, email: e.target.value }))}\n                        data-testid=\"input-edit-email\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"edit-role\">Role</Label>\n                      <Select\n                        value={editForm.role}\n                        onValueChange={(value) => setEditForm(prev => ({ ...prev, role: value }))}\n                      >\n                        <SelectTrigger data-testid=\"select-edit-role\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"user\">User</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"edit-firstName\">First Name</Label>\n                      <Input\n                        id=\"edit-firstName\"\n                        value={editForm.firstName}\n                        onChange={(e) => setEditForm(prev => ({ ...prev, firstName: e.target.value }))}\n                        data-testid=\"input-edit-firstName\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"edit-lastName\">Last Name</Label>\n                      <Input\n                        id=\"edit-lastName\"\n                        value={editForm.lastName}\n                        onChange={(e) => setEditForm(prev => ({ ...prev, lastName: e.target.value }))}\n                        data-testid=\"input-edit-lastName\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"edit-active\"\n                        checked={editForm.isActive}\n                        onCheckedChange={(checked) => setEditForm(prev => ({ ...prev, isActive: checked }))}\n                        data-testid=\"switch-edit-active\"\n                      />\n                      <Label htmlFor=\"edit-active\">Account Active</Label>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm text-gray-600 dark:text-gray-400\">Email</Label>\n                      <p className=\"text-sm font-medium\" data-testid=\"display-email\">{user.email}</p>\n                    </div>\n                    \n                    <div>\n                      <Label className=\"text-sm text-gray-600 dark:text-gray-400\">Role</Label>\n                      <p className=\"text-sm font-medium\" data-testid=\"display-role\">{user.role}</p>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm text-gray-600 dark:text-gray-400\">First Name</Label>\n                      <p className=\"text-sm font-medium\" data-testid=\"display-firstName\">\n                        {user.firstName || 'Not provided'}\n                      </p>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm text-gray-600 dark:text-gray-400\">Last Name</Label>\n                      <p className=\"text-sm font-medium\" data-testid=\"display-lastName\">\n                        {user.lastName || 'Not provided'}\n                      </p>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm text-gray-600 dark:text-gray-400\">Registration Date</Label>\n                      <p className=\"text-sm font-medium flex items-center space-x-1\" data-testid=\"display-registration\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>{formatDate(user.createdAt)}</span>\n                      </p>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm text-gray-600 dark:text-gray-400\">Last Updated</Label>\n                      <p className=\"text-sm font-medium flex items-center space-x-1\" data-testid=\"display-updated\">\n                        <Clock className=\"h-4 w-4\" />\n                        <span>{formatDate(user.updatedAt)}</span>\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"activity\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n                <CardDescription>User activity and order history</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <Activity className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Activity History</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    Activity tracking will be implemented in future updates\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Account Settings</CardTitle>\n                <CardDescription>Manage user account preferences and security</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Account Status</p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {user.isActive ? 'Account is active' : 'Account is deactivated'}\n                      </p>\n                    </div>\n                    <Switch\n                      checked={user.isActive}\n                      onCheckedChange={(checked) => {\n                        updateUserMutation.mutate({ isActive: checked });\n                      }}\n                      disabled={updateUserMutation.isPending}\n                      data-testid=\"switch-account-status\"\n                    />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">Admin Privileges</p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Grant or revoke administrative access\n                      </p>\n                    </div>\n                    <Select\n                      value={user.role}\n                      onValueChange={(value) => {\n                        updateUserMutation.mutate({ role: value });\n                      }}\n                    >\n                      <SelectTrigger className=\"w-32\" data-testid=\"select-user-role\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"user\">User</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"border-t pt-6\">\n                    <div className=\"bg-red-50 dark:bg-red-900/20 p-4 rounded-lg\">\n                      <p className=\"font-medium text-red-900 dark:text-red-100 mb-2\">Danger Zone</p>\n                      <p className=\"text-sm text-red-700 dark:text-red-300 mb-4\">\n                        Permanently delete this user account. This action cannot be undone.\n                      </p>\n                      <Button \n                        variant=\"destructive\" \n                        size=\"sm\"\n                        data-testid=\"button-delete-user-account\"\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Delete Account\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":22479},"client/src/pages/admin-telegram.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { \n  MessageSquare, \n  Bot, \n  Send, \n  Settings, \n  TestTube, \n  History, \n  Users, \n  Webhook,\n  Eye,\n  EyeOff,\n  AlertCircle,\n  CheckCircle,\n  XCircle,\n  RefreshCw,\n  Plus,\n  Trash2,\n  Edit,\n  Copy,\n  QrCode,\n  HelpCircle,\n  Globe,\n  Shield,\n  Bell,\n  FileText,\n  Search,\n  Filter,\n  Calendar,\n  Download,\n  Upload,\n  Zap\n} from \"lucide-react\";\n\nimport { AdminLayout } from \"@/components/admin-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\ninterface TelegramConfig {\n  id: string;\n  name: string;\n  botToken: string;\n  chatId: string;\n  isDefault: boolean;\n  isActive: boolean;\n  description?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface NotificationHistory {\n  id: string;\n  type: string;\n  chatId: string;\n  message: string;\n  status: 'sent' | 'failed' | 'pending';\n  sentAt: string;\n  errorMessage?: string;\n}\n\ninterface BotInfo {\n  id: number;\n  first_name: string;\n  username: string;\n  can_join_groups: boolean;\n  can_read_all_group_messages: boolean;\n  supports_inline_queries: boolean;\n}\n\ninterface TelegramStatus {\n  configured: boolean;\n  hasToken: boolean;\n  hasChatId: boolean;\n  hasSigningSecret: boolean;\n  connectionTest?: {\n    success: boolean;\n    botInfo?: BotInfo;\n    error?: string;\n  };\n}\n\nexport function AdminTelegramPage() {\n  const { toast } = useToast();\n  \n  // Form states\n  const [newConfig, setNewConfig] = useState({\n    name: '',\n    botToken: '',\n    chatId: '',\n    description: '',\n    isDefault: false,\n    isActive: true\n  });\n  \n  // UI States\n  const [showTokens, setShowTokens] = useState<{ [key: string]: boolean }>({});\n  const [selectedConfig, setSelectedConfig] = useState<string>('');\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [testingConnection, setTestingConnection] = useState(false);\n  const [sendingTest, setSendingTest] = useState(false);\n  \n  // Notification settings\n  const [notificationSettings, setNotificationSettings] = useState({\n    newOrders: true,\n    orderStatus: true,\n    payments: true,\n    systemAlerts: true,\n    adminActions: false\n  });\n  \n  // History filters\n  const [historyFilters, setHistoryFilters] = useState({\n    search: '',\n    type: 'all',\n    status: 'all',\n    dateFrom: '',\n    dateTo: '',\n    page: 1,\n    limit: 20\n  });\n\n  // Fetch telegram configs\n  const { \n    data: telegramConfigs = [], \n    isLoading: configsLoading,\n    refetch: refetchConfigs\n  } = useQuery<TelegramConfig[]>({\n    queryKey: ['/api/admin/telegram-configs'],\n    retry: 2,\n  });\n\n  // Fetch telegram status\n  const { \n    data: telegramStatus,\n    isLoading: statusLoading,\n    refetch: refetchStatus\n  } = useQuery<TelegramStatus>({\n    queryKey: ['/api/admin/telegram/status'],\n    retry: 2,\n  });\n\n  // Fetch notification history\n  const { \n    data: notificationHistory = [],\n    isLoading: historyLoading,\n    refetch: refetchHistory\n  } = useQuery<NotificationHistory[]>({\n    queryKey: ['/api/admin/telegram/history', historyFilters],\n    retry: 2,\n  });\n\n  // Create config mutation\n  const createConfigMutation = useMutation({\n    mutationFn: async (configData: Omit<TelegramConfig, 'id' | 'createdAt' | 'updatedAt'>) => {\n      const response = await apiRequest('POST', '/api/admin/telegram-configs', configData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Configuration Created\",\n        description: \"Telegram bot configuration has been added successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/telegram-configs'] });\n      setShowAddModal(false);\n      setNewConfig({\n        name: '',\n        botToken: '',\n        chatId: '',\n        description: '',\n        isDefault: false,\n        isActive: true\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create telegram configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update config mutation\n  const updateConfigMutation = useMutation({\n    mutationFn: async ({ id, ...configData }: Partial<TelegramConfig> & { id: string }) => {\n      const response = await apiRequest('PUT', `/api/admin/telegram-configs/${id}`, configData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Configuration Updated\",\n        description: \"Telegram bot configuration has been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/telegram-configs'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update telegram configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete config mutation\n  const deleteConfigMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/admin/telegram-configs/${id}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Configuration Deleted\",\n        description: \"Telegram bot configuration has been removed\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/telegram-configs'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete telegram configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test connection mutation\n  const testConnectionMutation = useMutation({\n    mutationFn: async (configId: string) => {\n      setTestingConnection(true);\n      const response = await apiRequest('POST', `/api/admin/telegram/test-connection`, { configId });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      if (data.success) {\n        toast({\n          title: \"Connection Successful\",\n          description: `Connected to bot: ${data.botInfo?.first_name || 'Unknown'}`,\n        });\n      } else {\n        toast({\n          title: \"Connection Failed\",\n          description: data.error || \"Unable to connect to Telegram bot\",\n          variant: \"destructive\",\n        });\n      }\n      setTestingConnection(false);\n      refetchStatus();\n    },\n    onError: () => {\n      toast({\n        title: \"Test Failed\",\n        description: \"Failed to test telegram connection\",\n        variant: \"destructive\",\n      });\n      setTestingConnection(false);\n    },\n  });\n\n  // Send test message mutation\n  const sendTestMutation = useMutation({\n    mutationFn: async ({ configId, message }: { configId: string; message: string }) => {\n      setSendingTest(true);\n      const response = await apiRequest('POST', `/api/admin/telegram/send-test`, {\n        configId,\n        message: message || 'Test message from CryptoFlow Admin Panel'\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      if (data.success) {\n        toast({\n          title: \"Test Message Sent\",\n          description: \"Test message was sent successfully to Telegram\",\n        });\n      } else {\n        toast({\n          title: \"Send Failed\",\n          description: data.error || \"Failed to send test message\",\n          variant: \"destructive\",\n        });\n      }\n      setSendingTest(false);\n      refetchHistory();\n    },\n    onError: () => {\n      toast({\n        title: \"Send Failed\",\n        description: \"Failed to send test message\",\n        variant: \"destructive\",\n      });\n      setSendingTest(false);\n    },\n  });\n\n  // Toggle token visibility\n  const toggleTokenVisibility = (configId: string) => {\n    setShowTokens(prev => ({\n      ...prev,\n      [configId]: !prev[configId]\n    }));\n  };\n\n  // Mask token for display\n  const maskToken = (token: string) => {\n    if (token.length <= 8) return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';\n    return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' + token.slice(-4);\n  };\n\n  // Copy to clipboard\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: `${label} has been copied to clipboard`,\n    });\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Get status color\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'sent': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';\n      case 'failed': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';\n      case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  // Get status icon\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'sent': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'failed': return <XCircle className=\"h-4 w-4\" />;\n      case 'pending': return <RefreshCw className=\"h-4 w-4 animate-spin\" />;\n      default: return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <AdminLayout\n      title=\"Telegram Management\"\n      currentSection=\"telegram\"\n      breadcrumbs={[\n        { label: 'Admin', href: '/admin' },\n        { label: 'Telegram Management' }\n      ]}\n    >\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"h-12 w-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n              <MessageSquare className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Telegram Management</h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Configure Telegram bots and notification settings\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => refetchConfigs()}\n              disabled={configsLoading}\n              data-testid=\"button-refresh-configs\"\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${configsLoading ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n            \n            <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n              <DialogTrigger asChild>\n                <Button\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                  data-testid=\"button-add-config\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Bot Config\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Add Telegram Bot Configuration</DialogTitle>\n                  <DialogDescription>\n                    Create a new Telegram bot configuration for notifications\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"config-name\">Configuration Name</Label>\n                    <Input\n                      id=\"config-name\"\n                      placeholder=\"e.g., Main Bot, Alerts Bot\"\n                      value={newConfig.name}\n                      onChange={(e) => setNewConfig(prev => ({ ...prev, name: e.target.value }))}\n                      data-testid=\"input-config-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"bot-token\">Bot Token</Label>\n                    <Input\n                      id=\"bot-token\"\n                      placeholder=\"1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                      value={newConfig.botToken}\n                      onChange={(e) => setNewConfig(prev => ({ ...prev, botToken: e.target.value }))}\n                      data-testid=\"input-bot-token\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"chat-id\">Chat ID</Label>\n                    <Input\n                      id=\"chat-id\"\n                      placeholder=\"-1001234567890 or @channel_name\"\n                      value={newConfig.chatId}\n                      onChange={(e) => setNewConfig(prev => ({ ...prev, chatId: e.target.value }))}\n                      data-testid=\"input-chat-id\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"description\">Description (Optional)</Label>\n                    <Textarea\n                      id=\"description\"\n                      placeholder=\"Brief description of this bot configuration\"\n                      value={newConfig.description}\n                      onChange={(e) => setNewConfig(prev => ({ ...prev, description: e.target.value }))}\n                      data-testid=\"input-description\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"is-default\"\n                      checked={newConfig.isDefault}\n                      onCheckedChange={(checked) => setNewConfig(prev => ({ ...prev, isDefault: !!checked }))}\n                      data-testid=\"checkbox-is-default\"\n                    />\n                    <Label htmlFor=\"is-default\">Set as default bot</Label>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"is-active\"\n                      checked={newConfig.isActive}\n                      onCheckedChange={(checked) => setNewConfig(prev => ({ ...prev, isActive: !!checked }))}\n                      data-testid=\"checkbox-is-active\"\n                    />\n                    <Label htmlFor=\"is-active\">Activate immediately</Label>\n                  </div>\n                  \n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowAddModal(false)}\n                      data-testid=\"button-cancel-config\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      onClick={() => createConfigMutation.mutate(newConfig)}\n                      disabled={createConfigMutation.isPending || !newConfig.name || !newConfig.botToken || !newConfig.chatId}\n                      data-testid=\"button-save-config\"\n                    >\n                      {createConfigMutation.isPending ? 'Creating...' : 'Create Bot'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Telegram Status Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Bots</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {telegramConfigs.length}\n                  </p>\n                </div>\n                <Bot className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Bots</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {telegramConfigs.filter(c => c.isActive).length}\n                  </p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Connection</p>\n                  <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    {telegramStatus?.configured ? 'Connected' : 'Not Connected'}\n                  </p>\n                </div>\n                {telegramStatus?.configured ? (\n                  <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                ) : (\n                  <XCircle className=\"h-8 w-8 text-red-500\" />\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Messages Today</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {notificationHistory.filter(h => \n                      new Date(h.sentAt).toDateString() === new Date().toDateString()\n                    ).length}\n                  </p>\n                </div>\n                <Send className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"configs\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"configs\" data-testid=\"tab-configs\">\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Configurations\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">\n              <Bell className=\"h-4 w-4 mr-2\" />\n              Notifications\n            </TabsTrigger>\n            <TabsTrigger value=\"templates\" data-testid=\"tab-templates\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Templates\n            </TabsTrigger>\n            <TabsTrigger value=\"testing\" data-testid=\"tab-testing\">\n              <TestTube className=\"h-4 w-4 mr-2\" />\n              Testing\n            </TabsTrigger>\n            <TabsTrigger value=\"history\" data-testid=\"tab-history\">\n              <History className=\"h-4 w-4 mr-2\" />\n              History\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Bot Configurations Tab */}\n          <TabsContent value=\"configs\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Bot className=\"h-5 w-5 mr-2 text-blue-600 dark:text-blue-400\" />\n                  Bot Configurations\n                </CardTitle>\n                <CardDescription>\n                  Manage your Telegram bot configurations and connection settings\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {configsLoading ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-4 p-4 border rounded-lg\">\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4 animate-pulse\"></div>\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2 animate-pulse\"></div>\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4 animate-pulse\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : telegramConfigs.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Bot className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No Bot Configurations</h3>\n                    <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                      Get started by adding your first Telegram bot configuration\n                    </p>\n                    <Button onClick={() => setShowAddModal(true)}>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add First Bot\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {telegramConfigs.map((config) => (\n                      <div \n                        key={config.id}\n                        className=\"p-4 border rounded-lg bg-white dark:bg-gray-800 space-y-3\"\n                        data-testid={`config-card-${config.id}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className={`h-3 w-3 rounded-full ${config.isActive ? 'bg-green-500' : 'bg-gray-400'}`}></div>\n                            <h4 className=\"font-medium text-gray-900 dark:text-white\">{config.name}</h4>\n                            {config.isDefault && (\n                              <Badge variant=\"secondary\" data-testid={`badge-default-${config.id}`}>Default</Badge>\n                            )}\n                            <Badge \n                              variant={config.isActive ? \"default\" : \"secondary\"}\n                              data-testid={`badge-status-${config.id}`}\n                            >\n                              {config.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => testConnectionMutation.mutate(config.id)}\n                              disabled={testingConnection}\n                              data-testid={`button-test-${config.id}`}\n                            >\n                              <TestTube className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => updateConfigMutation.mutate({\n                                id: config.id,\n                                isActive: !config.isActive\n                              })}\n                              data-testid={`button-toggle-${config.id}`}\n                            >\n                              {config.isActive ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteConfigMutation.mutate(config.id)}\n                              disabled={deleteConfigMutation.isPending}\n                              data-testid={`button-delete-${config.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 text-red-500\" />\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <Label className=\"text-xs font-medium text-gray-500 dark:text-gray-400\">Bot Token</Label>\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <code className=\"text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded\">\n                                {showTokens[config.id] ? config.botToken : maskToken(config.botToken)}\n                              </code>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => toggleTokenVisibility(config.id)}\n                                data-testid={`button-toggle-token-${config.id}`}\n                              >\n                                {showTokens[config.id] ? <EyeOff className=\"h-3 w-3\" /> : <Eye className=\"h-3 w-3\" />}\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => copyToClipboard(config.botToken, 'Bot token')}\n                                data-testid={`button-copy-token-${config.id}`}\n                              >\n                                <Copy className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <Label className=\"text-xs font-medium text-gray-500 dark:text-gray-400\">Chat ID</Label>\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <code \n                                className=\"text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded\"\n                                data-testid={`chat-id-${config.id}`}\n                              >\n                                {config.chatId}\n                              </code>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => copyToClipboard(config.chatId, 'Chat ID')}\n                                data-testid={`button-copy-chat-${config.id}`}\n                              >\n                                <Copy className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {config.description && (\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">{config.description}</p>\n                        )}\n                        \n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          Created: {formatDate(config.createdAt)} ‚Ä¢ Updated: {formatDate(config.updatedAt)}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notification Settings Tab */}\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Notification Types */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Bell className=\"h-5 w-5 mr-2 text-purple-600 dark:text-purple-400\" />\n                    Notification Types\n                  </CardTitle>\n                  <CardDescription>\n                    Configure which events trigger Telegram notifications\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label htmlFor=\"notify-new-orders\">New Orders</Label>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Notify when new exchange orders are created\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"notify-new-orders\"\n                      checked={notificationSettings.newOrders}\n                      onCheckedChange={(checked) => setNotificationSettings(prev => ({\n                        ...prev,\n                        newOrders: checked\n                      }))}\n                      data-testid=\"notify-new-orders\"\n                    />\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label htmlFor=\"notify-order-status\">Order Status Changes</Label>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Notify when order status is updated\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"notify-order-status\"\n                      checked={notificationSettings.orderStatus}\n                      onCheckedChange={(checked) => setNotificationSettings(prev => ({\n                        ...prev,\n                        orderStatus: checked\n                      }))}\n                      data-testid=\"notify-order-status\"\n                    />\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label htmlFor=\"notify-payments\">Payment Confirmations</Label>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Notify when payments are confirmed\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"notify-payments\"\n                      checked={notificationSettings.payments}\n                      onCheckedChange={(checked) => setNotificationSettings(prev => ({\n                        ...prev,\n                        payments: checked\n                      }))}\n                      data-testid=\"notify-payments\"\n                    />\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label htmlFor=\"notify-system-alerts\">System Alerts</Label>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Notify about system errors and warnings\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"notify-system-alerts\"\n                      checked={notificationSettings.systemAlerts}\n                      onCheckedChange={(checked) => setNotificationSettings(prev => ({\n                        ...prev,\n                        systemAlerts: checked\n                      }))}\n                      data-testid=\"notify-system-alerts\"\n                    />\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label htmlFor=\"notify-admin-actions\">Admin Actions</Label>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Notify about administrative actions\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"notify-admin-actions\"\n                      checked={notificationSettings.adminActions}\n                      onCheckedChange={(checked) => setNotificationSettings(prev => ({\n                        ...prev,\n                        adminActions: checked\n                      }))}\n                      data-testid=\"notify-admin-actions\"\n                    />\n                  </div>\n                  \n                  <div className=\"pt-4\">\n                    <Button className=\"w-full\" data-testid=\"button-save-notification-settings\">\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Save Notification Settings\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Chat Management */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Users className=\"h-5 w-5 mr-2 text-green-600 dark:text-green-400\" />\n                    Chat Management\n                  </CardTitle>\n                  <CardDescription>\n                    Manage chat configurations and webhook settings\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label>Current Chat Information</Label>\n                    <div className=\"mt-2 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                      <div className=\"text-sm space-y-1\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Chat ID:</span>\n                          <code className=\"text-xs bg-white dark:bg-gray-800 px-1 rounded\">\n                            {telegramConfigs.find(c => c.isDefault)?.chatId || 'Not configured'}\n                          </code>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Chat Type:</span>\n                          <span className=\"text-xs\">\n                            {telegramConfigs.find(c => c.isDefault)?.chatId?.startsWith('@') ? 'Channel' : \n                             telegramConfigs.find(c => c.isDefault)?.chatId?.startsWith('-100') ? 'Supergroup' :\n                             telegramConfigs.find(c => c.isDefault)?.chatId?.startsWith('-') ? 'Group' : 'Private'}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <Label>Webhook Configuration</Label>\n                    <div className=\"mt-2 space-y-3\">\n                      <div>\n                        <Label className=\"text-xs\">Webhook URL</Label>\n                        <Input\n                          placeholder=\"https://your-domain.com/api/telegram/webhook\"\n                          className=\"text-xs\"\n                          data-testid=\"input-webhook-url\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"h-2 w-2 bg-gray-400 rounded-full\"></div>\n                        <span className=\"text-xs text-gray-600 dark:text-gray-400\">Webhook Status: Not configured</span>\n                      </div>\n                      \n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-setup-webhook\">\n                        <Webhook className=\"h-4 w-4 mr-2\" />\n                        Setup Webhook\n                      </Button>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div>\n                    <Label>Quick Setup</Label>\n                    <div className=\"mt-2 space-y-2\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-generate-qr\">\n                        <QrCode className=\"h-4 w-4 mr-2\" />\n                        Generate QR Code\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-setup-guide\">\n                        <HelpCircle className=\"h-4 w-4 mr-2\" />\n                        Setup Instructions\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Message Templates Tab */}\n          <TabsContent value=\"templates\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"h-5 w-5 mr-2 text-orange-600 dark:text-orange-400\" />\n                  Message Templates\n                </CardTitle>\n                <CardDescription>\n                  Customize notification message templates with dynamic variables\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Use variables like <code>{\"{orderID}\"}</code>, <code>{\"{amount}\"}</code>, <code>{\"{currency}\"}</code>, <code>{\"{status}\"}</code> in your templates\n                  </AlertDescription>\n                </Alert>\n                \n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"template-new-order\">New Order Template</Label>\n                      <Textarea\n                        id=\"template-new-order\"\n                        placeholder=\"üÜï New Order #{orderID}&#10;Amount: {amount} {fromCurrency}&#10;Target: {toAmount} {toCurrency}&#10;Status: {status}\"\n                        className=\"h-24 text-xs\"\n                        data-testid=\"template-new-order\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"template-payment\">Payment Confirmation Template</Label>\n                      <Textarea\n                        id=\"template-payment\"\n                        placeholder=\"‚úÖ Payment Confirmed&#10;Order: #{orderID}&#10;Amount: {amount} {currency}&#10;TX: {txHash}\"\n                        className=\"h-24 text-xs\"\n                        data-testid=\"template-payment\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"template-status\">Status Update Template</Label>\n                      <Textarea\n                        id=\"template-status\"\n                        placeholder=\"üîÑ Order Status Update&#10;Order: #{orderID}&#10;New Status: {status}&#10;Updated: {timestamp}\"\n                        className=\"h-24 text-xs\"\n                        data-testid=\"template-status\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"template-system\">System Alert Template</Label>\n                      <Textarea\n                        id=\"template-system\"\n                        placeholder=\"üö® System Alert&#10;Type: {alertType}&#10;Message: {message}&#10;Time: {timestamp}\"\n                        className=\"h-24 text-xs\"\n                        data-testid=\"template-system\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <Button data-testid=\"button-save-templates\">\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Save Templates\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-reset-templates\">\n                    Reset to Default\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-preview-templates\">\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    Preview\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Testing Tab */}\n          <TabsContent value=\"testing\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Connection Testing */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <TestTube className=\"h-5 w-5 mr-2 text-red-600 dark:text-red-400\" />\n                    Connection Testing\n                  </CardTitle>\n                  <CardDescription>\n                    Test your Telegram bot connections and functionality\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label>Select Bot Configuration</Label>\n                    <Select \n                      value={selectedConfig} \n                      onValueChange={setSelectedConfig}\n                      data-testid=\"select-test-config\"\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Choose a bot configuration\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {telegramConfigs.map((config) => (\n                          <SelectItem key={config.id} value={config.id}>\n                            {config.name} {config.isDefault && '(Default)'}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {selectedConfig && (\n                    <div className=\"space-y-3\">\n                      <Button\n                        onClick={() => testConnectionMutation.mutate(selectedConfig)}\n                        disabled={testingConnection}\n                        className=\"w-full\"\n                        data-testid=\"button-test-connection\"\n                      >\n                        <TestTube className={`h-4 w-4 mr-2 ${testingConnection ? 'animate-spin' : ''}`} />\n                        {testingConnection ? 'Testing Connection...' : 'Test Connection'}\n                      </Button>\n                      \n                      <div>\n                        <Label>Test Message</Label>\n                        <Textarea\n                          placeholder=\"Enter a test message to send...\"\n                          className=\"h-20\"\n                          data-testid=\"input-test-message\"\n                        />\n                      </div>\n                      \n                      <Button\n                        onClick={() => sendTestMutation.mutate({\n                          configId: selectedConfig,\n                          message: 'Test message from CryptoFlow Admin Panel'\n                        })}\n                        disabled={sendingTest}\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        data-testid=\"button-send-test\"\n                      >\n                        <Send className={`h-4 w-4 mr-2 ${sendingTest ? 'animate-spin' : ''}`} />\n                        {sendingTest ? 'Sending...' : 'Send Test Message'}\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Bot Status Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Shield className=\"h-5 w-5 mr-2 text-indigo-600 dark:text-indigo-400\" />\n                    Bot Status & Information\n                  </CardTitle>\n                  <CardDescription>\n                    Current bot status and configuration details\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {statusLoading ? (\n                    <div className=\"space-y-3\">\n                      {[...Array(4)].map((_, i) => (\n                        <div key={i} className=\"flex justify-between\">\n                          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/3 animate-pulse\"></div>\n                          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4 animate-pulse\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Configuration Status</span>\n                        <Badge \n                          variant={telegramStatus?.configured ? \"default\" : \"secondary\"}\n                          data-testid=\"status-telegram-connection\"\n                        >\n                          {telegramStatus?.configured ? 'Configured' : 'Not Configured'}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Bot Token</span>\n                        <Badge variant={telegramStatus?.hasToken ? \"default\" : \"secondary\"}>\n                          {telegramStatus?.hasToken ? 'Set' : 'Missing'}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Chat ID</span>\n                        <Badge variant={telegramStatus?.hasChatId ? \"default\" : \"secondary\"}>\n                          {telegramStatus?.hasChatId ? 'Set' : 'Missing'}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Signing Secret</span>\n                        <Badge variant={telegramStatus?.hasSigningSecret ? \"default\" : \"secondary\"}>\n                          {telegramStatus?.hasSigningSecret ? 'Set' : 'Missing'}\n                        </Badge>\n                      </div>\n\n                      {telegramStatus?.connectionTest?.botInfo && (\n                        <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                          <Label className=\"text-xs font-medium text-green-700 dark:text-green-400\">Bot Information</Label>\n                          <div className=\"mt-1 text-xs space-y-1\">\n                            <div>Name: {telegramStatus.connectionTest.botInfo.first_name}</div>\n                            <div>Username: @{telegramStatus.connectionTest.botInfo.username}</div>\n                            <div>Groups: {telegramStatus.connectionTest.botInfo.can_join_groups ? 'Yes' : 'No'}</div>\n                            <div>Inline: {telegramStatus.connectionTest.botInfo.supports_inline_queries ? 'Yes' : 'No'}</div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Notification History Tab */}\n          <TabsContent value=\"history\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <History className=\"h-5 w-5 mr-2 text-teal-600 dark:text-teal-400\" />\n                  Notification History\n                </CardTitle>\n                <CardDescription>\n                  View and manage sent Telegram notifications\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {/* History Filters */}\n                <div className=\"flex flex-col sm:flex-row gap-3 mb-6\">\n                  <div className=\"relative flex-1\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <Input\n                      placeholder=\"Search messages...\"\n                      value={historyFilters.search}\n                      onChange={(e) => setHistoryFilters(prev => ({ ...prev, search: e.target.value }))}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-messages\"\n                    />\n                  </div>\n                  \n                  <Select\n                    value={historyFilters.type}\n                    onValueChange={(value) => setHistoryFilters(prev => ({ ...prev, type: value }))}\n                  >\n                    <SelectTrigger className=\"w-40\" data-testid=\"filter-message-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Types</SelectItem>\n                      <SelectItem value=\"order\">Order</SelectItem>\n                      <SelectItem value=\"payment\">Payment</SelectItem>\n                      <SelectItem value=\"system\">System</SelectItem>\n                      <SelectItem value=\"admin\">Admin</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  \n                  <Select\n                    value={historyFilters.status}\n                    onValueChange={(value) => setHistoryFilters(prev => ({ ...prev, status: value }))}\n                  >\n                    <SelectTrigger className=\"w-32\" data-testid=\"filter-message-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"sent\">Sent</SelectItem>\n                      <SelectItem value=\"failed\">Failed</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  \n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-export-history\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export\n                  </Button>\n                </div>\n\n                {/* History Table */}\n                {historyLoading ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(5)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-4 p-3 border rounded\">\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/6 animate-pulse\"></div>\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4 animate-pulse\"></div>\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/3 animate-pulse\"></div>\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/6 animate-pulse\"></div>\n                        <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/12 animate-pulse\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : notificationHistory.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <History className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No Messages</h3>\n                    <p className=\"text-gray-600 dark:text-gray-400\">\n                      No notification messages found\n                    </p>\n                  </div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Timestamp</TableHead>\n                        <TableHead>Type</TableHead>\n                        <TableHead>Chat ID</TableHead>\n                        <TableHead>Message</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {notificationHistory.map((message) => (\n                        <TableRow key={message.id}>\n                          <TableCell className=\"text-xs\" data-testid={`msg-timestamp-${message.id}`}>\n                            {formatDate(message.sentAt)}\n                          </TableCell>\n                          <TableCell data-testid={`msg-type-${message.id}`}>\n                            <Badge variant=\"outline\">{message.type}</Badge>\n                          </TableCell>\n                          <TableCell className=\"text-xs\" data-testid={`msg-chat-${message.id}`}>\n                            <code>{message.chatId}</code>\n                          </TableCell>\n                          <TableCell className=\"max-w-md\" data-testid={`msg-preview-${message.id}`}>\n                            <div className=\"truncate text-sm\">\n                              {message.message.length > 50 \n                                ? message.message.substring(0, 50) + '...' \n                                : message.message}\n                            </div>\n                          </TableCell>\n                          <TableCell data-testid={`msg-status-${message.id}`}>\n                            <Badge className={getStatusColor(message.status)}>\n                              {getStatusIcon(message.status)}\n                              <span className=\"ml-1\">{message.status}</span>\n                            </Badge>\n                          </TableCell>\n                          <TableCell data-testid={`msg-actions-${message.id}`}>\n                            <div className=\"flex items-center space-x-1\">\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Eye className=\"h-3 w-3\" />\n                              </Button>\n                              {message.status === 'failed' && (\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <RefreshCw className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </AdminLayout>\n  );\n}","size_bytes":56323},"client/src/pages/admin-users.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { \n  Users, \n  UserPlus, \n  Search, \n  Filter, \n  MoreVertical, \n  Edit, \n  Eye, \n  UserX, \n  UserCheck,\n  Trash2,\n  Shield,\n  User,\n  Calendar,\n  Mail,\n  Activity,\n  Download\n} from \"lucide-react\";\n\nimport { AdminLayout } from \"@/components/admin-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { UserDetailModal } from \"@/components/user-detail-modal\";\nimport { AddUserModal } from \"@/components/add-user-modal\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string | null;\n  lastName: string | null;\n  profileImageUrl: string | null;\n  role: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface UsersResponse {\n  users: User[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\ninterface UserFilters {\n  search: string;\n  role: string;\n  status: string;\n  page: number;\n  limit: number;\n}\n\nexport function AdminUsersPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // State for filters and pagination\n  const [filters, setFilters] = useState<UserFilters>({\n    search: '',\n    role: 'all',\n    status: 'all',\n    page: 1,\n    limit: 25\n  });\n\n  // Selected users for bulk operations\n  const [selectedUsers, setSelectedUsers] = useState<Set<string>>(new Set());\n  \n  // Modal states\n  const [userToView, setUserToView] = useState<User | null>(null);\n  const [userToEdit, setUserToEdit] = useState<User | null>(null);\n  const [userToDelete, setUserToDelete] = useState<User | null>(null);\n  const [showAddUserModal, setShowAddUserModal] = useState(false);\n\n  // Debounced search\n  const [searchTerm, setSearchTerm] = useState('');\n  \n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFilters(prev => ({ ...prev, search: searchTerm, page: 1 }));\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [searchTerm]);\n\n  // Fetch users with React Query\n  const { \n    data: usersData, \n    isLoading, \n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['admin', 'users', filters],\n    queryFn: async (): Promise<UsersResponse> => {\n      const token = localStorage.getItem('auth_token');\n      const params = new URLSearchParams();\n      \n      if (filters.search) params.append('search', filters.search);\n      if (filters.role !== 'all') params.append('role', filters.role);\n      if (filters.status !== 'all') params.append('status', filters.status);\n      params.append('page', filters.page.toString());\n      params.append('limit', filters.limit.toString());\n\n      const response = await fetch(`/api/admin/users?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch users');\n      }\n\n      return response.json();\n    },\n    retry: 1,\n  });\n\n  // Toggle user status mutation\n  const toggleStatusMutation = useMutation({\n    mutationFn: async ({ userId, isActive }: { userId: string; isActive: boolean }) => {\n      const response = await apiRequest('PUT', `/api/admin/users/${userId}`, { isActive });\n      return await response.json();\n    },\n    onSuccess: (_, variables) => {\n      toast({\n        title: \"Status Updated\",\n        description: `User has been ${variables.isActive ? 'activated' : 'deactivated'}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest('DELETE', `/api/admin/users/${userId}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Deleted\",\n        description: \"User has been permanently deleted\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n      setUserToDelete(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Change user role mutation\n  const changeRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      const response = await apiRequest('PUT', `/api/admin/users/${userId}`, { role });\n      return await response.json();\n    },\n    onSuccess: (_, variables) => {\n      toast({\n        title: \"Role Updated\",\n        description: `User role changed to ${variables.role}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk activate users mutation\n  const bulkActivateMutation = useMutation({\n    mutationFn: async (userIds: string[]) => {\n      const results = await Promise.all(\n        userIds.map(async userId => {\n          const response = await apiRequest('PUT', `/api/admin/users/${userId}`, { isActive: true });\n          return await response.json();\n        })\n      );\n      return results;\n    },\n    onSuccess: (_, userIds) => {\n      toast({\n        title: \"Users Activated\",\n        description: `${userIds.length} user${userIds.length !== 1 ? 's' : ''} activated successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n      setSelectedUsers(new Set());\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to activate some users\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk deactivate users mutation\n  const bulkDeactivateMutation = useMutation({\n    mutationFn: async (userIds: string[]) => {\n      const results = await Promise.all(\n        userIds.map(async userId => {\n          const response = await apiRequest('PUT', `/api/admin/users/${userId}`, { isActive: false });\n          return await response.json();\n        })\n      );\n      return results;\n    },\n    onSuccess: (_, userIds) => {\n      toast({\n        title: \"Users Deactivated\",\n        description: `${userIds.length} user${userIds.length !== 1 ? 's' : ''} deactivated successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n      setSelectedUsers(new Set());\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to deactivate some users\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Export users mutation\n  const exportUsersMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch('/api/admin/users/export', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to export users');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `users_export_${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Export Complete\",\n        description: \"Users data has been exported successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export users data\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const users = usersData?.users || [];\n  const totalUsers = usersData?.total || 0;\n  const totalPages = usersData?.totalPages || 1;\n\n  // Handle select all\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedUsers(new Set(users.map(user => user.id)));\n    } else {\n      setSelectedUsers(new Set());\n    }\n  };\n\n  // Handle individual selection\n  const handleSelectUser = (userId: string, checked: boolean) => {\n    const newSelected = new Set(selectedUsers);\n    if (checked) {\n      newSelected.add(userId);\n    } else {\n      newSelected.delete(userId);\n    }\n    setSelectedUsers(newSelected);\n  };\n\n  // Get user display name\n  const getUserDisplayName = (user: User) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    return user.firstName || user.lastName || user.email.split('@')[0];\n  };\n\n  // Get user initials\n  const getUserInitials = (user: User) => {\n    const name = getUserDisplayName(user);\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Handle pagination\n  const handlePageChange = (newPage: number) => {\n    setFilters(prev => ({ ...prev, page: newPage }));\n  };\n\n  const selectedCount = selectedUsers.size;\n\n  return (\n    <AdminLayout\n      title=\"Users Management\"\n      currentSection=\"users\"\n      breadcrumbs={[\n        { label: 'Admin', href: '/admin' },\n        { label: 'Users Management' }\n      ]}\n    >\n      <div className=\"space-y-6\">\n        {/* Header with Search and Actions */}\n        <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"h-12 w-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n              <Users className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Users Management</h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Manage user accounts, roles and access permissions\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => exportUsersMutation.mutate()}\n              disabled={exportUsersMutation.isPending}\n              data-testid=\"button-export-users\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              {exportUsersMutation.isPending ? 'Exporting...' : 'Export'}\n            </Button>\n            \n            <Button\n              onClick={() => setShowAddUserModal(true)}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n              data-testid=\"button-add-user\"\n            >\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Add User\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Users</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {totalUsers.toLocaleString()}\n                  </p>\n                </div>\n                <Users className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Users</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {users.filter(u => u.isActive).length}\n                  </p>\n                </div>\n                <UserCheck className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Admin Users</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {users.filter(u => u.role === 'admin').length}\n                  </p>\n                </div>\n                <Shield className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">New This Month</p>\n                  <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {users.filter(u => {\n                      const created = new Date(u.createdAt);\n                      const thisMonth = new Date();\n                      return created.getMonth() === thisMonth.getMonth() && \n                             created.getFullYear() === thisMonth.getFullYear();\n                    }).length}\n                  </p>\n                </div>\n                <Activity className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters and Search */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n              <div className=\"flex flex-col sm:flex-row gap-3 flex-1\">\n                {/* Search */}\n                <div className=\"relative flex-1 max-w-md\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search users by name or email...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-user-search\"\n                  />\n                </div>\n\n                {/* Role Filter */}\n                <Select\n                  value={filters.role}\n                  onValueChange={(value) => setFilters(prev => ({ ...prev, role: value, page: 1 }))}\n                >\n                  <SelectTrigger className=\"w-40\" data-testid=\"filter-user-role\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Roles</SelectItem>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                    <SelectItem value=\"user\">User</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                {/* Status Filter */}\n                <Select\n                  value={filters.status}\n                  onValueChange={(value) => setFilters(prev => ({ ...prev, status: value, page: 1 }))}\n                >\n                  <SelectTrigger className=\"w-40\" data-testid=\"filter-user-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                {/* Items per page */}\n                <Select\n                  value={filters.limit.toString()}\n                  onValueChange={(value) => setFilters(prev => ({ ...prev, limit: parseInt(value), page: 1 }))}\n                >\n                  <SelectTrigger className=\"w-24\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"10\">10</SelectItem>\n                    <SelectItem value=\"25\">25</SelectItem>\n                    <SelectItem value=\"50\">50</SelectItem>\n                    <SelectItem value=\"100\">100</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Bulk Actions Bar */}\n            {selectedCount > 0 && (\n              <div className=\"flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border\">\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n                    {selectedCount} user{selectedCount !== 1 ? 's' : ''} selected\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => bulkActivateMutation.mutate(Array.from(selectedUsers))}\n                    disabled={bulkActivateMutation.isPending}\n                    data-testid=\"button-bulk-activate\"\n                  >\n                    <UserCheck className=\"h-4 w-4 mr-1\" />\n                    {bulkActivateMutation.isPending ? 'Activating...' : 'Activate'}\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => bulkDeactivateMutation.mutate(Array.from(selectedUsers))}\n                    disabled={bulkDeactivateMutation.isPending}\n                    data-testid=\"button-bulk-deactivate\"\n                  >\n                    <UserX className=\"h-4 w-4 mr-1\" />\n                    {bulkDeactivateMutation.isPending ? 'Deactivating...' : 'Deactivate'}\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => setSelectedUsers(new Set())}\n                  >\n                    Clear\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardHeader>\n\n          <CardContent>\n            {/* Users Table */}\n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-4\">\n                    <Skeleton className=\"h-4 w-4\" />\n                    <Skeleton className=\"h-10 w-10 rounded-full\" />\n                    <div className=\"space-y-2 flex-1\">\n                      <Skeleton className=\"h-4 w-48\" />\n                      <Skeleton className=\"h-3 w-32\" />\n                    </div>\n                    <Skeleton className=\"h-6 w-16\" />\n                    <Skeleton className=\"h-6 w-20\" />\n                    <Skeleton className=\"h-8 w-8\" />\n                  </div>\n                ))}\n              </div>\n            ) : error ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-red-500 mb-2\">Failed to load users</div>\n                <Button onClick={() => refetch()} variant=\"outline\" size=\"sm\">\n                  Try Again\n                </Button>\n              </div>\n            ) : users.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No users found</h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  {filters.search ? 'No users match your search criteria' : 'Get started by adding your first user'}\n                </p>\n                {!filters.search && (\n                  <Button onClick={() => setShowAddUserModal(true)}>\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    Add First User\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\">\n                      <Checkbox\n                        checked={users.length > 0 && selectedUsers.size === users.length}\n                        onCheckedChange={handleSelectAll}\n                        aria-label=\"Select all users\"\n                      />\n                    </TableHead>\n                    <TableHead>User</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Registration</TableHead>\n                    <TableHead>Last Login</TableHead>\n                    <TableHead className=\"w-12\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {users.map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        <Checkbox\n                          checked={selectedUsers.has(user.id)}\n                          onCheckedChange={(checked) => handleSelectUser(user.id, !!checked)}\n                          aria-label={`Select ${getUserDisplayName(user)}`}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarImage src={user.profileImageUrl || undefined} />\n                            <AvatarFallback className=\"bg-purple-100 text-purple-600 dark:bg-purple-900/20 dark:text-purple-400\">\n                              {getUserInitials(user)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"font-medium text-gray-900 dark:text-white\" data-testid={`user-name-${user.id}`}>\n                              {getUserDisplayName(user)}\n                            </p>\n                            <p className=\"text-sm text-gray-500 dark:text-gray-400\" data-testid={`user-email-${user.id}`}>\n                              {user.email}\n                            </p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={user.role === 'admin' ? 'default' : 'secondary'}\n                          data-testid={`user-role-${user.id}`}\n                        >\n                          {user.role === 'admin' ? (\n                            <>\n                              <Shield className=\"h-3 w-3 mr-1\" />\n                              Admin\n                            </>\n                          ) : (\n                            <>\n                              <User className=\"h-3 w-3 mr-1\" />\n                              User\n                            </>\n                          )}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={user.isActive ? 'secondary' : 'outline'}\n                          className={user.isActive ? 'text-green-600 bg-green-100 dark:bg-green-900/20' : 'text-red-600 bg-red-100 dark:bg-red-900/20'}\n                          data-testid={`user-status-${user.id}`}\n                        >\n                          {user.isActive ? (\n                            <>\n                              <div className=\"h-2 w-2 bg-green-500 rounded-full mr-2\"></div>\n                              Active\n                            </>\n                          ) : (\n                            <>\n                              <div className=\"h-2 w-2 bg-red-500 rounded-full mr-2\"></div>\n                              Inactive\n                            </>\n                          )}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-1 text-sm text-gray-600 dark:text-gray-400\" data-testid={`user-registration-${user.id}`}>\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>{formatDate(user.createdAt)}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\" data-testid={`user-last-login-${user.id}`}>\n                          {formatDate(user.updatedAt)}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"h-8 w-8 p-0\"\n                              data-testid={`user-actions-${user.id}`}\n                            >\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\" className=\"w-48\">\n                            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                            <DropdownMenuSeparator />\n                            \n                            <DropdownMenuItem \n                              onClick={() => setUserToView(user)}\n                              data-testid={`action-view-${user.id}`}\n                            >\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              View Profile\n                            </DropdownMenuItem>\n                            \n                            <DropdownMenuItem \n                              onClick={() => setUserToEdit(user)}\n                              data-testid={`action-edit-${user.id}`}\n                            >\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit User\n                            </DropdownMenuItem>\n                            \n                            <DropdownMenuItem\n                              onClick={() => toggleStatusMutation.mutate({ \n                                userId: user.id, \n                                isActive: !user.isActive \n                              })}\n                              data-testid={`action-toggle-status-${user.id}`}\n                            >\n                              {user.isActive ? (\n                                <>\n                                  <UserX className=\"h-4 w-4 mr-2\" />\n                                  Deactivate\n                                </>\n                              ) : (\n                                <>\n                                  <UserCheck className=\"h-4 w-4 mr-2\" />\n                                  Activate\n                                </>\n                              )}\n                            </DropdownMenuItem>\n                            \n                            <DropdownMenuItem\n                              onClick={() => changeRoleMutation.mutate({ \n                                userId: user.id, \n                                role: user.role === 'admin' ? 'user' : 'admin'\n                              })}\n                              data-testid={`action-change-role-${user.id}`}\n                            >\n                              <Shield className=\"h-4 w-4 mr-2\" />\n                              Make {user.role === 'admin' ? 'User' : 'Admin'}\n                            </DropdownMenuItem>\n                            \n                            <DropdownMenuSeparator />\n                            \n                            <DropdownMenuItem\n                              onClick={() => setUserToDelete(user)}\n                              className=\"text-red-600 dark:text-red-400\"\n                              data-testid={`action-delete-${user.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete User\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n\n            {/* Pagination */}\n            {totalPages > 1 && (\n              <div className=\"flex items-center justify-between mt-6\">\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Showing {((filters.page - 1) * filters.limit) + 1} to {Math.min(filters.page * filters.limit, totalUsers)} of {totalUsers} users\n                </div>\n                \n                <div className=\"flex items-center space-x-2\" data-testid=\"pagination-users\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(filters.page - 1)}\n                    disabled={filters.page === 1}\n                  >\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center space-x-1\">\n                    {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                      const pageNum = Math.max(1, Math.min(totalPages - 4, filters.page - 2)) + i;\n                      return (\n                        <Button\n                          key={pageNum}\n                          variant={pageNum === filters.page ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => handlePageChange(pageNum)}\n                          className=\"w-10\"\n                        >\n                          {pageNum}\n                        </Button>\n                      );\n                    })}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handlePageChange(filters.page + 1)}\n                    disabled={filters.page === totalPages}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Add User Modal */}\n        <AddUserModal\n          isOpen={showAddUserModal}\n          onClose={() => setShowAddUserModal(false)}\n          onUserAdded={() => {\n            queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n          }}\n        />\n\n        {/* User Detail Modal */}\n        <UserDetailModal\n          user={userToView}\n          isOpen={!!userToView}\n          onClose={() => setUserToView(null)}\n          onUserUpdated={() => {\n            queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n          }}\n        />\n\n        {/* Delete Confirmation Dialog */}\n        <Dialog open={!!userToDelete} onOpenChange={() => setUserToDelete(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Delete User</DialogTitle>\n              <DialogDescription>\n                Are you sure you want to delete user \"{userToDelete ? getUserDisplayName(userToDelete) : ''}\"?\n                This action cannot be undone and will permanently remove all user data.\n              </DialogDescription>\n            </DialogHeader>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setUserToDelete(null)}>\n                Cancel\n              </Button>\n              <Button\n                variant=\"destructive\"\n                onClick={() => userToDelete && deleteUserMutation.mutate(userToDelete.id)}\n                disabled={deleteUserMutation.isPending}\n              >\n                {deleteUserMutation.isPending ? 'Deleting...' : 'Delete User'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AdminLayout>\n  );\n}","size_bytes":33704},"server/middleware/secure-admin.ts":{"content":"import type { Request, Response, NextFunction } from 'express';\nimport type { AuthRequest } from './auth';\nimport { randomUUID } from 'crypto';\nimport { storage } from '../storage';\nimport { CryptoService } from '../services/crypto';\n\ninterface SecureSession {\n  id: string;\n  adminId: string;\n  ipAddress: string;\n  userAgent: string;\n  createdAt: number;\n  expiresAt: number;\n  permissions: string[];\n}\n\ninterface RateLimit {\n  attempts: number;\n  lastAttempt: number;\n  blockedUntil?: number;\n}\n\n// In-memory storage for secure sessions (could be moved to Redis in production)\nconst secureSessions = new Map<string, SecureSession>();\nconst rateLimits = new Map<string, RateLimit>();\n\nconst SESSION_DURATION = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç\nconst MAX_ATTEMPTS = 3;\nconst BLOCK_DURATION = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n\nexport class SecureAdminService {\n  // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏\n  static cleanupExpiredSessions() {\n    const now = Date.now();\n    for (const [sessionId, session] of Array.from(secureSessions.entries())) {\n      if (session.expiresAt < now) {\n        secureSessions.delete(sessionId);\n      }\n    }\n  }\n\n  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit\n  static checkRateLimit(identifier: string): { allowed: boolean; remainingTime?: number } {\n    const now = Date.now();\n    const limit = rateLimits.get(identifier);\n\n    if (limit?.blockedUntil && limit.blockedUntil > now) {\n      return { \n        allowed: false, \n        remainingTime: Math.ceil((limit.blockedUntil - now) / 1000) \n      };\n    }\n\n    if (!limit || now - limit.lastAttempt > 60000) { // –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É\n      rateLimits.set(identifier, { attempts: 1, lastAttempt: now });\n      return { allowed: true };\n    }\n\n    if (limit.attempts >= MAX_ATTEMPTS) {\n      // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç\n      limit.blockedUntil = now + BLOCK_DURATION;\n      rateLimits.set(identifier, limit);\n      return { \n        allowed: false, \n        remainingTime: Math.ceil(BLOCK_DURATION / 1000) \n      };\n    }\n\n    limit.attempts++;\n    limit.lastAttempt = now;\n    rateLimits.set(identifier, limit);\n    return { allowed: true };\n  }\n\n  // –°–æ–∑–¥–∞—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é\n  static async createSecureSession(\n    adminId: string, \n    ipAddress: string, \n    userAgent: string,\n    permissions: string[] = ['telegram_view']\n  ): Promise<string> {\n    this.cleanupExpiredSessions();\n\n    const sessionId = randomUUID();\n    const session: SecureSession = {\n      id: sessionId,\n      adminId,\n      ipAddress,\n      userAgent,\n      createdAt: Date.now(),\n      expiresAt: Date.now() + SESSION_DURATION,\n      permissions\n    };\n\n    secureSessions.set(sessionId, session);\n\n    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏\n    await storage.createAdminLog({\n      adminId,\n      action: 'create_secure_session',\n      target: 'telegram',\n      description: `Created secure session for Telegram access`,\n      metadata: { sessionId, permissions, ipAddress },\n      ipAddress,\n      userAgent\n    });\n\n    return sessionId;\n  }\n\n  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é\n  static validateSecureSession(\n    sessionId: string, \n    adminId: string, \n    ipAddress: string, \n    requiredPermission: string\n  ): { valid: boolean; session?: SecureSession; reason?: string } {\n    this.cleanupExpiredSessions();\n\n    const session = secureSessions.get(sessionId);\n    if (!session) {\n      return { valid: false, reason: 'Session not found' };\n    }\n\n    if (session.expiresAt < Date.now()) {\n      secureSessions.delete(sessionId);\n      return { valid: false, reason: 'Session expired' };\n    }\n\n    if (session.adminId !== adminId) {\n      return { valid: false, reason: 'Session belongs to different admin' };\n    }\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π)\n    if (session.ipAddress !== ipAddress) {\n      return { valid: false, reason: 'IP address mismatch' };\n    }\n\n    if (!session.permissions.includes(requiredPermission)) {\n      return { valid: false, reason: 'Insufficient permissions' };\n    }\n\n    return { valid: true, session };\n  }\n\n  // –û—Ç–æ–∑–≤–∞—Ç—å —Å–µ—Å—Å–∏—é\n  static revokeSession(sessionId: string): boolean {\n    return secureSessions.delete(sessionId);\n  }\n\n  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∞\n  static getAdminSessions(adminId: string): SecureSession[] {\n    this.cleanupExpiredSessions();\n    return Array.from(secureSessions.values()).filter(s => s.adminId === adminId);\n  }\n}\n\n// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\nexport const requireAdminPassword = (requiredPermission: string = 'telegram_view') => {\n  return async (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    if (req.user.role !== 'admin') {\n      return res.status(403).json({ error: 'Admin access required' });\n    }\n\n    const { adminPassword, secureSessionId } = req.body;\n    const clientIP = req.ip || req.connection.remoteAddress || 'unknown';\n    const userAgent = req.get('User-Agent') || 'unknown';\n    const rateLimitKey = `${req.user.id}_${clientIP}`;\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit\n    const rateCheck = SecureAdminService.checkRateLimit(rateLimitKey);\n    if (!rateCheck.allowed) {\n      await storage.createAdminLog({\n        adminId: req.user.id,\n        action: 'rate_limit_exceeded',\n        target: 'telegram',\n        description: `Rate limit exceeded for secure access`,\n        metadata: { remainingTime: rateCheck.remainingTime },\n        ipAddress: clientIP,\n        userAgent\n      });\n\n      return res.status(429).json({ \n        error: 'Too many attempts', \n        remainingTime: rateCheck.remainingTime \n      });\n    }\n\n    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë\n    if (secureSessionId) {\n      const validation = SecureAdminService.validateSecureSession(\n        secureSessionId, \n        req.user.id, \n        clientIP, \n        requiredPermission\n      );\n\n      if (validation.valid) {\n        // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ –∫–∞–∂–¥–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n        validation.session!.expiresAt = Date.now() + SESSION_DURATION;\n        return next();\n      } else {\n        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏\n        await storage.createAdminLog({\n          adminId: req.user.id,\n          action: 'invalid_secure_session',\n          target: 'telegram',\n          description: `Invalid secure session: ${validation.reason}`,\n          metadata: { sessionId: secureSessionId, reason: validation.reason },\n          ipAddress: clientIP,\n          userAgent\n        });\n      }\n    }\n\n    // –¢—Ä–µ–±—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏\n    if (!adminPassword) {\n      return res.status(400).json({ \n        error: 'Admin password required for secure access',\n        requirePassword: true\n      });\n    }\n\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω)\n    try {\n      const user = await storage.getUserByEmail(req.user.email!);\n      if (!user || !user.password) {\n        await storage.createAdminLog({\n          adminId: req.user.id,\n          action: 'password_verification_failed',\n          target: 'telegram',\n          description: 'Admin password not set or user not found',\n          ipAddress: clientIP,\n          userAgent\n        });\n\n        return res.status(400).json({ \n          error: 'Admin password not configured' \n        });\n      }\n\n      const bcrypt = await import('bcryptjs');\n      const passwordValid = await bcrypt.compare(adminPassword, user.password);\n\n      if (!passwordValid) {\n        await storage.createAdminLog({\n          adminId: req.user.id,\n          action: 'invalid_admin_password',\n          target: 'telegram',\n          description: 'Invalid admin password provided for secure access',\n          ipAddress: clientIP,\n          userAgent\n        });\n\n        return res.status(401).json({ \n          error: 'Invalid admin password' \n        });\n      }\n\n      // –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é\n      const permissions = [requiredPermission];\n      if (requiredPermission === 'telegram_view') {\n        permissions.push('telegram_manage'); // –ú–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å\n      }\n\n      const sessionId = await SecureAdminService.createSecureSession(\n        req.user.id,\n        clientIP,\n        userAgent,\n        permissions\n      );\n\n      // –î–æ–±–∞–≤–ª—è–µ–º sessionId –≤ –æ—Ç–≤–µ—Ç\n      res.locals.secureSessionId = sessionId;\n      next();\n\n    } catch (error) {\n      console.error('Admin password verification error:', error);\n      return res.status(500).json({ error: 'Internal server error' });\n    }\n  };\n};\n\n// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏\nexport const requireSecureSession = (requiredPermission: string = 'telegram_view') => {\n  return async (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    const { secureSessionId } = req.query;\n    const clientIP = req.ip || req.connection.remoteAddress || 'unknown';\n\n    if (!secureSessionId) {\n      return res.status(401).json({ \n        error: 'Secure session required',\n        requireSecureAuth: true \n      });\n    }\n\n    const validation = SecureAdminService.validateSecureSession(\n      secureSessionId as string,\n      req.user.id,\n      clientIP,\n      requiredPermission\n    );\n\n    if (!validation.valid) {\n      await storage.createAdminLog({\n        adminId: req.user.id,\n        action: 'invalid_secure_session',\n        target: 'telegram',\n        description: `Invalid secure session: ${validation.reason}`,\n        metadata: { sessionId: secureSessionId, reason: validation.reason },\n        ipAddress: clientIP,\n        userAgent: req.get('User-Agent') || 'unknown'\n      });\n\n      return res.status(401).json({ \n        error: 'Invalid secure session',\n        reason: validation.reason,\n        requireSecureAuth: true \n      });\n    }\n\n    // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å–µ—Å—Å–∏—é\n    validation.session!.expiresAt = Date.now() + SESSION_DURATION;\n    next();\n  };\n};\n\n// Cleanup job - –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\nsetInterval(() => {\n  SecureAdminService.cleanupExpiredSessions();\n}, 5 * 60 * 1000);","size_bytes":10608},"client/src/pages/admin-currencies.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { AdminLayout } from \"@/components/admin-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Coins,\n  Plus,\n  Pencil,\n  Trash2,\n  Power,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  RefreshCw\n} from \"lucide-react\";\n\ninterface Currency {\n  id: string;\n  name: string;\n  symbol: string;\n  type: 'crypto' | 'fiat';\n  network: string | null;\n  minAmount: string;\n  maxAmount: string;\n  isActive: boolean;\n  iconUrl: string | null;\n}\n\ninterface CurrencyFormData {\n  id: string;\n  name: string;\n  symbol: string;\n  type: 'crypto' | 'fiat';\n  network: string;\n  minAmount: string;\n  maxAmount: string;\n  isActive: boolean;\n  iconUrl: string;\n}\n\nexport function AdminCurrenciesPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [editingCurrency, setEditingCurrency] = useState<Currency | null>(null);\n  const [formData, setFormData] = useState<CurrencyFormData>({\n    id: '',\n    name: '',\n    symbol: '',\n    type: 'crypto',\n    network: '',\n    minAmount: '',\n    maxAmount: '',\n    isActive: true,\n    iconUrl: ''\n  });\n\n  // Fetch currencies\n  const { data: currencies = [], isLoading, error, refetch } = useQuery<Currency[]>({\n    queryKey: ['/api/admin/currencies'],\n    retry: 2,\n  });\n\n  // Create currency mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: CurrencyFormData) => {\n      const response = await fetch('/api/admin/currencies', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create currency');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"–í–∞–ª—é—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞\",\n        description: \"–ù–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/currencies'] });\n      setShowCreateDialog(false);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Update currency mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<CurrencyFormData> }) => {\n      const response = await fetch(`/api/admin/currencies/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update currency');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"–í–∞–ª—é—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\",\n        description: \"–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/currencies'] });\n      setEditingCurrency(null);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Toggle active status mutation\n  const toggleMutation = useMutation({\n    mutationFn: async (currency: Currency) => {\n      const response = await fetch(`/api/admin/currencies/${currency.id}/toggle`, {\n        method: 'PATCH',\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to toggle currency status');\n      }\n\n      return response.json();\n    },\n    onSuccess: (_, currency) => {\n      toast({\n        title: currency.isActive ? \"–í–∞–ª—é—Ç–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\" : \"–í–∞–ª—é—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\",\n        description: `${currency.name} —Ç–µ–ø–µ—Ä—å ${currency.isActive ? '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞' : '–∞–∫—Ç–∏–≤–Ω–∞'}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/currencies'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"–û—à–∏–±–∫–∞\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete currency mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (currencyId: string) => {\n      const response = await fetch(`/api/admin/currencies/${currencyId}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to delete currency');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"–í–∞–ª—é—Ç–∞ —É–¥–∞–ª–µ–Ω–∞\",\n        description: \"–í–∞–ª—é—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/currencies'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      id: '',\n      name: '',\n      symbol: '',\n      type: 'crypto',\n      network: '',\n      minAmount: '',\n      maxAmount: '',\n      isActive: true,\n      iconUrl: ''\n    });\n  };\n\n  const handleEdit = (currency: Currency) => {\n    setEditingCurrency(currency);\n    setFormData({\n      id: currency.id,\n      name: currency.name,\n      symbol: currency.symbol,\n      type: currency.type,\n      network: currency.network || '',\n      minAmount: currency.minAmount,\n      maxAmount: currency.maxAmount,\n      isActive: currency.isActive,\n      iconUrl: currency.iconUrl || ''\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingCurrency) {\n      updateMutation.mutate({ id: editingCurrency.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleRefresh = async () => {\n    try {\n      await refetch();\n      toast({\n        title: \"–û–±–Ω–æ–≤–ª–µ–Ω–æ\",\n        description: \"–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω\",\n      });\n    } catch (error) {\n      toast({\n        title: \"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\",\n        description: \"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (error) {\n    return (\n      <AdminLayout\n        title=\"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏\"\n        currentSection=\"currencies\"\n        breadcrumbs={[\n          { label: '–ê–¥–º–∏–Ω', href: '/admin' },\n          { label: '–í–∞–ª—é—Ç—ã' }\n        ]}\n      >\n        <Alert className=\"border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/10\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n          <AlertDescription className=\"text-red-700 dark:text-red-300\">\n            –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n          </AlertDescription>\n        </Alert>\n        <div className=\"flex justify-center mt-4\">\n          <Button onClick={handleRefresh}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É\n          </Button>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout\n      title=\"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏\"\n      currentSection=\"currencies\"\n      breadcrumbs={[\n        { label: '–ê–¥–º–∏–Ω', href: '/admin' },\n        { label: '–í–∞–ª—é—Ç—ã' }\n      ]}\n    >\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              –î–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞–ª—é—Ç–∞–º–∏ –¥–ª—è –æ–±–º–µ–Ω–∞\n            </p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button onClick={handleRefresh} variant=\"outline\" disabled={isLoading}>\n              <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n              –û–±–Ω–æ–≤–∏—Ç—å\n            </Button>\n            <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n              <DialogTrigger asChild>\n                <Button onClick={() => { resetForm(); setEditingCurrency(null); }}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <form onSubmit={handleSubmit}>\n                  <DialogHeader>\n                    <DialogTitle className=\"flex items-center\">\n                      <Coins className=\"h-5 w-5 mr-2\" />\n                      {editingCurrency ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É' : '–ù–æ–≤–∞—è –≤–∞–ª—é—Ç–∞'}\n                    </DialogTitle>\n                    <DialogDescription>\n                      {editingCurrency ? '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª—é—Ç—ã' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É –≤ —Å–∏—Å—Ç–µ–º—É'}\n                    </DialogDescription>\n                  </DialogHeader>\n\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"currency-id\">ID –≤–∞–ª—é—Ç—ã</Label>\n                        <Input\n                          id=\"currency-id\"\n                          placeholder=\"btc, eth, usdt\"\n                          value={formData.id}\n                          onChange={(e) => setFormData({ ...formData, id: e.target.value.toLowerCase() })}\n                          disabled={!!editingCurrency}\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"currency-symbol\">–°–∏–º–≤–æ–ª</Label>\n                        <Input\n                          id=\"currency-symbol\"\n                          placeholder=\"BTC, ETH, USDT\"\n                          value={formData.symbol}\n                          onChange={(e) => setFormData({ ...formData, symbol: e.target.value.toUpperCase() })}\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"currency-name\">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>\n                      <Input\n                        id=\"currency-name\"\n                        placeholder=\"Bitcoin, Ethereum, Tether\"\n                        value={formData.name}\n                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                        required\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"currency-type\">–¢–∏–ø</Label>\n                        <Select value={formData.type} onValueChange={(value: 'crypto' | 'fiat') => setFormData({ ...formData, type: value })}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"crypto\">–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</SelectItem>\n                            <SelectItem value=\"fiat\">–§–∏–∞—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"currency-network\">–°–µ—Ç—å</Label>\n                        <Input\n                          id=\"currency-network\"\n                          placeholder=\"BTC, ETH, TRC20, ERC20\"\n                          value={formData.network}\n                          onChange={(e) => setFormData({ ...formData, network: e.target.value })}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"min-amount\">–ú–∏–Ω. —Å—É–º–º–∞</Label>\n                        <Input\n                          id=\"min-amount\"\n                          type=\"number\"\n                          step=\"any\"\n                          placeholder=\"0.001\"\n                          value={formData.minAmount}\n                          onChange={(e) => setFormData({ ...formData, minAmount: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"max-amount\">–ú–∞–∫—Å. —Å—É–º–º–∞</Label>\n                        <Input\n                          id=\"max-amount\"\n                          type=\"number\"\n                          step=\"any\"\n                          placeholder=\"10\"\n                          value={formData.maxAmount}\n                          onChange={(e) => setFormData({ ...formData, maxAmount: e.target.value })}\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"icon-url\">URL –∏–∫–æ–Ω–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>\n                      <Input\n                        id=\"icon-url\"\n                        placeholder=\"https://cryptoicons.org/api/icon/btc/200\"\n                        value={formData.iconUrl}\n                        onChange={(e) => setFormData({ ...formData, iconUrl: e.target.value })}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"is-active\"\n                        checked={formData.isActive}\n                        onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                      />\n                      <Label htmlFor=\"is-active\">–ê–∫—Ç–∏–≤–Ω–∞</Label>\n                    </div>\n                  </div>\n\n                  <DialogFooter>\n                    <Button type=\"button\" variant=\"outline\" onClick={() => {\n                      setShowCreateDialog(false);\n                      setEditingCurrency(null);\n                      resetForm();\n                    }}>\n                      –û—Ç–º–µ–Ω–∞\n                    </Button>\n                    <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                      {(createMutation.isPending || updateMutation.isPending) && <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />}\n                      {editingCurrency ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Currencies Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Coins className=\"h-5 w-5 mr-2\" />\n              –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç ({currencies.length})\n            </CardTitle>\n            <CardDescription>\n              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-4\">\n                    <div className=\"h-12 w-12 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/3 animate-pulse\"></div>\n                      <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/4 animate-pulse\"></div>\n                    </div>\n                    <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-16 animate-pulse\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : currencies.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Coins className=\"h-12 w-12 mx-auto text-gray-400 dark:text-gray-600\" />\n                <h3 className=\"mt-4 text-lg font-medium text-gray-900 dark:text-white\">\n                  –ù–µ—Ç –≤–∞–ª—é—Ç\n                </h3>\n                <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\n                  –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –≤–∞–ª—é—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±–º–µ–Ω–∞\n                </p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>–í–∞–ª—é—Ç–∞</TableHead>\n                    <TableHead>–¢–∏–ø</TableHead>\n                    <TableHead>–°–µ—Ç—å</TableHead>\n                    <TableHead>–õ–∏–º–∏—Ç—ã</TableHead>\n                    <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>\n                    <TableHead className=\"text-right\">–î–µ–π—Å—Ç–≤–∏—è</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {currencies.map((currency) => (\n                    <TableRow key={currency.id}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          {currency.iconUrl ? (\n                            <img \n                              src={currency.iconUrl} \n                              alt={currency.symbol}\n                              className=\"h-8 w-8 rounded-full\"\n                              onError={(e) => { e.currentTarget.style.display = 'none'; }}\n                            />\n                          ) : (\n                            <div className=\"h-8 w-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                              <span className=\"text-white text-xs font-bold\">\n                                {currency.symbol.slice(0, 2)}\n                              </span>\n                            </div>\n                          )}\n                          <div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">\n                              {currency.name}\n                            </div>\n                            <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                              {currency.symbol} ({currency.id})\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={currency.type === 'crypto' ? 'default' : 'secondary'}>\n                          {currency.type === 'crypto' ? '–ö—Ä–∏–ø—Ç–æ' : '–§–∏–∞—Ç'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {currency.network ? (\n                          <Badge variant=\"outline\">{currency.network}</Badge>\n                        ) : (\n                          <span className=\"text-gray-400\">‚Äî</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          <div>{currency.minAmount} ‚Äî {currency.maxAmount}</div>\n                          <div className=\"text-gray-500\">{currency.symbol}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          {currency.isActive ? (\n                            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                          ) : (\n                            <XCircle className=\"h-4 w-4 text-red-600\" />\n                          )}\n                          <span className={currency.isActive ? 'text-green-600' : 'text-red-600'}>\n                            {currency.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex items-center justify-end space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              handleEdit(currency);\n                              setShowCreateDialog(true);\n                            }}\n                            data-testid={`edit-currency-${currency.id}`}\n                          >\n                            <Pencil className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => toggleMutation.mutate(currency)}\n                            disabled={toggleMutation.isPending}\n                            data-testid={`toggle-currency-${currency.id}`}\n                          >\n                            <Power className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É ${currency.name}?`)) {\n                                deleteMutation.mutate(currency.id);\n                              }\n                            }}\n                            disabled={deleteMutation.isPending}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                            data-testid={`delete-currency-${currency.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </AdminLayout>\n  );\n}","size_bytes":23952},"client/src/pages/admin-exchange-methods.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { AdminLayout } from \"@/components/admin-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  CreditCard,\n  Plus,\n  Pencil,\n  Trash2,\n  Power,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  RefreshCw,\n  Wallet,\n  ArrowUpDown\n} from \"lucide-react\";\n\ninterface ExchangeMethod {\n  id: string;\n  name: string;\n  code: string;\n  type: 'fiat_in' | 'fiat_out' | 'crypto_in' | 'crypto_out';\n  supportedCurrencies: string[];\n  parameters: any;\n  isEnabled: boolean;\n  description: string | null;\n  createdAt: string;\n  updatedAt: string;\n  createdBy: string;\n}\n\ninterface Currency {\n  id: string;\n  name: string;\n  symbol: string;\n  type: 'crypto' | 'fiat';\n  isActive: boolean;\n}\n\ninterface ExchangeMethodFormData {\n  name: string;\n  code: string;\n  type: 'fiat_in' | 'fiat_out' | 'crypto_in' | 'crypto_out';\n  supportedCurrencies: string[];\n  description: string;\n  isEnabled: boolean;\n  parameters: {\n    minAmount?: string;\n    maxAmount?: string;\n    fee?: string;\n    processingTime?: string;\n    [key: string]: any;\n  };\n}\n\nexport function AdminExchangeMethodsPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [editingMethod, setEditingMethod] = useState<ExchangeMethod | null>(null);\n  const [selectedCurrencies, setSelectedCurrencies] = useState<string[]>([]);\n  const [formData, setFormData] = useState<ExchangeMethodFormData>({\n    name: '',\n    code: '',\n    type: 'fiat_out',\n    supportedCurrencies: [],\n    description: '',\n    isEnabled: true,\n    parameters: {\n      minAmount: '',\n      maxAmount: '',\n      fee: '',\n      processingTime: ''\n    }\n  });\n\n  // Fetch exchange methods\n  const { data: methods = [], isLoading, error, refetch } = useQuery<ExchangeMethod[]>({\n    queryKey: ['/api/admin/exchange-methods'],\n    retry: 2,\n  });\n\n  // Fetch currencies for selection\n  const { data: currencies = [] } = useQuery<Currency[]>({\n    queryKey: ['/api/admin/currencies'],\n    retry: 2,\n  });\n\n  // Create method mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: ExchangeMethodFormData) => {\n      const response = await fetch('/api/admin/exchange-methods', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create exchange method');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"–°–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω\",\n        description: \"–ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/exchange-methods'] });\n      setShowCreateDialog(false);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Update method mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<ExchangeMethodFormData> }) => {\n      const response = await fetch(`/api/admin/exchange-methods/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to update exchange method');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"–°–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω\",\n        description: \"–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/exchange-methods'] });\n      setEditingMethod(null);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete method mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (methodId: string) => {\n      const response = await fetch(`/api/admin/exchange-methods/${methodId}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to delete exchange method');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"–°–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω\",\n        description: \"–°–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/exchange-methods'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      code: '',\n      type: 'fiat_out',\n      supportedCurrencies: [],\n      description: '',\n      isEnabled: true,\n      parameters: {\n        minAmount: '',\n        maxAmount: '',\n        fee: '',\n        processingTime: ''\n      }\n    });\n    setSelectedCurrencies([]);\n  };\n\n  const handleEdit = (method: ExchangeMethod) => {\n    setEditingMethod(method);\n    setFormData({\n      name: method.name,\n      code: method.code,\n      type: method.type,\n      supportedCurrencies: method.supportedCurrencies,\n      description: method.description || '',\n      isEnabled: method.isEnabled,\n      parameters: method.parameters || {\n        minAmount: '',\n        maxAmount: '',\n        fee: '',\n        processingTime: ''\n      }\n    });\n    setSelectedCurrencies(method.supportedCurrencies);\n  };\n\n  const handleCurrencyToggle = (currencyId: string) => {\n    const newSelected = selectedCurrencies.includes(currencyId)\n      ? selectedCurrencies.filter(id => id !== currencyId)\n      : [...selectedCurrencies, currencyId];\n    \n    setSelectedCurrencies(newSelected);\n    setFormData({ ...formData, supportedCurrencies: newSelected });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingMethod) {\n      updateMutation.mutate({ id: editingMethod.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'fiat_in':\n      case 'fiat_out':\n        return <CreditCard className=\"h-4 w-4\" />;\n      case 'crypto_in':\n      case 'crypto_out':\n        return <Wallet className=\"h-4 w-4\" />;\n      default:\n        return <ArrowUpDown className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'fiat_in': return '–§–∏–∞—Ç ‚Üí –ö—Ä–∏–ø—Ç–æ';\n      case 'fiat_out': return '–ö—Ä–∏–ø—Ç–æ ‚Üí –§–∏–∞—Ç';\n      case 'crypto_in': return '–ö—Ä–∏–ø—Ç–æ ‚Üí –ö—Ä–∏–ø—Ç–æ (–≤—Ö–æ–¥)';\n      case 'crypto_out': return '–ö—Ä–∏–ø—Ç–æ ‚Üí –ö—Ä–∏–ø—Ç–æ (–≤—ã—Ö–æ–¥)';\n      default: return type;\n    }\n  };\n\n  const handleRefresh = async () => {\n    try {\n      await refetch();\n      toast({\n        title: \"–û–±–Ω–æ–≤–ª–µ–Ω–æ\",\n        description: \"–°–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–±–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω\",\n      });\n    } catch (error) {\n      toast({\n        title: \"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\",\n        description: \"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–±–º–µ–Ω–∞\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (error) {\n    return (\n      <AdminLayout\n        title=\"–°–ø–æ—Å–æ–±—ã –æ–±–º–µ–Ω–∞\"\n        currentSection=\"exchange-methods\"\n        breadcrumbs={[\n          { label: '–ê–¥–º–∏–Ω', href: '/admin' },\n          { label: '–°–ø–æ—Å–æ–±—ã –æ–±–º–µ–Ω–∞' }\n        ]}\n      >\n        <Alert className=\"border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/10\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n          <AlertDescription className=\"text-red-700 dark:text-red-300\">\n            –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–±–º–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n          </AlertDescription>\n        </Alert>\n        <div className=\"flex justify-center mt-4\">\n          <Button onClick={handleRefresh}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É\n          </Button>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout\n      title=\"–°–ø–æ—Å–æ–±—ã –æ–±–º–µ–Ω–∞\"\n      currentSection=\"exchange-methods\"\n      breadcrumbs={[\n        { label: '–ê–¥–º–∏–Ω', href: '/admin' },\n        { label: '–°–ø–æ—Å–æ–±—ã –æ–±–º–µ–Ω–∞' }\n      ]}\n    >\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              –°–ø–æ—Å–æ–±—ã –æ–±–º–µ–Ω–∞\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞–º–∏ –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤\n            </p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button onClick={handleRefresh} variant=\"outline\" disabled={isLoading}>\n              <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n              –û–±–Ω–æ–≤–∏—Ç—å\n            </Button>\n            <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n              <DialogTrigger asChild>\n                <Button onClick={() => { resetForm(); setEditingMethod(null); }}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  –î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–±\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\">\n                <form onSubmit={handleSubmit}>\n                  <DialogHeader>\n                    <DialogTitle className=\"flex items-center\">\n                      <ArrowUpDown className=\"h-5 w-5 mr-2\" />\n                      {editingMethod ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞' : '–ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞'}\n                    </DialogTitle>\n                    <DialogDescription>\n                      {editingMethod ? '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø–æ—Å–æ–±–∞ –æ–±–º–µ–Ω–∞' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç'}\n                    </DialogDescription>\n                  </DialogHeader>\n\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"method-name\">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>\n                        <Input\n                          id=\"method-name\"\n                          placeholder=\"–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞\"\n                          value={formData.name}\n                          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"method-code\">–ö–æ–¥</Label>\n                        <Input\n                          id=\"method-code\"\n                          placeholder=\"bank_card\"\n                          value={formData.code}\n                          onChange={(e) => setFormData({ ...formData, code: e.target.value.toLowerCase().replace(/\\s+/g, '_') })}\n                          disabled={!!editingMethod}\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"method-type\">–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏</Label>\n                      <Select value={formData.type} onValueChange={(value: any) => setFormData({ ...formData, type: value })}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"fiat_in\">–§–∏–∞—Ç ‚Üí –ö—Ä–∏–ø—Ç–æ (–≤–≤–æ–¥ —Ñ–∏–∞—Ç–∞)</SelectItem>\n                          <SelectItem value=\"fiat_out\">–ö—Ä–∏–ø—Ç–æ ‚Üí –§–∏–∞—Ç (–≤—ã–≤–æ–¥ –≤ —Ñ–∏–∞—Ç)</SelectItem>\n                          <SelectItem value=\"crypto_in\">–ö—Ä–∏–ø—Ç–æ ‚Üí –ö—Ä–∏–ø—Ç–æ (–≤–≤–æ–¥ –∫—Ä–∏–ø—Ç–æ)</SelectItem>\n                          <SelectItem value=\"crypto_out\">–ö—Ä–∏–ø—Ç–æ ‚Üí –ö—Ä–∏–ø—Ç–æ (–≤—ã–≤–æ–¥ –∫—Ä–∏–ø—Ç–æ)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã</Label>\n                      <div className=\"grid grid-cols-2 gap-2 mt-2 max-h-32 overflow-y-auto border rounded p-2\">\n                        {currencies.filter(currency => \n                          (formData.type.includes('fiat') && currency.type === 'fiat') ||\n                          (formData.type.includes('crypto') && currency.type === 'crypto')\n                        ).map((currency) => (\n                          <div key={currency.id} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id={`currency-${currency.id}`}\n                              checked={selectedCurrencies.includes(currency.id)}\n                              onChange={() => handleCurrencyToggle(currency.id)}\n                              className=\"rounded\"\n                            />\n                            <Label htmlFor={`currency-${currency.id}`} className=\"text-sm\">\n                              {currency.symbol} ({currency.name})\n                            </Label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"method-description\">–û–ø–∏—Å–∞–Ω–∏–µ</Label>\n                      <Textarea\n                        id=\"method-description\"\n                        placeholder=\"–û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–±–º–µ–Ω–∞...\"\n                        value={formData.description}\n                        onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                        rows={3}\n                      />\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Label>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</Label>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"min-amount\">–ú–∏–Ω. —Å—É–º–º–∞</Label>\n                          <Input\n                            id=\"min-amount\"\n                            type=\"number\"\n                            step=\"any\"\n                            placeholder=\"50\"\n                            value={formData.parameters.minAmount}\n                            onChange={(e) => setFormData({ \n                              ...formData, \n                              parameters: { ...formData.parameters, minAmount: e.target.value }\n                            })}\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"max-amount\">–ú–∞–∫—Å. —Å—É–º–º–∞</Label>\n                          <Input\n                            id=\"max-amount\"\n                            type=\"number\"\n                            step=\"any\"\n                            placeholder=\"10000\"\n                            value={formData.parameters.maxAmount}\n                            onChange={(e) => setFormData({ \n                              ...formData, \n                              parameters: { ...formData.parameters, maxAmount: e.target.value }\n                            })}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"fee\">–ö–æ–º–∏—Å—Å–∏—è (%)</Label>\n                          <Input\n                            id=\"fee\"\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"2.5\"\n                            value={formData.parameters.fee}\n                            onChange={(e) => setFormData({ \n                              ...formData, \n                              parameters: { ...formData.parameters, fee: e.target.value }\n                            })}\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"processing-time\">–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</Label>\n                          <Input\n                            id=\"processing-time\"\n                            placeholder=\"5-10 –º–∏–Ω—É—Ç\"\n                            value={formData.parameters.processingTime}\n                            onChange={(e) => setFormData({ \n                              ...formData, \n                              parameters: { ...formData.parameters, processingTime: e.target.value }\n                            })}\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"is-enabled\"\n                        checked={formData.isEnabled}\n                        onCheckedChange={(checked) => setFormData({ ...formData, isEnabled: checked })}\n                      />\n                      <Label htmlFor=\"is-enabled\">–í–∫–ª—é—á–µ–Ω</Label>\n                    </div>\n                  </div>\n\n                  <DialogFooter>\n                    <Button type=\"button\" variant=\"outline\" onClick={() => {\n                      setShowCreateDialog(false);\n                      setEditingMethod(null);\n                      resetForm();\n                    }}>\n                      –û—Ç–º–µ–Ω–∞\n                    </Button>\n                    <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                      {(createMutation.isPending || updateMutation.isPending) && <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />}\n                      {editingMethod ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Methods Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <ArrowUpDown className=\"h-5 w-5 mr-2\" />\n              –°–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–±–º–µ–Ω–∞ ({methods.length})\n            </CardTitle>\n            <CardDescription>\n              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-4\">\n                    <div className=\"h-12 w-12 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/3 animate-pulse\"></div>\n                      <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/4 animate-pulse\"></div>\n                    </div>\n                    <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-16 animate-pulse\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : methods.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <ArrowUpDown className=\"h-12 w-12 mx-auto text-gray-400 dark:text-gray-600\" />\n                <h3 className=\"mt-4 text-lg font-medium text-gray-900 dark:text-white\">\n                  –ù–µ—Ç —Å–ø–æ—Å–æ–±–æ–≤ –æ–±–º–µ–Ω–∞\n                </h3>\n                <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\n                  –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n                </p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>–°–ø–æ—Å–æ–±</TableHead>\n                    <TableHead>–¢–∏–ø</TableHead>\n                    <TableHead>–í–∞–ª—é—Ç—ã</TableHead>\n                    <TableHead>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</TableHead>\n                    <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>\n                    <TableHead className=\"text-right\">–î–µ–π—Å—Ç–≤–∏—è</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {methods.map((method) => (\n                    <TableRow key={method.id}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"h-8 w-8 bg-gradient-to-br from-green-500 to-blue-600 rounded-full flex items-center justify-center\">\n                            {getTypeIcon(method.type)}\n                          </div>\n                          <div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">\n                              {method.name}\n                            </div>\n                            <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                              {method.code}\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {getTypeLabel(method.type)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {method.supportedCurrencies.slice(0, 3).map(currencyId => {\n                            const currency = currencies.find(c => c.id === currencyId);\n                            return (\n                              <Badge key={currencyId} variant=\"secondary\" className=\"text-xs\">\n                                {currency?.symbol || currencyId}\n                              </Badge>\n                            );\n                          })}\n                          {method.supportedCurrencies.length > 3 && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              +{method.supportedCurrencies.length - 3}\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          {method.parameters?.minAmount && method.parameters?.maxAmount && (\n                            <div>{method.parameters.minAmount} ‚Äî {method.parameters.maxAmount}</div>\n                          )}\n                          {method.parameters?.fee && (\n                            <div className=\"text-gray-500\">–ö–æ–º–∏—Å—Å–∏—è: {method.parameters.fee}%</div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          {method.isEnabled ? (\n                            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                          ) : (\n                            <XCircle className=\"h-4 w-4 text-red-600\" />\n                          )}\n                          <span className={method.isEnabled ? 'text-green-600' : 'text-red-600'}>\n                            {method.isEnabled ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex items-center justify-end space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              handleEdit(method);\n                              setShowCreateDialog(true);\n                            }}\n                            data-testid={`edit-method-${method.id}`}\n                          >\n                            <Pencil className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ø–æ—Å–æ–± \"${method.name}\"?`)) {\n                                deleteMutation.mutate(method.id);\n                              }\n                            }}\n                            disabled={deleteMutation.isPending}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                            data-testid={`delete-method-${method.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </AdminLayout>\n  );\n}","size_bytes":27317}},"version":1}